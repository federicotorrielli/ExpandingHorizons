[
    {
        "cat": "animals",
        "slot": "product",
        "value": "wax",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from wax through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce wax\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "product",
        "value": "propolis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from propolis through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce propolis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "product",
        "value": "mucus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from mucus through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce mucus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "product",
        "value": "honey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from honey through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce honey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "time",
        "value": "summer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries which link summer with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"are active during summer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "time",
        "value": "night",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries which link night with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"are active during night\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "growl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of growl can be described.\";         A textual example of the semantic relation is \"can growl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "trumpeting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of trumpeting can be described.\";         A textual example of the semantic relation is \"can trumpeting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "bark",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of bark can be described.\";         A textual example of the semantic relation is \"can bark\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "croaking",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of croaking can be described.\";         A textual example of the semantic relation is \"can croaking\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "cry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of cry can be described.\";         A textual example of the semantic relation is \" cry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "leash",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with leash. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for leash.\";         A textual example of the semantic relation is \"are related with leash\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "muzzle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with muzzle. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for muzzle.\";         A textual example of the semantic relation is \"are related with muzzle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with dog. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for dog.\";         A textual example of the semantic relation is \"are related with dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "shape",
        "value": "pear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Form of pear.\";         A textual example of the semantic relation is \"can be pear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "herd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of herd.\";         A textual example of the semantic relation is \"are grouped in herd\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "swarm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of swarm.\";         A textual example of the semantic relation is \"are grouped in swarm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "infestation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of infestation.\";         A textual example of the semantic relation is \"are grouped in infestation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "yelp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of yelp can be described.\";         A textual example of the semantic relation is \" yelp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "hive",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of hive.\";         A textual example of the semantic relation is \"are grouped in hive\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "howl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of howl can be described.\";         A textual example of the semantic relation is \"can howl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "collar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with collar. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for collar.\";         A textual example of the semantic relation is \"are related with collar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "cook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cook.\";         A textual example of the semantic relation is \"are used by cooks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "lover",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive lover.\";         A textual example of the semantic relation is \"are used by lovers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "hunter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive hunter.\";         A textual example of the semantic relation is \"are used by hunters\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "beekeeper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive beekeeper.\";         A textual example of the semantic relation is \"are used by beekeepers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "poacher",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive poacher.\";         A textual example of the semantic relation is \"are used by poachers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "blind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive blind.\";         A textual example of the semantic relation is \"are used by blinds\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "policeman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive policeman.\";         A textual example of the semantic relation is \"are used by policemen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "shepherd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive shepherd.\";         A textual example of the semantic relation is \"are used by shepherds\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "owner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive owner.\";         A textual example of the semantic relation is \"are used by owners\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "kennel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with kennel. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for kennel.\";         A textual example of the semantic relation is \"are related with kennel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "trainer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with trainer. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for trainer.\";         A textual example of the semantic relation is \"are related with trainer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "accessory",
        "value": "handler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with handler. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for handler.\";         A textual example of the semantic relation is \"are related with handler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "food",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which food is interacted with.\";         A textual example of the semantic relation is \"are used for food\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "attraction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which attraction is interacted with.\";         A textual example of the semantic relation is \"are used for attraction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "research",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which research is interacted with.\";         A textual example of the semantic relation is \"are used for research\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "guard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which guard is interacted with.\";         A textual example of the semantic relation is \"are used for guard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "hunting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which hunting is interacted with.\";         A textual example of the semantic relation is \"are used for hunting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "guard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which guard is interacted with.\";         A textual example of the semantic relation is \"are used to guard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "wild",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which wild is interacted with.\";         A textual example of the semantic relation is \"are used for wild\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "transport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which transport is interacted with.\";         A textual example of the semantic relation is \"are used for transport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "beast of burden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which beast of burden is interacted with.\";         A textual example of the semantic relation is \"are used for beast of burden\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "haulage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which haulage is interacted with.\";         A textual example of the semantic relation is \"are used for haulage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "stray",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which stray is interacted with.\";         A textual example of the semantic relation is \"are used for stray\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "faithful",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of faithful, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be faithful\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "cute",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of cute, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be cute\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "loyal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of loyal, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be loyal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "playful",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of playful, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be playful\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "obedient",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of obedient, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be obedient\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "affectionate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of affectionate, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be affectionate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "healthy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of healthy, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be healthy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "aggressive",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of aggressive, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be aggressive\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "rabid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of rabid, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be rabid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "friendly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of friendly, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be friendly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "happy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of happy, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be happy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "cunning",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of cunning, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be cunning\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "feral",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of feral, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be feral\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "behavior",
        "value": "submissive",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the psychological features of submissive, including they attitude to they nature.\";         A textual example of the semantic relation is \"can be submissive\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "colony",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of colony.\";         A textual example of the semantic relation is \"are grouped in colony\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "slow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"are slow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "attack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can attack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "chase",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can chase\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "attack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can attack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "size",
        "value": "small",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Size of small.\";         A textual example of the semantic relation is \"can be small\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "size",
        "value": "large",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Size of large.\";         A textual example of the semantic relation is \"can be large\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "size",
        "value": "big",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Size of big.\";         A textual example of the semantic relation is \"can be big\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "size",
        "value": "medium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Size of medium.\";         A textual example of the semantic relation is \"can be medium\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "larva",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of larva.\";         A textual example of the semantic relation is \"are grouped in larva\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "handler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive handler.\";         A textual example of the semantic relation is \"are used by handlers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "trainer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive trainer.\";         A textual example of the semantic relation is \"are used by trainers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "pet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which pet is interacted with.\";         A textual example of the semantic relation is \"are used for pet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "sound",
        "value": "pet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of pet can be described.\";         A textual example of the semantic relation is \"can pet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "group",
        "value": "nest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Names that indicates a group of animals of the same species of nest.\";         A textual example of the semantic relation is \"are grouped in nest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "prey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which prey is interacted with.\";         A textual example of the semantic relation is \"are used for prey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "eye",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of eye.\";         A textual example of the semantic relation is \"can have eye\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "skin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of skin.\";         A textual example of the semantic relation is \"can have skin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "mouth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mouth.\";         A textual example of the semantic relation is \"can have mouth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "head",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of head.\";         A textual example of the semantic relation is \"can have head\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of leg.\";         A textual example of the semantic relation is \"can have leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "paw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of paw.\";         A textual example of the semantic relation is \"can have paw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "hair",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hair.\";         A textual example of the semantic relation is \"can have hair\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "ear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ear.\";         A textual example of the semantic relation is \"can have ear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "tongue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tongue.\";         A textual example of the semantic relation is \"can have tongue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "fur",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fur.\";         A textual example of the semantic relation is \"can have fur\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of coat.\";         A textual example of the semantic relation is \"can have coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "tail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tail.\";         A textual example of the semantic relation is \"can have tail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "flesh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of flesh.\";         A textual example of the semantic relation is \"can have flesh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "neck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of neck.\";         A textual example of the semantic relation is \"can have neck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "foot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of foot.\";         A textual example of the semantic relation is \"can have foot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "abdomen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of abdomen.\";         A textual example of the semantic relation is \"can have abdomen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "tooth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tooth.\";         A textual example of the semantic relation is \"can have tooth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "toe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toe.\";         A textual example of the semantic relation is \"can have toe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "tusk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tusk.\";         A textual example of the semantic relation is \"can have tusk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "antenna",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of antenna.\";         A textual example of the semantic relation is \"can have antenna\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "stinger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stinger.\";         A textual example of the semantic relation is \"can have stinger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "bone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bone.\";         A textual example of the semantic relation is \"can have bone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "belly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of belly.\";         A textual example of the semantic relation is \"can have belly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "pad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pad.\";         A textual example of the semantic relation is \"can have pad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "sting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sting.\";         A textual example of the semantic relation is \"can have sting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "beak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of beak.\";         A textual example of the semantic relation is \"can have beak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "claw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of claw.\";         A textual example of the semantic relation is \"can have claw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "flag",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of flag.\";         A textual example of the semantic relation is \"can have flag\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "feeler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of feeler.\";         A textual example of the semantic relation is \"can have feeler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "nail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of nail.\";         A textual example of the semantic relation is \"can have nail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "fang",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fang.\";         A textual example of the semantic relation is \"can have fang\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "jaw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of jaw.\";         A textual example of the semantic relation is \"can have jaw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "horn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of horn.\";         A textual example of the semantic relation is \"can have horn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "wing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wing.\";         A textual example of the semantic relation is \"can have wing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "legs",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of legs.\";         A textual example of the semantic relation is \"can have legs\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "trunk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of trunk.\";         A textual example of the semantic relation is \"can have trunk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "tentacle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tentacle.\";         A textual example of the semantic relation is \"can have tentacle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "whisker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of whisker.\";         A textual example of the semantic relation is \"can have whisker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "nose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of nose.\";         A textual example of the semantic relation is \"can have nose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "egg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of egg.\";         A textual example of the semantic relation is \"can have egg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "shell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shell.\";         A textual example of the semantic relation is \"can have shell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "sac",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sac.\";         A textual example of the semantic relation is \"can have sac\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "body",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of body.\";         A textual example of the semantic relation is \"can have body\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "run",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can run\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "fly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can fly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "swim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can swim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "leap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can leap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "creep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can creep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "leap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can leap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "jump",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can jump\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "hop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can hop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "fly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can fly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "crawl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can crawl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "land",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which land can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in lands\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "garden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which garden can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in gardens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "ditch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which ditch can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in ditches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "underwater",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which underwater can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in underwaters\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Asia",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Asia can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Asias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "sea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which sea can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in seas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Africa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Africa can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Africas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Namibia",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Namibia can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Namibias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "terrarium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which terrarium can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in terrariums\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "zoo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which zoo can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in zoos\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Thailand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Thailand can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Thailands\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Kenia",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Kenia can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Kenias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Sri Lanka",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Sri Lanka can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Sri Lankas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "India",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which India can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Indias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "Tanzania",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which Tanzania can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Tanzanias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which water can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "pond",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which pond can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in ponds\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "tropic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which tropic can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in tropics\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "sanctuary",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which sanctuary can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in sanctuaries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "circus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which circus can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in circuss\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "movement",
        "value": "walk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can walk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "user",
        "value": "circus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive circus.\";         A textual example of the semantic relation is \"are used by circuss\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "colony",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which colony can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in colonies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "kennel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which kennel can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in kennels\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "spotted",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of spotted.\";         A textual example of the semantic relation is \"can be spotted\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "yellow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of yellow.\";         A textual example of the semantic relation is \"can be yellow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "yellow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of yellow.\";         A textual example of the semantic relation is \"can be yellow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "grey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of grey.\";         A textual example of the semantic relation is \"can be grey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "grey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of grey.\";         A textual example of the semantic relation is \"can be grey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of orange.\";         A textual example of the semantic relation is \"can be orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of orange.\";         A textual example of the semantic relation is \"can be orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "solid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of solid.\";         A textual example of the semantic relation is \"can be solid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "striped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of striped.\";         A textual example of the semantic relation is \"can be striped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "beige",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of beige.\";         A textual example of the semantic relation is \"can be beige\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "beige",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of beige.\";         A textual example of the semantic relation is \"can be beige\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "blue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of blue.\";         A textual example of the semantic relation is \"can be blue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "blue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of blue.\";         A textual example of the semantic relation is \"can be blue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "colorPattern",
        "value": "leopard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of leopard.\";         A textual example of the semantic relation is \"can be leopard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "breathe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that breathe can actively or consciously do.\";         A textual example of the semantic relation is \"can be breathe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "eat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that eat can actively or consciously do.\";         A textual example of the semantic relation is \"can be eat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that drink can actively or consciously do.\";         A textual example of the semantic relation is \"can be drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "bury",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that bury can actively or consciously do.\";         A textual example of the semantic relation is \"can be bury\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "play",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that play can actively or consciously do.\";         A textual example of the semantic relation is \"can be play\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "chew",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that chew can actively or consciously do.\";         A textual example of the semantic relation is \"can be chew\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "fetch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that fetch can actively or consciously do.\";         A textual example of the semantic relation is \"can be fetch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "chase",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that chase can actively or consciously do.\";         A textual example of the semantic relation is \"can be chase\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "bath",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that bath can actively or consciously do.\";         A textual example of the semantic relation is \"can be bath\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "growl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that growl can actively or consciously do.\";         A textual example of the semantic relation is \"can be growl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "live",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that live can actively or consciously do.\";         A textual example of the semantic relation is \"can be live\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "roam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that roam can actively or consciously do.\";         A textual example of the semantic relation is \"can be roam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "kill",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that kill can actively or consciously do.\";         A textual example of the semantic relation is \"can be kill\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "bite",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that bite can actively or consciously do.\";         A textual example of the semantic relation is \"can be bite\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "trot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that trot can actively or consciously do.\";         A textual example of the semantic relation is \"can be trot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "migrate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that migrate can actively or consciously do.\";         A textual example of the semantic relation is \"can be migrate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "browse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that browse can actively or consciously do.\";         A textual example of the semantic relation is \"can be browse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "graze",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that graze can actively or consciously do.\";         A textual example of the semantic relation is \"can be graze\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "forage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that forage can actively or consciously do.\";         A textual example of the semantic relation is \"can be forage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "feed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that feed can actively or consciously do.\";         A textual example of the semantic relation is \"can be feed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "bite",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that bite can actively or consciously do.\";         A textual example of the semantic relation is \"can be bite\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "suffer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that suffer can actively or consciously do.\";         A textual example of the semantic relation is \"can be suffer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "die",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that die can actively or consciously do.\";         A textual example of the semantic relation is \"can be die\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "roar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that roar can actively or consciously do.\";         A textual example of the semantic relation is \"can be roar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "hunt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that hunt can actively or consciously do.\";         A textual example of the semantic relation is \"can be hunt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "live",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that live can actively or consciously do.\";         A textual example of the semantic relation is \"can be live\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "feed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that feed can actively or consciously do.\";         A textual example of the semantic relation is \"can be feed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "bark",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that bark can actively or consciously do.\";         A textual example of the semantic relation is \"can be bark\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "trumpet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that trumpet can actively or consciously do.\";         A textual example of the semantic relation is \"can be trumpet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "pollinate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that pollinate can actively or consciously do.\";         A textual example of the semantic relation is \"can be pollinate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "bait",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that bait can actively or consciously do.\";         A textual example of the semantic relation is \"can be bait\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "forage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that forage can actively or consciously do.\";         A textual example of the semantic relation is \"can be forage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "sleep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that sleep can actively or consciously do.\";         A textual example of the semantic relation is \"can be sleep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "overwinter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that overwinter can actively or consciously do.\";         A textual example of the semantic relation is \"can be overwinter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "lick",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that lick can actively or consciously do.\";         A textual example of the semantic relation is \"can be lick\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "fuck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that fuck can actively or consciously do.\";         A textual example of the semantic relation is \"can be fuck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "kill",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that kill can actively or consciously do.\";         A textual example of the semantic relation is \"can be kill\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "sting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that sting can actively or consciously do.\";         A textual example of the semantic relation is \"can be sting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "sing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that sing can actively or consciously do.\";         A textual example of the semantic relation is \"can be sing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "watch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that watch can actively or consciously do.\";         A textual example of the semantic relation is \"can be watch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "croak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that croak can actively or consciously do.\";         A textual example of the semantic relation is \"can be croak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "love",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that love can actively or consciously do.\";         A textual example of the semantic relation is \"can be love\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "watch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that watch can actively or consciously do.\";         A textual example of the semantic relation is \"can be watch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "funnel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that funnel can actively or consciously do.\";         A textual example of the semantic relation is \"can be funnel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "slither",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that slither can actively or consciously do.\";         A textual example of the semantic relation is \"can be slither\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "part",
        "value": "collar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the constitutive parts of collar.\";         A textual example of the semantic relation is \"can have collar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mammal related to hypernyms.\";         A textual example of the semantic relation is \"are mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "eutherian mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of eutherian mammal related to hypernyms.\";         A textual example of the semantic relation is \"are eutherian mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "placental",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of placental related to hypernyms.\";         A textual example of the semantic relation is \"are placental\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "placental mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of placental mammal related to hypernyms.\";         A textual example of the semantic relation is \"are placental mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "eutherian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of eutherian related to hypernyms.\";         A textual example of the semantic relation is \"are eutherian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "carnivore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carnivore related to hypernyms.\";         A textual example of the semantic relation is \"are carnivore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "gastropod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gastropod related to hypernyms.\";         A textual example of the semantic relation is \"are gastropod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of insect related to hypernyms.\";         A textual example of the semantic relation is \"are insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "vertebrate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of vertebrate related to hypernyms.\";         A textual example of the semantic relation is \"are vertebrate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "craniate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of craniate related to hypernyms.\";         A textual example of the semantic relation is \"are craniate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "reptilian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of reptilian related to hypernyms.\";         A textual example of the semantic relation is \"are reptilian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "reptile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of reptile related to hypernyms.\";         A textual example of the semantic relation is \"are reptile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "canid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of canid related to hypernyms.\";         A textual example of the semantic relation is \"are canid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "oviparous",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of oviparous related to hypernyms.\";         A textual example of the semantic relation is \"are oviparous\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "organism",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of organism related to hypernyms.\";         A textual example of the semantic relation is \"are organism\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "amphibian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of amphibian related to hypernyms.\";         A textual example of the semantic relation is \"are amphibian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "feline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of feline related to hypernyms.\";         A textual example of the semantic relation is \"are feline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "felid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of felid related to hypernyms.\";         A textual example of the semantic relation is \"are felid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "canine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of canine related to hypernyms.\";         A textual example of the semantic relation is \"are canine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "being",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of being related to hypernyms.\";         A textual example of the semantic relation is \"are being\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "diapsid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of diapsid related to hypernyms.\";         A textual example of the semantic relation is \"are diapsid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "cat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cat related to hypernyms.\";         A textual example of the semantic relation is \"are cat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "diapsid reptile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of diapsid reptile related to hypernyms.\";         A textual example of the semantic relation is \"are diapsid reptile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "animate thing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of animate thing related to hypernyms.\";         A textual example of the semantic relation is \"are animate thing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "big cat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of big cat related to hypernyms.\";         A textual example of the semantic relation is \"are big cat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "living thing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of living thing related to hypernyms.\";         A textual example of the semantic relation is \"are living thing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "primate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of primate related to hypernyms.\";         A textual example of the semantic relation is \"are primate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "ruminant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ruminant related to hypernyms.\";         A textual example of the semantic relation is \"are ruminant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "anapsid reptile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of anapsid reptile related to hypernyms.\";         A textual example of the semantic relation is \"are anapsid reptile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "mytilid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mytilid related to hypernyms.\";         A textual example of the semantic relation is \"are mytilid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "even-toed ungulate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of even-toed ungulate related to hypernyms.\";         A textual example of the semantic relation is \"are even-toed ungulate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "leporid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leporid related to hypernyms.\";         A textual example of the semantic relation is \"are leporid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "leporid mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leporid mammal related to hypernyms.\";         A textual example of the semantic relation is \"are leporid mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "lagomorph",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lagomorph related to hypernyms.\";         A textual example of the semantic relation is \"are lagomorph\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of unit related to hypernyms.\";         A textual example of the semantic relation is \"are unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "marine mussel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of marine mussel related to hypernyms.\";         A textual example of the semantic relation is \"are marine mussel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "arachnoid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of arachnoid related to hypernyms.\";         A textual example of the semantic relation is \"are arachnoid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "proboscidean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of proboscidean related to hypernyms.\";         A textual example of the semantic relation is \"are proboscidean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "chelonian reptile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of chelonian reptile related to hypernyms.\";         A textual example of the semantic relation is \"are chelonian reptile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "arachnid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of arachnid related to hypernyms.\";         A textual example of the semantic relation is \"are arachnid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "hoofed mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hoofed mammal related to hypernyms.\";         A textual example of the semantic relation is \"are hoofed mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "artiodactyl mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of artiodactyl mammal related to hypernyms.\";         A textual example of the semantic relation is \"are artiodactyl mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "lamellibranch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lamellibranch related to hypernyms.\";         A textual example of the semantic relation is \"are lamellibranch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "herbivorous",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of herbivorous related to hypernyms.\";         A textual example of the semantic relation is \"are herbivorous\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "pelecypod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pelecypod related to hypernyms.\";         A textual example of the semantic relation is \"are pelecypod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "hermaphrodite",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hermaphrodite related to hypernyms.\";         A textual example of the semantic relation is \"are hermaphrodite\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "saurian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of saurian related to hypernyms.\";         A textual example of the semantic relation is \"are saurian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "artiodactyl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of artiodactyl related to hypernyms.\";         A textual example of the semantic relation is \"are artiodactyl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "bivalve",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bivalve related to hypernyms.\";         A textual example of the semantic relation is \"are bivalve\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "chelonian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of chelonian related to hypernyms.\";         A textual example of the semantic relation is \"are chelonian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "proboscidian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of proboscidian related to hypernyms.\";         A textual example of the semantic relation is \"are proboscidian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "whole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of whole related to hypernyms.\";         A textual example of the semantic relation is \"are whole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "pachyderm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pachyderm related to hypernyms.\";         A textual example of the semantic relation is \"are pachyderm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of crustacean related to hypernyms.\";         A textual example of the semantic relation is \"are crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "ungulate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ungulate related to hypernyms.\";         A textual example of the semantic relation is \"are ungulate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "mussel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mussel related to hypernyms.\";         A textual example of the semantic relation is \"are mussel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "gnawing mammal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gnawing mammal related to hypernyms.\";         A textual example of the semantic relation is \"are gnawing mammal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "anapsid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of anapsid related to hypernyms.\";         A textual example of the semantic relation is \"are anapsid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of animal related to hypernyms.\";         A textual example of the semantic relation is \"are animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "arthropod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of arthropod related to hypernyms.\";         A textual example of the semantic relation is \"are arthropod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "invertebrate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of invertebrate related to hypernyms.\";         A textual example of the semantic relation is \"are invertebrate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "nest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that nest can actively or consciously do.\";         A textual example of the semantic relation is \"can be nest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "hymenopter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopter related to hypernyms.\";         A textual example of the semantic relation is \"are hymenopter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "hymenopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopterous insect related to hypernyms.\";         A textual example of the semantic relation is \"are hymenopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "chordate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of chordate related to hypernyms.\";         A textual example of the semantic relation is \"are chordate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "hymenopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopteron related to hypernyms.\";         A textual example of the semantic relation is \"are hymenopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "hymenopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopteran related to hypernyms.\";         A textual example of the semantic relation is \"are hymenopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "larva",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which larva can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in larvas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "place",
        "value": "hive",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All the entities in which hive can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in hives\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "mollusk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mollusk related to hypernyms.\";         A textual example of the semantic relation is \"are mollusk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "herbivore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of herbivore related to hypernyms.\";         A textual example of the semantic relation is \"are herbivore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "walk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that walk can actively or consciously do.\";         A textual example of the semantic relation is \"can be walk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "crawl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that crawl can actively or consciously do.\";         A textual example of the semantic relation is \"can be crawl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "run",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that run can actively or consciously do.\";         A textual example of the semantic relation is \"can be run\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "fly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that fly can actively or consciously do.\";         A textual example of the semantic relation is \"can be fly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "yelp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that yelp can actively or consciously do.\";         A textual example of the semantic relation is \"can be yelp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "swim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that swim can actively or consciously do.\";         A textual example of the semantic relation is \"can be swim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "leap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that leap can actively or consciously do.\";         A textual example of the semantic relation is \"can be leap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "creep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that creep can actively or consciously do.\";         A textual example of the semantic relation is \"can be creep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "leap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that leap can actively or consciously do.\";         A textual example of the semantic relation is \"can be leap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "fly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that fly can actively or consciously do.\";         A textual example of the semantic relation is \"can be fly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "jump",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that jump can actively or consciously do.\";         A textual example of the semantic relation is \"can be jump\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "hop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that hop can actively or consciously do.\";         A textual example of the semantic relation is \"can be hop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "activity",
        "value": "howl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All actions that howl can actively or consciously do.\";         A textual example of the semantic relation is \"can be howl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "lepidopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lepidopteron related to hypernyms.\";         A textual example of the semantic relation is \"are lepidopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "domestic animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of domestic animal related to hypernyms.\";         A textual example of the semantic relation is \"are domestic animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "ectotherm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ectotherm related to hypernyms.\";         A textual example of the semantic relation is \"are ectotherm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "lepidopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lepidopterous insect related to hypernyms.\";         A textual example of the semantic relation is \"are lepidopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "lepidopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lepidopteran related to hypernyms.\";         A textual example of the semantic relation is \"are lepidopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "decapod crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of decapod crustacean related to hypernyms.\";         A textual example of the semantic relation is \"are decapod crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "domesticated animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of domesticated animal related to hypernyms.\";         A textual example of the semantic relation is \"are domesticated animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "generalization",
        "value": "decapod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of decapod related to hypernyms.\";         A textual example of the semantic relation is \"are decapod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "worker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of worker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are worker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "queen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of queen in terms of their hyponyms.\";         A textual example of the semantic relation is \"are queen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "drone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of drone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are drone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Labrador",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Labrador in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Labrador\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Beagle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Beagle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Beagle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Bulldog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Bulldog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Bulldog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Golden Retriever",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Golden Retriever in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Golden Retriever\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "red fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of red fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are red fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Rottweiler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Rottweiler in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Rottweiler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bug in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "kit fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of kit fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kit fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "German Shepherd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of German Shepherd in terms of their hyponyms.\";         A textual example of the semantic relation is \"are German Shepherd\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Boxer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Boxer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Boxer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "louse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of louse in terms of their hyponyms.\";         A textual example of the semantic relation is \"are louse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Poodle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Poodle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Poodle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Yorkshire Terrier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Yorkshire Terrier in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Yorkshire Terrier\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "branchiopod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of branchiopod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are branchiopod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stonefly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stonefly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stonefly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pierid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pierid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pierid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pleurodont",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pleurodont in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pleurodont\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stomatopod crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stomatopod crustacean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stomatopod crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stone crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stone crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stone crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "doggy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of doggy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are doggy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sea creature",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sea creature in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sea creature\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dickey-bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dickey-bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dickey-bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stomatopod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stomatopod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stomatopod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Symbion pandora",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Symbion pandora in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Symbion pandora\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "adult",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of adult in terms of their hyponyms.\";         A textual example of the semantic relation is \"are adult\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "nonpasserine bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of nonpasserine bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nonpasserine bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "basenji",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of basenji in terms of their hyponyms.\";         A textual example of the semantic relation is \"are basenji\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "social insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of social insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are social insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "raptor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of raptor in terms of their hyponyms.\";         A textual example of the semantic relation is \"are raptor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "prairie wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of prairie wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prairie wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ladybird beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ladybird beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ladybird beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "zooplankton",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of zooplankton in terms of their hyponyms.\";         A textual example of the semantic relation is \"are zooplankton\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "copepod crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of copepod crustacean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are copepod crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "aquatic bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of aquatic bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are aquatic bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "insectivore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of insectivore in terms of their hyponyms.\";         A textual example of the semantic relation is \"are insectivore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pea crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pea crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pea crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "gray wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gray wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gray wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carpet beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carpet beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carpet beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Monomorium pharaonis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Monomorium pharaonis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Monomorium pharaonis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mecopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mecopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mecopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "soft-shell crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of soft-shell crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soft-shell crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bunny rabbit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bunny rabbit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bunny rabbit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "gallfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gallfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gallfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Apis mellifera",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Apis mellifera in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Apis mellifera\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carriage dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carriage dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carriage dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pug-dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pug-dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pug-dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "molter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of molter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are molter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "young",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of young in terms of their hyponyms.\";         A textual example of the semantic relation is \"are young\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cuckoo-bumblebee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cuckoo-bumblebee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cuckoo-bumblebee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "puppy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of puppy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are puppy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ephemeropteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ephemeropteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ephemeropteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "wood ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of wood ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wood ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "parazoan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of parazoan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are parazoan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "clerid beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of clerid beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are clerid beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leaf-cutter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leaf-cutter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leaf-cutter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "domestic cat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of domestic cat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are domestic cat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "timber wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of timber wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are timber wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "offspring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of offspring in terms of their hyponyms.\";         A textual example of the semantic relation is \"are offspring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "odonate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of odonate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are odonate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Jonah crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Jonah crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Jonah crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "purebred",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of purebred in terms of their hyponyms.\";         A textual example of the semantic relation is \"are purebred\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Alopex lagopus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Alopex lagopus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Alopex lagopus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "rove beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of rove beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rove beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dicky-bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dicky-bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dicky-bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Helix pomatia",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Helix pomatia in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Helix pomatia\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "long-horned beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of long-horned beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are long-horned beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "maned wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of maned wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are maned wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "game",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of game in terms of their hyponyms.\";         A textual example of the semantic relation is \"are game\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "neuropterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of neuropterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are neuropterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "clerid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of clerid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are clerid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "little black ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of little black ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are little black ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "rock crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of rock crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rock crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "brachiopod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of brachiopod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brachiopod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Alaska crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Alaska crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Alaska crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bow-wow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bow-wow in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bow-wow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "potter bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of potter bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are potter bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "four-footed butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of four-footed butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are four-footed butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mongrel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mongrel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mongrel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Nomia melanderi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Nomia melanderi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Nomia melanderi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "peanut worm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of peanut worm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are peanut worm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "moulter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of moulter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are moulter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "rotifer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of rotifer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rotifer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "earwig",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of earwig in terms of their hyponyms.\";         A textual example of the semantic relation is \"are earwig\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Felis domesticus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Felis domesticus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Felis domesticus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sucking louse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sucking louse in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sucking louse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "wolf cub",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of wolf cub in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wolf cub\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Fenusa pusilla",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Fenusa pusilla in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Fenusa pusilla\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "humblebee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of humblebee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are humblebee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "archaeopteryx",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of archaeopteryx in terms of their hyponyms.\";         A textual example of the semantic relation is \"are archaeopteryx\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Menippe mercenaria",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Menippe mercenaria in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Menippe mercenaria\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stunt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stunt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stunt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "imago",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of imago in terms of their hyponyms.\";         A textual example of the semantic relation is \"are imago\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sponge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sponge in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sponge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "longicorn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of longicorn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are longicorn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mining bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mining bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mining bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ringlet butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ringlet butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ringlet butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "omnivore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of omnivore in terms of their hyponyms.\";         A textual example of the semantic relation is \"are omnivore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "protoavis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of protoavis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are protoavis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Vulpes vulpes",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Vulpes vulpes in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Vulpes vulpes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "birch leaf miner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of birch leaf miner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are birch leaf miner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "darter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of darter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are darter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carinate bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carinate bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carinate bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "coraciiform bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of coraciiform bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coraciiform bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carpenter bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carpenter bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carpenter bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ctenophore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ctenophore in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ctenophore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "telsontail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of telsontail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are telsontail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Leonberg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Leonberg in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Leonberg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "thysanopter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of thysanopter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are thysanopter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "alkali bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of alkali bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are alkali bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "captive",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of captive in terms of their hyponyms.\";         A textual example of the semantic relation is \"are captive\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Great Pyrenees",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Great Pyrenees in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Great Pyrenees\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hemipterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hemipterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hemipterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pug in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hard-shell crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hard-shell crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hard-shell crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cock in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cottontail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cottontail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cottontail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "thysanopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of thysanopteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are thysanopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "trichopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of trichopteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trichopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "flying bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of flying bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flying bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pollinator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pollinator in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pollinator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sulfur butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sulfur butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sulfur butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Arctic fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Arctic fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Arctic fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Vulpes macrotis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Vulpes macrotis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Vulpes macrotis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pupa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pupa in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pupa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "slave-maker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of slave-maker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slave-maker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "andrena",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of andrena in terms of their hyponyms.\";         A textual example of the semantic relation is \"are andrena\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leaf-cutting bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leaf-cutting bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leaf-cutting bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "orthopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of orthopteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are orthopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Welsh corgi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Welsh corgi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Welsh corgi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "poikilotherm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of poikilotherm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are poikilotherm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lampshell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lampshell in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lampshell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "meloid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of meloid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are meloid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carabid beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carabid beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carabid beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "proturan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of proturan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are proturan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Archaeopteryx lithographica",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Archaeopteryx lithographica in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Archaeopteryx lithographica\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "polyzoan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of polyzoan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are polyzoan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "woodborer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of woodborer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are woodborer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "work animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of work animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are work animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "weevil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of weevil in terms of their hyponyms.\";         A textual example of the semantic relation is \"are weevil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "thysanuran insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of thysanuran insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are thysanuran insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sea animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sea animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sea animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Sinornis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Sinornis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Sinornis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lapdog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lapdog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lapdog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "borer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of borer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are borer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "scavenger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of scavenger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are scavenger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Anoplophora glabripennis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Anoplophora glabripennis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Anoplophora glabripennis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "flightless bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of flightless bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flightless bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "holometabola",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of holometabola in terms of their hyponyms.\";         A textual example of the semantic relation is \"are holometabola\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Cancer borealis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Cancer borealis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cancer borealis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ladybeetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ladybeetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ladybeetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "blister beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of blister beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blister beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "doggie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of doggie in terms of their hyponyms.\";         A textual example of the semantic relation is \"are doggie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "echinoderm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of echinoderm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are echinoderm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Newfoundland",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Newfoundland in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Newfoundland\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "barker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of barker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "metabola",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of metabola in terms of their hyponyms.\";         A textual example of the semantic relation is \"are metabola\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "driver ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of driver ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are driver ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "racer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of racer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are racer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "chrysomelid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of chrysomelid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chrysomelid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "fiddler crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of fiddler crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fiddler crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leporide",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leporide in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leporide\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "longicorn beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of longicorn beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are longicorn beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Ibero-mesornis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Ibero-mesornis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Ibero-mesornis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bulldog ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bulldog ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bulldog ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "gallinacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gallinacean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gallinacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "griffon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of griffon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are griffon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "female",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of female in terms of their hyponyms.\";         A textual example of the semantic relation is \"are female\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "defoliator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of defoliator in terms of their hyponyms.\";         A textual example of the semantic relation is \"are defoliator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "house cat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of house cat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are house cat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "predatory animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of predatory animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are predatory animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sulphur butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sulphur butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sulphur butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Monomorium minimum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Monomorium minimum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Monomorium minimum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "apodiform bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of apodiform bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are apodiform bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ground beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ground beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ground beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "homoiotherm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of homoiotherm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are homoiotherm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "range animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of range animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are range animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Brussels griffon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Brussels griffon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Brussels griffon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "garden snail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of garden snail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are garden snail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hemipteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hemipteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hemipteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "elaterid beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of elaterid beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are elaterid beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dictyopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dictyopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dictyopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "twitterer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of twitterer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are twitterer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ladybird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ladybird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ladybird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "tiger beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of tiger beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tiger beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "flea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of flea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "neuropteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of neuropteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are neuropteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "phasmid insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of phasmid insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are phasmid insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ectoproct",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ectoproct in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ectoproct\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ephemeron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ephemeron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ephemeron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Felis catus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Felis catus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Felis catus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "white fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of white fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dickybird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dickybird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dickybird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "archaeornis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of archaeornis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are archaeornis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "spitz",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of spitz in terms of their hyponyms.\";         A textual example of the semantic relation is \"are spitz\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "rabbit ears",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of rabbit ears in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rabbit ears\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "thoroughbred",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of thoroughbred in terms of their hyponyms.\";         A textual example of the semantic relation is \"are thoroughbred\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "wildcat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of wildcat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wildcat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Dungeness crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Dungeness crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Dungeness crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "trogon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of trogon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trogon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Angora rabbit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Angora rabbit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Angora rabbit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "gray fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gray fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gray fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "trichopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of trichopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trichopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "conceptus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of conceptus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are conceptus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ephemerid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ephemerid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ephemerid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "swimming crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of swimming crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are swimming crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leaf miner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leaf miner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leaf miner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ratite bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ratite bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ratite bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lycaenid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lycaenid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lycaenid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "web spinner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of web spinner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are web spinner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Arctic wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Arctic wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Arctic wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carpet bug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carpet bug in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carpet bug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "plecopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of plecopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are plecopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dipteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dipteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dipteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "coyote",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of coyote in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coyote\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "embryo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of embryo in terms of their hyponyms.\";         A textual example of the semantic relation is \"are embryo\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bird of prey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bird of prey in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bird of prey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "varmint",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of varmint in terms of their hyponyms.\";         A textual example of the semantic relation is \"are varmint\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lamellicorn beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lamellicorn beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lamellicorn beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "homopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of homopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are homopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bryozoan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bryozoan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bryozoan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "soft-shelled crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of soft-shelled crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soft-shelled crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hexapod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hexapod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hexapod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Urocyon cinereoargenteus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Urocyon cinereoargenteus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Urocyon cinereoargenteus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lamp shell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lamp shell in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lamp shell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mussel shrimp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mussel shrimp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mussel shrimp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Cancer irroratus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Cancer irroratus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cancer irroratus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Belgian griffon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Belgian griffon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Belgian griffon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mutt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mutt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mutt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "creepy-crawly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of creepy-crawly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are creepy-crawly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "archeopteryx",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of archeopteryx in terms of their hyponyms.\";         A textual example of the semantic relation is \"are archeopteryx\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "feeder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of feeder in terms of their hyponyms.\";         A textual example of the semantic relation is \"are feeder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "neuropteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of neuropteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are neuropteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "malacostracan crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of malacostracan crustacean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are malacostracan crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "spider crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of spider crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are spider crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "elater",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of elater in terms of their hyponyms.\";         A textual example of the semantic relation is \"are elater\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pierid butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pierid butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pierid butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stone fly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stone fly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stone fly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "metazoan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of metazoan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are metazoan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "critter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of critter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are critter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "marine creature",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of marine creature in terms of their hyponyms.\";         A textual example of the semantic relation is \"are marine creature\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "predator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of predator in terms of their hyponyms.\";         A textual example of the semantic relation is \"are predator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "termite",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of termite in terms of their hyponyms.\";         A textual example of the semantic relation is \"are termite\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "nester",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of nester in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nester\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "andrenid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of andrenid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are andrenid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leaf-cutter bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leaf-cutter bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leaf-cutter bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Xestobium rufovillosum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Xestobium rufovillosum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Xestobium rufovillosum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "migrator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of migrator in terms of their hyponyms.\";         A textual example of the semantic relation is \"are migrator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "toy dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of toy dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are toy dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "working dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of working dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are working dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mason bee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mason bee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mason bee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "seed shrimp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of seed shrimp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are seed shrimp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "passeriform bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of passeriform bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are passeriform bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "European rabbit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of European rabbit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are European rabbit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hunting dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hunting dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hunting dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "orthopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of orthopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are orthopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bumblebee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bumblebee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bumblebee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "corgi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of corgi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are corgi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Alaskan king crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Alaskan king crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Alaskan king crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "peeper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of peeper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are peeper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "two-winged insects",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of two-winged insects in terms of their hyponyms.\";         A textual example of the semantic relation is \"are two-winged insects\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "fictional animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of fictional animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fictional animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "honeybee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of honeybee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are honeybee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "phoronid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of phoronid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are phoronid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Canis lupus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Canis lupus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Canis lupus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "entoproct",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of entoproct in terms of their hyponyms.\";         A textual example of the semantic relation is \"are entoproct\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "biting louse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of biting louse in terms of their hyponyms.\";         A textual example of the semantic relation is \"are biting louse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "brush wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of brush wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brush wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "biped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of biped in terms of their hyponyms.\";         A textual example of the semantic relation is \"are biped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carinate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carinate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carinate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "slave ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of slave ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slave ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "worm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of worm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are worm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mollusc",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mollusc in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mollusc\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hemipteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hemipteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hemipteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "passerine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of passerine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are passerine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "scorpion shell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of scorpion shell in terms of their hyponyms.\";         A textual example of the semantic relation is \"are scorpion shell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "wolf pup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of wolf pup in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wolf pup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Alaska king crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Alaska king crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Alaska king crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "phasmid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of phasmid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are phasmid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lightning bug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lightning bug in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lightning bug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Paralithodes camtschatica",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Paralithodes camtschatica in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Paralithodes camtschatica\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "branchiopodan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of branchiopodan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are branchiopodan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "legionary ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of legionary ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are legionary ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ratite",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ratite in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ratite\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "brush-footed butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of brush-footed butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brush-footed butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "wood rabbit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of wood rabbit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wood rabbit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "zoophyte",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of zoophyte in terms of their hyponyms.\";         A textual example of the semantic relation is \"are zoophyte\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ladybug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ladybug in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ladybug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "army ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of army ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are army ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Newfoundland dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Newfoundland dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Newfoundland dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Angora",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Angora in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Angora\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hen in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dipterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dipterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dipterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "stayer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of stayer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stayer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leaf-miner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leaf-miner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leaf-miner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cottontail rabbit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cottontail rabbit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cottontail rabbit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lapin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lapin in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lapin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "deathwatch beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of deathwatch beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are deathwatch beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "carpenter ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of carpenter ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carpenter ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "deathwatch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of deathwatch in terms of their hyponyms.\";         A textual example of the semantic relation is \"are deathwatch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cnidarian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cnidarian in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cnidarian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "elaterid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of elaterid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are elaterid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "nymphalid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of nymphalid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nymphalid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "leaf beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of leaf beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leaf beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "marine animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of marine animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are marine animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Vulpes fulva",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Vulpes fulva in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Vulpes fulva\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lady beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lady beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lady beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dalmatian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dalmatian in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dalmatian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "homopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of homopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are homopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "grey wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of grey wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grey wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Belgian hare",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Belgian hare in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Belgian hare\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Canis niger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Canis niger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Canis niger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "brachyuran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of brachyuran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brachyuran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "danaid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of danaid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are danaid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "nymphalid butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of nymphalid butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nymphalid butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "shellfish",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of shellfish in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shellfish\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Mexican hairless",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Mexican hairless in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Mexican hairless\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pooch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pooch in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pooch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "quarry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of quarry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are quarry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Formica rufa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Formica rufa in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Formica rufa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "moss animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of moss animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are moss animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pharaoh's ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pharaoh's ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pharaoh's ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "red wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of red wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are red wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "grey fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of grey fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grey fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "white wolf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of white wolf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white wolf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "prairie fox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of prairie fox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prairie fox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "fertilized egg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of fertilized egg in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fertilized egg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cirripede",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cirripede in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cirripede\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "acrodont",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of acrodont in terms of their hyponyms.\";         A textual example of the semantic relation is \"are acrodont\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pharaoh ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pharaoh ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pharaoh ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "branchiopod crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of branchiopod crustacean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are branchiopod crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pureblood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pureblood in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pureblood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "trichopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of trichopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trichopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "caprimulgiform bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of caprimulgiform bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are caprimulgiform bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sipunculid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sipunculid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sipunculid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "parrot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of parrot in terms of their hyponyms.\";         A textual example of the semantic relation is \"are parrot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Old World rabbit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Old World rabbit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Old World rabbit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ephemeral",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ephemeral in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ephemeral\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "varment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of varment in terms of their hyponyms.\";         A textual example of the semantic relation is \"are varment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "water beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of water beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are water beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Asian longhorned beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Asian longhorned beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Asian longhorned beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "fire ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of fire ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fire ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bunny",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bunny in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bunny\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "collembolan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of collembolan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are collembolan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dickeybird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dickeybird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dickeybird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bird of passage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bird of passage in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bird of passage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sea mat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sea mat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sea mat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "barnacle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of barnacle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barnacle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "orthopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of orthopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are orthopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "homeotherm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of homeotherm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are homeotherm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "survivor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of survivor in terms of their hyponyms.\";         A textual example of the semantic relation is \"are survivor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "psocopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of psocopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are psocopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Canis lupus tundrarum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Canis lupus tundrarum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Canis lupus tundrarum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "slave-making ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of slave-making ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slave-making ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ringlet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ringlet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ringlet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "sea moss",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of sea moss in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sea moss\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mutant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mutant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mutant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Oryctolagus cuniculus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Oryctolagus cuniculus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Oryctolagus cuniculus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "piciform bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of piciform bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are piciform bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pest in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "gallinaceous bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of gallinaceous bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gallinaceous bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "homotherm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of homotherm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are homotherm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "vixen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of vixen in terms of their hyponyms.\";         A textual example of the semantic relation is \"are vixen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "thysanuron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of thysanuron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are thysanuron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lycaenid butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lycaenid butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lycaenid butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cuculiform bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cuculiform bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cuculiform bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "comb jelly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of comb jelly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are comb jelly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "copepod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of copepod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are copepod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "heteropterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of heteropterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are heteropterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "white ant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of white ant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white ant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "king crab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of king crab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are king crab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cur",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cur in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cur\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Canis rufus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Canis rufus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Canis rufus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bird louse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bird louse in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bird louse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "toy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of toy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are toy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "whirligig beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of whirligig beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are whirligig beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "thysanopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of thysanopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are thysanopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "raptorial bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of raptorial bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are raptorial bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "cirriped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of cirriped in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cirriped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "edible snail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of edible snail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are edible snail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "danaid butterfly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of danaid butterfly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are danaid butterfly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Reynard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Reynard in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Reynard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "bark beetle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of bark beetle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bark beetle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "night bird",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of night bird in terms of their hyponyms.\";         A textual example of the semantic relation is \"are night bird\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Vulpes velox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Vulpes velox in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Vulpes velox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "poriferan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of poriferan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are poriferan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "coelenterate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of coelenterate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coelenterate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "coach dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of coach dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coach dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "firefly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of firefly in terms of their hyponyms.\";         A textual example of the semantic relation is \"are firefly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "giant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of giant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are giant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Canis latrans",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Canis latrans in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Canis latrans\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "Cancer magister",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of Cancer magister in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cancer magister\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ostracod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ostracod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ostracod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "springtail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of springtail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are springtail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "male",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of male in terms of their hyponyms.\";         A textual example of the semantic relation is \"are male\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "dipteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of dipteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dipteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lepidopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lepidopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lepidopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "domestic animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of domestic animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are domestic animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "prey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of prey in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lepidopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lepidopteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lepidopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "decapod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of decapod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are decapod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "ectotherm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of ectotherm in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ectotherm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "domesticated animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of domesticated animal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are domesticated animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "lepidopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of lepidopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lepidopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "decapod crustacean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of decapod crustacean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are decapod crustacean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "purpose",
        "value": "animal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"All of the purposes for which animal is interacted with.\";         A textual example of the semantic relation is \"are used for animal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "herbivore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of herbivore in terms of their hyponyms.\";         A textual example of the semantic relation is \"are herbivore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "mollusk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of mollusk in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mollusk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "larva",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of larva in terms of their hyponyms.\";         A textual example of the semantic relation is \"are larva\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hymenopteron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopteron in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hymenopteron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "chordate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of chordate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chordate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hymenopteran",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopteran in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hymenopteran\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hymenopterous insect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopterous insect in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hymenopterous insect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "hymenopter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of hymenopter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hymenopter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "pet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of pet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "invertebrate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of invertebrate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are invertebrate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "animals",
        "slot": "specialization",
        "value": "arthropod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"animals\";         The returned words must satisfy the semantic relation \"Classification of arthropod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are arthropod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "purpose",
        "value": "vision",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All of the purposes for which vision is interacted with.\";         A textual example of the semantic relation is \"are used for vision\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "size",
        "value": "small",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Size of small.\";         A textual example of the semantic relation is \"can be small\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "rye",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which rye is composed.\";         A textual example of the semantic relation is \"can be made of rye\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "yeast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which yeast is composed.\";         A textual example of the semantic relation is \"can be made of yeast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "tasting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which tasting is composed.\";         A textual example of the semantic relation is \"can be made of tasting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "unleavened",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which unleavened is composed.\";         A textual example of the semantic relation is \"can be made of unleavened\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "sourdough",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which sourdough is composed.\";         A textual example of the semantic relation is \"can be made of sourdough\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "salt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which salt is composed.\";         A textual example of the semantic relation is \"can be made of salt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "time",
        "value": "autumn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries which link autumn with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during autumn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "time",
        "value": "lunch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries which link lunch with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during lunch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "time",
        "value": "dinner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries which link dinner with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during dinner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "time",
        "value": "summer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries which link summer with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during summer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "time",
        "value": "April",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries which link April with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during April\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "time",
        "value": "meal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries which link meal with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during meal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which water is composed.\";         A textual example of the semantic relation is \"can be made of water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "acid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be acid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "cold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be cold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "dessert",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be dessert\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "sugary",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be sugary\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "sparkling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be sparkling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "iced",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be iced\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "herbal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be herbal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "soft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be soft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "fizzy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be fizzy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "milk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which milk is composed.\";         A textual example of the semantic relation is \"can be made of milk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "fruity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of fruity can be described.\";         A textual example of the semantic relation is \"can smell fruity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "cheap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of cheap can be described.\";         A textual example of the semantic relation is \"can smell cheap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "spicy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of spicy can be described.\";         A textual example of the semantic relation is \"can smell spicy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "floral",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of floral can be described.\";         A textual example of the semantic relation is \"can smell floral\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "bitter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of bitter can be described.\";         A textual example of the semantic relation is \"can smell bitter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "balsamic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of balsamic can be described.\";         A textual example of the semantic relation is \"can smell balsamic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "acidic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of acidic can be described.\";         A textual example of the semantic relation is \"can smell acidic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "tasty",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of tasty can be described.\";         A textual example of the semantic relation is \"can smell tasty\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "aromatic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of aromatic can be described.\";         A textual example of the semantic relation is \"can smell aromatic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "organic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of organic can be described.\";         A textual example of the semantic relation is \"can smell organic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "elegant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of elegant can be described.\";         A textual example of the semantic relation is \"can smell elegant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "fresh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of fresh can be described.\";         A textual example of the semantic relation is \"can smell fresh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "varietal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of varietal can be described.\";         A textual example of the semantic relation is \"can smell varietal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which wheat is composed.\";         A textual example of the semantic relation is \"can be made of wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "liquid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of liquid can be described.\";         A textual example of the semantic relation is \"can be liquid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "firm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of firm can be described.\";         A textual example of the semantic relation is \"can be firm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "crispy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of crispy can be described.\";         A textual example of the semantic relation is \"can be crispy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "tart",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of tart can be described.\";         A textual example of the semantic relation is \"can be tart\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "rich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of rich can be described.\";         A textual example of the semantic relation is \"can be rich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "sour",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of sour can be described.\";         A textual example of the semantic relation is \"can be sour\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "spongy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of spongy can be described.\";         A textual example of the semantic relation is \"can be spongy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "edible",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of edible can be described.\";         A textual example of the semantic relation is \"can be edible\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "ripe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of ripe can be described.\";         A textual example of the semantic relation is \"can be ripe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "sparkling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of sparkling can be described.\";         A textual example of the semantic relation is \"can be sparkling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "crisp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of crisp can be described.\";         A textual example of the semantic relation is \"can be crisp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "juicy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of juicy can be described.\";         A textual example of the semantic relation is \"can be juicy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "crunchy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of crunchy can be described.\";         A textual example of the semantic relation is \"can be crunchy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "juicy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of juicy can be described.\";         A textual example of the semantic relation is \"can be juicy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "thin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of thin.\";         A textual example of the semantic relation is \"can be thin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "conical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of conical.\";         A textual example of the semantic relation is \"can be conical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "oval",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of oval.\";         A textual example of the semantic relation is \"can be oval\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "oval",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of oval.\";         A textual example of the semantic relation is \"can be oval\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "shape",
        "value": "pointed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Form of pointed.\";         A textual example of the semantic relation is \"can be pointed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "grape",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which grape is composed.\";         A textual example of the semantic relation is \"can be made of grape\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "farmer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive farmer.\";         A textual example of the semantic relation is \"are used by farmers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "cook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cook.\";         A textual example of the semantic relation is \"are used by cooks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "adult",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive adult.\";         A textual example of the semantic relation is \"are used by adults\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "wine grower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive wine grower.\";         A textual example of the semantic relation is \"are used by wine growers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "somellier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive somellier.\";         A textual example of the semantic relation is \"are used by somelliers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "barrel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with barrel. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for barrel.\";         A textual example of the semantic relation is \"are related with barrel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "cup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with cup. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for cup.\";         A textual example of the semantic relation is \"are related with cup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "meat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with meat. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for meat.\";         A textual example of the semantic relation is \"are related with meat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "barbecue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with barbecue. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for barbecue.\";         A textual example of the semantic relation is \"are related with barbecue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "sausage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with sausage. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for sausage.\";         A textual example of the semantic relation is \"are related with sausage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "oven",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with oven. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for oven.\";         A textual example of the semantic relation is \"are related with oven\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "marmalade",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with marmalade. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for marmalade.\";         A textual example of the semantic relation is \"are related with marmalade\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with cheese. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for cheese.\";         A textual example of the semantic relation is \"are related with cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "macaroni",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with macaroni. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for macaroni.\";         A textual example of the semantic relation is \"are related with macaroni\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "bean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with bean. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for bean.\";         A textual example of the semantic relation is \"are related with bean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "pizza",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with pizza. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for pizza.\";         A textual example of the semantic relation is \"are related with pizza\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "extractor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with extractor. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for extractor.\";         A textual example of the semantic relation is \"are related with extractor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "sweet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be sweet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "taste",
        "value": "hot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Contains information on the taste of a food.\";         A textual example of the semantic relation is \"can be hot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "hot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of hot can be described.\";         A textual example of the semantic relation is \"can smell hot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "varietal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of varietal can be described.\";         A textual example of the semantic relation is \"can smell varietal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "bottle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with bottle. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for bottle.\";         A textual example of the semantic relation is \"are related with bottle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "butter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with butter. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for butter.\";         A textual example of the semantic relation is \"are related with butter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "pip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pip.\";         A textual example of the semantic relation is \"can have pip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "stem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stem.\";         A textual example of the semantic relation is \"can have stem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "leaf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of leaf.\";         A textual example of the semantic relation is \"can have leaf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "pulp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pulp.\";         A textual example of the semantic relation is \"can have pulp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "flesh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of flesh.\";         A textual example of the semantic relation is \"can have flesh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "stalk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stalk.\";         A textual example of the semantic relation is \"can have stalk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "core",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of core.\";         A textual example of the semantic relation is \"can have core\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "husk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of husk.\";         A textual example of the semantic relation is \"can have husk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "skin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of skin.\";         A textual example of the semantic relation is \"can have skin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "glucose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of glucose.\";         A textual example of the semantic relation is \"can have glucose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "fructose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fructose.\";         A textual example of the semantic relation is \"can have fructose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "cabbage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cabbage.\";         A textual example of the semantic relation is \"can have cabbage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "orange rind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of orange rind.\";         A textual example of the semantic relation is \"can have orange rind\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "orange peel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of orange peel.\";         A textual example of the semantic relation is \"can have orange peel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "tomato",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tomato.\";         A textual example of the semantic relation is \"can have tomato\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of jacket.\";         A textual example of the semantic relation is \"can have jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "Zea mays rugosa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of Zea mays rugosa.\";         A textual example of the semantic relation is \"can have Zea mays rugosa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "cuke",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cuke.\";         A textual example of the semantic relation is \"can have cuke\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "breadstuff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of breadstuff.\";         A textual example of the semantic relation is \"can have breadstuff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "chou",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of chou.\";         A textual example of the semantic relation is \"can have chou\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "onion",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of onion.\";         A textual example of the semantic relation is \"can have onion\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "isothiocyanate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of isothiocyanate.\";         A textual example of the semantic relation is \"can have isothiocyanate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "sugar corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sugar corn.\";         A textual example of the semantic relation is \"can have sugar corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "staff of life",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of staff of life.\";         A textual example of the semantic relation is \"can have staff of life\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "curd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of curd.\";         A textual example of the semantic relation is \"can have curd\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "sweet corn plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sweet corn plant.\";         A textual example of the semantic relation is \"can have sweet corn plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "cucumber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cucumber.\";         A textual example of the semantic relation is \"can have cucumber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "shell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shell.\";         A textual example of the semantic relation is \"can have shell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "dough",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of dough.\";         A textual example of the semantic relation is \"can have dough\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "tannin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tannin.\";         A textual example of the semantic relation is \"can have tannin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "Zea saccharata",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of Zea saccharata.\";         A textual example of the semantic relation is \"can have Zea saccharata\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "cheese rind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cheese rind.\";         A textual example of the semantic relation is \"can have cheese rind\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "spinach",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spinach.\";         A textual example of the semantic relation is \"can have spinach\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "sauce",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from sauce through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce sauce\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "cake",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from cake through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce cake\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "compote",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from compote through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce compote\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "syrup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from syrup through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce syrup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from juice through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "puree",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from puree through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce puree\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "whiskey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from whiskey through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce whiskey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "bioethanol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from bioethanol through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce bioethanol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "biodiesel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from biodiesel through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce biodiesel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "cornflake",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from cornflake through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce cornflake\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "biofuel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from biofuel through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce biofuel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from wine through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "cob",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from cob through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce cob\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "pancake",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from pancake through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce pancake\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "crumb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from crumb through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce crumb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "chowder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from chowder through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce chowder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "gluten",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from gluten through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce gluten\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "tortilla",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from tortilla through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce tortilla\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "pie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from pie through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce pie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "yellow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of yellow.\";         A textual example of the semantic relation is \"can be yellow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "yellow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of yellow.\";         A textual example of the semantic relation is \"can be yellow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of orange.\";         A textual example of the semantic relation is \"can be orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of orange.\";         A textual example of the semantic relation is \"can be orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "yellowish",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of yellowish.\";         A textual example of the semantic relation is \"can be yellowish\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "yellowish",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of yellowish.\";         A textual example of the semantic relation is \"can be yellowish\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "rose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of rose.\";         A textual example of the semantic relation is \"can be rose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "glossy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of glossy.\";         A textual example of the semantic relation is \"can be glossy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "shiny",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of shiny.\";         A textual example of the semantic relation is \"can be shiny\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "pink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of pink.\";         A textual example of the semantic relation is \"can be pink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "pink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of pink.\";         A textual example of the semantic relation is \"can be pink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "supermarket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which supermarket can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in supermarkets\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "Britain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which Britain can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Britains\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "USA",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which USA can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in USAs\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "field",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which field can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in fields\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "underground",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which underground can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in undergrounds\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "France",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which France can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Frances\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "restaurant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which restaurant can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in restaurants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "garden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which garden can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in gardens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "grocery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which grocery can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in groceries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "plantation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which plantation can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in plantations\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "bar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which bar can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bars\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "tree",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which tree can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in trees\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "vineyard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which vineyard can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in vineyards\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "shop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which shop can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in shops\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "bakery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which bakery can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bakeries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "store",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which store can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in stores\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "seed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seed.\";         A textual example of the semantic relation is \"can have seed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "fruiterer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive fruiterer.\";         A textual example of the semantic relation is \"are used by fruiterers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "user",
        "value": "greengrocer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive greengrocer.\";         A textual example of the semantic relation is \"are used by greengrocers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "root",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of root.\";         A textual example of the semantic relation is \"can have root\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "cider",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from cider through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce cider\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "flour",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which flour is composed.\";         A textual example of the semantic relation is \"can be made of flour\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "material",
        "value": "fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Material of which fruit is composed.\";         A textual example of the semantic relation is \"can be made of fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "orchard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which orchard can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in orchards\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "popcorn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from popcorn through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce popcorn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with rice. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for rice.\";         A textual example of the semantic relation is \"are related with rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "cooler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with cooler. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for cooler.\";         A textual example of the semantic relation is \"are related with cooler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "bottle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with bottle. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for bottle.\";         A textual example of the semantic relation is \"are related with bottle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "cellar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with cellar. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for cellar.\";         A textual example of the semantic relation is \"are related with cellar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "burger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with burger. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for burger.\";         A textual example of the semantic relation is \"are related with burger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with glass. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for glass.\";         A textual example of the semantic relation is \"are related with glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "colorPattern",
        "value": "rose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of rose.\";         A textual example of the semantic relation is \"can be rose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "pastry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from pastry through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce pastry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from sandwich through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from salad through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "flour",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from flour through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce flour\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "soup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from soup through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce soup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "vinegar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from vinegar through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce vinegar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "sweet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of sweet can be described.\";         A textual example of the semantic relation is \"can be sweet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "soup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with soup. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for soup.\";         A textual example of the semantic relation is \"are related with soup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "pasta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with pasta. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for pasta.\";         A textual example of the semantic relation is \"are related with pasta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with bread. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for bread.\";         A textual example of the semantic relation is \"are related with bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with corn. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for corn.\";         A textual example of the semantic relation is \"are related with corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "grape",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with grape. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for grape.\";         A textual example of the semantic relation is \"are related with grape\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "vinegar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with vinegar. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for vinegar.\";         A textual example of the semantic relation is \"are related with vinegar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "maize",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with maize. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for maize.\";         A textual example of the semantic relation is \"are related with maize\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "dish",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with dish. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for dish.\";         A textual example of the semantic relation is \"are related with dish\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "cook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of cook.\";         A textual example of the semantic relation is \"can be used for cook\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "cut",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of cut.\";         A textual example of the semantic relation is \"can be used for cut\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "eat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of eat.\";         A textual example of the semantic relation is \"can be used for eat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "boil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of boil.\";         A textual example of the semantic relation is \"can be used for boil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "stew",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of stew.\";         A textual example of the semantic relation is \"can be used for stew\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "harvest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of harvest.\";         A textual example of the semantic relation is \"can be used for harvest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "slice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of slice.\";         A textual example of the semantic relation is \"can be used for slice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "dry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of dry.\";         A textual example of the semantic relation is \"can be used for dry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "pick",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of pick.\";         A textual example of the semantic relation is \"can be used for pick\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "bake",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of bake.\";         A textual example of the semantic relation is \"can be used for bake\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "harvest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of harvest.\";         A textual example of the semantic relation is \"can be used for harvest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "roast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of roast.\";         A textual example of the semantic relation is \"can be used for roast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "wash",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of wash.\";         A textual example of the semantic relation is \"can be used for wash\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "press",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of press.\";         A textual example of the semantic relation is \"can be used for press\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "grow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of grow.\";         A textual example of the semantic relation is \"can be used for grow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "steam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of steam.\";         A textual example of the semantic relation is \"can be used for steam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "fry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of fry.\";         A textual example of the semantic relation is \"can be used for fry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "peel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of peel.\";         A textual example of the semantic relation is \"can be used for peel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "spiced",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of spiced.\";         A textual example of the semantic relation is \"can be used for spiced\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "braise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of braise.\";         A textual example of the semantic relation is \"can be used for braise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "knead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of knead.\";         A textual example of the semantic relation is \"can be used for knead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "caramelize",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of caramelize.\";         A textual example of the semantic relation is \"can be used for caramelize\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "grind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of grind.\";         A textual example of the semantic relation is \"can be used for grind\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "cream",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of cream.\";         A textual example of the semantic relation is \"can be used for cream\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "glaze",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of glaze.\";         A textual example of the semantic relation is \"can be used for glaze\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "dip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of dip.\";         A textual example of the semantic relation is \"can be used for dip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "break",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of break.\";         A textual example of the semantic relation is \"can be used for break\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "cultivate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of cultivate.\";         A textual example of the semantic relation is \"can be used for cultivate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "melt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of melt.\";         A textual example of the semantic relation is \"can be used for melt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "sprout",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of sprout.\";         A textual example of the semantic relation is \"can be used for sprout\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "chop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of chop.\";         A textual example of the semantic relation is \"can be used for chop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "steam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of steam.\";         A textual example of the semantic relation is \"can be used for steam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "taste",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of taste.\";         A textual example of the semantic relation is \"can be used for taste\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "leaven",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of leaven.\";         A textual example of the semantic relation is \"can be used for leaven\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "crumble",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of crumble.\";         A textual example of the semantic relation is \"can be used for crumble\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "pickle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of pickle.\";         A textual example of the semantic relation is \"can be used for pickle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "soak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of soak.\";         A textual example of the semantic relation is \"can be used for soak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "dice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of dice.\";         A textual example of the semantic relation is \"can be used for dice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "slice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of slice.\";         A textual example of the semantic relation is \"can be used for slice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "grate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of grate.\";         A textual example of the semantic relation is \"can be used for grate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "toast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of toast.\";         A textual example of the semantic relation is \"can be used for toast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "dip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of dip.\";         A textual example of the semantic relation is \"can be used for dip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "taste",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of taste.\";         A textual example of the semantic relation is \"can be used for taste\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "wilt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of wilt.\";         A textual example of the semantic relation is \"can be used for wilt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "sweet corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sweet corn.\";         A textual example of the semantic relation is \"can have sweet corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "shuck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shuck.\";         A textual example of the semantic relation is \"can have shuck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "green corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of green corn.\";         A textual example of the semantic relation is \"can have green corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "yield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from yield through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce yield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "yield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from yield through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce yield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "loaf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from loaf through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce loaf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "smell",
        "value": "sweet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the smell of sweet can be described.\";         A textual example of the semantic relation is \"can smell sweet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "greengrocer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which greengrocer can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in greengrocers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "fruiterer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which fruiterer can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in fruiterers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "bottle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which bottle can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bottles\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which glass can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in glasses\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "cellar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which cellar can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cellars\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "nutrient",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of nutrient related to hypernyms.\";         A textual example of the semantic relation is \"are nutrient\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drink related to hypernyms.\";         A textual example of the semantic relation is \"are drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "food",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of food related to hypernyms.\";         A textual example of the semantic relation is \"are food\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "vegetable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of vegetable related to hypernyms.\";         A textual example of the semantic relation is \"are vegetable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "foodstuff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of foodstuff related to hypernyms.\";         A textual example of the semantic relation is \"are foodstuff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "food product",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of food product related to hypernyms.\";         A textual example of the semantic relation is \"are food product\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "substance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of substance related to hypernyms.\";         A textual example of the semantic relation is \"are substance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "staple food",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of staple food related to hypernyms.\";         A textual example of the semantic relation is \"are staple food\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "garden truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of garden truck related to hypernyms.\";         A textual example of the semantic relation is \"are garden truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "produce",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of produce related to hypernyms.\";         A textual example of the semantic relation is \"are produce\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "green groceries",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of green groceries related to hypernyms.\";         A textual example of the semantic relation is \"are green groceries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "green goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of green goods related to hypernyms.\";         A textual example of the semantic relation is \"are green goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "tuber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tuber related to hypernyms.\";         A textual example of the semantic relation is \"are tuber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "tracheophyte",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tracheophyte related to hypernyms.\";         A textual example of the semantic relation is \"are tracheophyte\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "vascular plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of vascular plant related to hypernyms.\";         A textual example of the semantic relation is \"are vascular plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "reproductive structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of reproductive structure related to hypernyms.\";         A textual example of the semantic relation is \"are reproductive structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "herbaceous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of herbaceous plant related to hypernyms.\";         A textual example of the semantic relation is \"are herbaceous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "herb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of herb related to hypernyms.\";         A textual example of the semantic relation is \"are herb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "liquid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of liquid related to hypernyms.\";         A textual example of the semantic relation is \"are liquid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "fluid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fluid related to hypernyms.\";         A textual example of the semantic relation is \"are fluid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "starches",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of starches related to hypernyms.\";         A textual example of the semantic relation is \"are starches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "alimentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alimentation related to hypernyms.\";         A textual example of the semantic relation is \"are alimentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "nutrition",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of nutrition related to hypernyms.\";         A textual example of the semantic relation is \"are nutrition\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "food grain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of food grain related to hypernyms.\";         A textual example of the semantic relation is \"are food grain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "nourishment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of nourishment related to hypernyms.\";         A textual example of the semantic relation is \"are nourishment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "aliment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of aliment related to hypernyms.\";         A textual example of the semantic relation is \"are aliment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "grain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of grain related to hypernyms.\";         A textual example of the semantic relation is \"are grain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "victuals",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of victuals related to hypernyms.\";         A textual example of the semantic relation is \"are victuals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "flora",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of flora related to hypernyms.\";         A textual example of the semantic relation is \"are flora\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "drug of abuse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drug of abuse related to hypernyms.\";         A textual example of the semantic relation is \"are drug of abuse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "plant organ",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of plant organ related to hypernyms.\";         A textual example of the semantic relation is \"are plant organ\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "sustenance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sustenance related to hypernyms.\";         A textual example of the semantic relation is \"are sustenance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of plant related to hypernyms.\";         A textual example of the semantic relation is \"are plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "matter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of matter related to hypernyms.\";         A textual example of the semantic relation is \"are matter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "street drug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of street drug related to hypernyms.\";         A textual example of the semantic relation is \"are street drug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "plant life",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of plant life related to hypernyms.\";         A textual example of the semantic relation is \"are plant life\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "nutriment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of nutriment related to hypernyms.\";         A textual example of the semantic relation is \"are nutriment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "plant structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of plant structure related to hypernyms.\";         A textual example of the semantic relation is \"are plant structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "solid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of solid related to hypernyms.\";         A textual example of the semantic relation is \"are solid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "plant part",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of plant part related to hypernyms.\";         A textual example of the semantic relation is \"are plant part\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "drug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drug related to hypernyms.\";         A textual example of the semantic relation is \"are drug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "gourd vine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gourd vine related to hypernyms.\";         A textual example of the semantic relation is \"are gourd vine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "grass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of grass related to hypernyms.\";         A textual example of the semantic relation is \"are grass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "gramineous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gramineous plant related to hypernyms.\";         A textual example of the semantic relation is \"are gramineous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "cruciferous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cruciferous plant related to hypernyms.\";         A textual example of the semantic relation is \"are cruciferous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "liliaceous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of liliaceous plant related to hypernyms.\";         A textual example of the semantic relation is \"are liliaceous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "graminaceous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of graminaceous plant related to hypernyms.\";         A textual example of the semantic relation is \"are graminaceous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "vine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of vine related to hypernyms.\";         A textual example of the semantic relation is \"are vine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "solanaceous vegetable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of solanaceous vegetable related to hypernyms.\";         A textual example of the semantic relation is \"are solanaceous vegetable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "brew",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of brew related to hypernyms.\";         A textual example of the semantic relation is \"are brew\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "melon vine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of melon vine related to hypernyms.\";         A textual example of the semantic relation is \"are melon vine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "snack food",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of snack food related to hypernyms.\";         A textual example of the semantic relation is \"are snack food\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "crucifer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of crucifer related to hypernyms.\";         A textual example of the semantic relation is \"are crucifer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "citrous fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of citrous fruit related to hypernyms.\";         A textual example of the semantic relation is \"are citrous fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "alliaceous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alliaceous plant related to hypernyms.\";         A textual example of the semantic relation is \"are alliaceous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "bulbous plant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bulbous plant related to hypernyms.\";         A textual example of the semantic relation is \"are bulbous plant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "citrus fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of citrus fruit related to hypernyms.\";         A textual example of the semantic relation is \"are citrus fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "root vegetable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of root vegetable related to hypernyms.\";         A textual example of the semantic relation is \"are root vegetable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "baked goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of baked goods related to hypernyms.\";         A textual example of the semantic relation is \"are baked goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "dairy product",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of dairy product related to hypernyms.\";         A textual example of the semantic relation is \"are dairy product\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "melon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of melon related to hypernyms.\";         A textual example of the semantic relation is \"are melon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "brewage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of brewage related to hypernyms.\";         A textual example of the semantic relation is \"are brewage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "legume",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of legume related to hypernyms.\";         A textual example of the semantic relation is \"are legume\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "citrus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of citrus related to hypernyms.\";         A textual example of the semantic relation is \"are citrus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "dry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of dry.\";         A textual example of the semantic relation is \"can be used when dry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "milk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with milk. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for milk.\";         A textual example of the semantic relation is \"are related with milk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with sandwich. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for sandwich.\";         A textual example of the semantic relation is \"are related with sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fruit related to hypernyms.\";         A textual example of the semantic relation is \"are fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "pome",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pome related to hypernyms.\";         A textual example of the semantic relation is \"are pome\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "consistency",
        "value": "dry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entries with which the noticeable to the touch consistency or texture of dry can be described.\";         A textual example of the semantic relation is \"can be dry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "edible fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of edible fruit related to hypernyms.\";         A textual example of the semantic relation is \"are edible fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "peel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of peel.\";         A textual example of the semantic relation is \"can have peel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bread.\";         A textual example of the semantic relation is \"can have bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "pasta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pasta.\";         A textual example of the semantic relation is \"can have pasta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "wheat berry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wheat berry.\";         A textual example of the semantic relation is \"can have wheat berry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from bread through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "crop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from crop through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce crop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "pasta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from pasta through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce pasta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "cereal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cereal related to hypernyms.\";         A textual example of the semantic relation is \"are cereal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "grape",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which grape can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in grapes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "crop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of crop related to hypernyms.\";         A textual example of the semantic relation is \"are crop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "inebriant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of inebriant related to hypernyms.\";         A textual example of the semantic relation is \"are inebriant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "intoxicant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of intoxicant related to hypernyms.\";         A textual example of the semantic relation is \"are intoxicant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "alcoholic beverage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alcoholic beverage related to hypernyms.\";         A textual example of the semantic relation is \"are alcoholic beverage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "alcoholic drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alcoholic drink related to hypernyms.\";         A textual example of the semantic relation is \"are alcoholic drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "alcohol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alcohol related to hypernyms.\";         A textual example of the semantic relation is \"are alcohol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "dish",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of dish related to hypernyms.\";         A textual example of the semantic relation is \"are dish\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "maize",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of maize related to hypernyms.\";         A textual example of the semantic relation is \"are maize\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with salad. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for salad.\";         A textual example of the semantic relation is \"are related with salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "edible corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of edible corn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are edible corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "barleycorn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of barleycorn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barleycorn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "brown bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of brown bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brown bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "grist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of grist in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grist\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "malt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of malt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are malt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "millet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of millet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are millet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "breadstick",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of breadstick in terms of their hyponyms.\";         A textual example of the semantic relation is \"are breadstick\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "buckwheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of buckwheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are buckwheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "baguette",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of baguette in terms of their hyponyms.\";         A textual example of the semantic relation is \"are baguette\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "groats",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of groats in terms of their hyponyms.\";         A textual example of the semantic relation is \"are groats\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ciabatta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ciabatta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ciabatta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wild rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wild rice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wild rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Indian rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Indian rice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Indian rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "oat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of oat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are oat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "barley",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of barley in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barley\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "oil nut",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of oil nut in terms of their hyponyms.\";         A textual example of the semantic relation is \"are oil nut\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "quark cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of quark cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are quark cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "french fries",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of french fries in terms of their hyponyms.\";         A textual example of the semantic relation is \"are french fries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Fragaria ananassa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Fragaria ananassa in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Fragaria ananassa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "garlic bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of garlic bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are garlic bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cinnamon bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cinnamon bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cinnamon bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Sauvignon Blanc",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Sauvignon Blanc in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Sauvignon Blanc\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pasta salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pasta salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pasta salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "blush wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of blush wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blush wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "home fries",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of home fries in terms of their hyponyms.\";         A textual example of the semantic relation is \"are home fries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "drupe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drupe in terms of their hyponyms.\";         A textual example of the semantic relation is \"are drupe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "drinking chocolate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drinking chocolate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are drinking chocolate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "grinder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of grinder in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grinder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Rhone wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Rhone wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Rhone wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cubeb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cubeb in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cubeb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "matzah",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of matzah in terms of their hyponyms.\";         A textual example of the semantic relation is \"are matzah\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "home-fried potatoes",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of home-fried potatoes in terms of their hyponyms.\";         A textual example of the semantic relation is \"are home-fried potatoes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "dessert apple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of dessert apple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dessert apple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Sloppy Joe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Sloppy Joe in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Sloppy Joe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Cotes de Provence",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Cotes de Provence in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cotes de Provence\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "blue cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of blue cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blue cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "durum wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of durum wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are durum wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ear in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "suds",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of suds in terms of their hyponyms.\";         A textual example of the semantic relation is \"are suds\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cocoa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cocoa in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cocoa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "flatbread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of flatbread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flatbread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "refresher",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of refresher in terms of their hyponyms.\";         A textual example of the semantic relation is \"are refresher\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "double Gloucester",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of double Gloucester in terms of their hyponyms.\";         A textual example of the semantic relation is \"are double Gloucester\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Red Delicious",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Red Delicious in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Red Delicious\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ham sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ham sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ham sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "soya bean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of soya bean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soya bean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pink wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pink wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pink wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Cheshire cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Cheshire cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cheshire cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "challah",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of challah in terms of their hyponyms.\";         A textual example of the semantic relation is \"are challah\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "brioche",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of brioche in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brioche\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "olive",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of olive in terms of their hyponyms.\";         A textual example of the semantic relation is \"are olive\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "goa bean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of goa bean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are goa bean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Velveeta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Velveeta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Velveeta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "common wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of common wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are common wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "beach strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of beach strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are beach strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "red hot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of red hot in terms of their hyponyms.\";         A textual example of the semantic relation is \"are red hot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "white rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of white rice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "iced coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of iced coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are iced coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "syncarp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of syncarp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are syncarp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mocha coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mocha coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mocha coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wafer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wafer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wafer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "triple cream",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of triple cream in terms of their hyponyms.\";         A textual example of the semantic relation is \"are triple cream\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "starch wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of starch wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are starch wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "salad nicoise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of salad nicoise in terms of their hyponyms.\";         A textual example of the semantic relation is \"are salad nicoise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tea-like drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tea-like drink in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tea-like drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hallah",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hallah in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hallah\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hamburger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hamburger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hamburger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "open sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of open sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are open sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Camembert",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Camembert in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Camembert\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "chips",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of chips in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chips\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pan gravy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pan gravy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pan gravy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bun",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bun in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bun\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "quick bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of quick bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are quick bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "chicken salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of chicken salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chicken salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rose hip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rose hip in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rose hip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "soy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of soy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum turgidum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum turgidum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum turgidum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "maconnais",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of maconnais in terms of their hyponyms.\";         A textual example of the semantic relation is \"are maconnais\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "beefburger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of beefburger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are beefburger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "process cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of process cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are process cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hip in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Chardonnay",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Chardonnay in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Chardonnay\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "chokecherry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of chokecherry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chokecherry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "emmer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of emmer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are emmer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tossed salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tossed salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tossed salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hominy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hominy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hominy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mulled wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mulled wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mulled wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mixer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mixer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mixer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "papaya juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of papaya juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are papaya juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "lager beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of lager beer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lager beer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "french-fried potatoes",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of french-fried potatoes in terms of their hyponyms.\";         A textual example of the semantic relation is \"are french-fried potatoes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "submarine sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of submarine sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are submarine sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cottage cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cottage cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cottage cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bomber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bomber in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bomber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "acorn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of acorn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are acorn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wild emmer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wild emmer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wild emmer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "gluten bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gluten bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gluten bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Gouda cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Gouda cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Gouda cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Swiss cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Swiss cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Swiss cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "altar wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of altar wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are altar wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "smoothie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of smoothie in terms of their hyponyms.\";         A textual example of the semantic relation is \"are smoothie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "nan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of nan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "decaffeinated coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of decaffeinated coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are decaffeinated coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "quandong",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of quandong in terms of their hyponyms.\";         A textual example of the semantic relation is \"are quandong\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "dessert wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of dessert wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dessert wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "temple orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of temple orange in terms of their hyponyms.\";         A textual example of the semantic relation is \"are temple orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wood strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wood strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wood strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "coffee substitute",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of coffee substitute in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coffee substitute\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "coffee royal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of coffee royal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coffee royal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "lager",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of lager in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lager\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "false fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of false fruit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are false fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "three-decker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of three-decker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are three-decker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Parmesan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Parmesan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Parmesan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "herb tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of herb tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are herb tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "soft drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of soft drink in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soft drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "aggregate fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of aggregate fruit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are aggregate fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "torpedo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of torpedo in terms of their hyponyms.\";         A textual example of the semantic relation is \"are torpedo\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "common bean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of common bean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are common bean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "seckel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of seckel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are seckel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Brie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Brie in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Brie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rowanberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rowanberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rowanberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Reuben",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Reuben in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Reuben\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mocha",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mocha in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mocha\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "prairie gourd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of prairie gourd in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prairie gourd\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ricotta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ricotta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ricotta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "java",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of java in terms of their hyponyms.\";         A textual example of the semantic relation is \"are java\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "gravy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gravy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gravy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sour bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sour bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sour bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "drinking water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drinking water in terms of their hyponyms.\";         A textual example of the semantic relation is \"are drinking water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "soybean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of soybean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soybean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "unleavened bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of unleavened bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are unleavened bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sparkling wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sparkling wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sparkling wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cuppa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cuppa in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cuppa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tuna fish salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tuna fish salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tuna fish salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "macaroni wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of macaroni wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are macaroni wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "raisin bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of raisin bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are raisin bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "barmbrack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of barmbrack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barmbrack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tomato juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tomato juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tomato juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Edam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Edam in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Edam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fruit drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fruit drink in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fruit drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "V-8 juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of V-8 juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are V-8 juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ice tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ice tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ice tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hydromel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hydromel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hydromel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "generic wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of generic wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are generic wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "vermouth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of vermouth in terms of their hyponyms.\";         A textual example of the semantic relation is \"are vermouth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "white wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of white wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "jug wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of jug wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jug wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "berry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of berry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are berry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sub",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sub in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sub\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "elk nut",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of elk nut in terms of their hyponyms.\";         A textual example of the semantic relation is \"are elk nut\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "light bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of light bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are light bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "zep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of zep in terms of their hyponyms.\";         A textual example of the semantic relation is \"are zep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "vintage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of vintage in terms of their hyponyms.\";         A textual example of the semantic relation is \"are vintage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rose wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rose wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rose wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sweet orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sweet orange in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sweet orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "spike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of spike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are spike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "farmer's cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of farmer's cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are farmer's cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Liederkranz",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Liederkranz in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Liederkranz\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "slaw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of slaw in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slaw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rye bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rye bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rye bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tuna salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tuna salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tuna salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "roll",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of roll in terms of their hyponyms.\";         A textual example of the semantic relation is \"are roll\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fruit crush",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fruit crush in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fruit crush\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "decaf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of decaf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are decaf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum aestivum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum aestivum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum aestivum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "draught beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of draught beer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are draught beer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "two-grain spelt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of two-grain spelt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are two-grain spelt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Bordeaux",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Bordeaux in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Bordeaux\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hagberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hagberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hagberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Chilean strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Chilean strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Chilean strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "chocolate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of chocolate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chocolate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wedge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wedge in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wedge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "drip coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of drip coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are drip coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum dicoccum dicoccoides",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum dicoccum dicoccoides in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum dicoccum dicoccoides\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum dicoccum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum dicoccum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum dicoccum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Gala",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Gala in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Gala\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sourdough bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sourdough bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sourdough bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Boston brown bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Boston brown bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Boston brown bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wild wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wild wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wild wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "potion",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of potion in terms of their hyponyms.\";         A textual example of the semantic relation is \"are potion\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fries",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fries in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "herbal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of herbal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are herbal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "crabapple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of crabapple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are crabapple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "crab Louis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of crab Louis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are crab Louis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "draft beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of draft beer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are draft beer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ade",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ade in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ade\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "buffalo nut",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of buffalo nut in terms of their hyponyms.\";         A textual example of the semantic relation is \"are buffalo nut\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Fuji",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Fuji in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Fuji\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "matzoh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of matzoh in terms of their hyponyms.\";         A textual example of the semantic relation is \"are matzoh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Dubonnet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Dubonnet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Dubonnet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Riesling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Riesling in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Riesling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "blue fig",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of blue fig in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blue fig\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fruit salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fruit salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fruit salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "gyro",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gyro in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gyro\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Muenster",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Muenster in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Muenster\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "crouton",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of crouton in terms of their hyponyms.\";         A textual example of the semantic relation is \"are crouton\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "lime juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of lime juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lime juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cupper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cupper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cupper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "plonk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of plonk in terms of their hyponyms.\";         A textual example of the semantic relation is \"are plonk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "seedpod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of seedpod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are seedpod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "schizocarp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of schizocarp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are schizocarp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "quark",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of quark in terms of their hyponyms.\";         A textual example of the semantic relation is \"are quark\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cambric tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cambric tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cambric tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "whole wheat bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of whole wheat bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are whole wheat bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cafe au lait",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cafe au lait in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cafe au lait\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Gouda",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Gouda in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Gouda\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "poor boy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of poor boy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are poor boy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "white bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of white bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "retsina",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of retsina in terms of their hyponyms.\";         A textual example of the semantic relation is \"are retsina\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "coleslaw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of coleslaw in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coleslaw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sacramental wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sacramental wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sacramental wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fruitlet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fruitlet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fruitlet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "instant coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of instant coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are instant coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "western",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of western in terms of their hyponyms.\";         A textual example of the semantic relation is \"are western\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "chicken sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of chicken sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chicken sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "oenomel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of oenomel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are oenomel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "espresso",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of espresso in terms of their hyponyms.\";         A textual example of the semantic relation is \"are espresso\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "brick cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of brick cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brick cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "eating apple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of eating apple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are eating apple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Fragaria vesca",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Fragaria vesca in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Fragaria vesca\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hoagie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hoagie in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hoagie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bitter orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bitter orange in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bitter orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cooking apple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cooking apple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cooking apple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "macon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of macon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are macon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "simnel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of simnel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are simnel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wrap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wrap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wrap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sour orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sour orange in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sour orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tabbouleh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tabbouleh in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tabbouleh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Cabernet Sauvignon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Cabernet Sauvignon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cabernet Sauvignon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "stone fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of stone fruit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stone fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "grated cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of grated cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grated cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Granny Smith",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Granny Smith in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Granny Smith\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "submarine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of submarine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are submarine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "molded salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of molded salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are molded salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Honeycrisp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Honeycrisp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Honeycrisp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Tokay",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Tokay in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Tokay\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bosc",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bosc in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bosc\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "yellow berry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of yellow berry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are yellow berry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Burgundy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Burgundy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Burgundy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mashed potato",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mashed potato in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mashed potato\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hoagy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hoagy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hoagy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "open-face sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of open-face sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are open-face sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "potato salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of potato salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are potato salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "coffee cappuccino",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of coffee cappuccino in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coffee cappuccino\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cream cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cream cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cream cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bacon-lettuce-tomato sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bacon-lettuce-tomato sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bacon-lettuce-tomato sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "matzo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of matzo in terms of their hyponyms.\";         A textual example of the semantic relation is \"are matzo\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rosehip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rosehip in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rosehip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pot cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pot cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pot cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bleu",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bleu in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bleu\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Italian sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Italian sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Italian sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "buckthorn berry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of buckthorn berry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are buckthorn berry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "baked potato",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of baked potato in terms of their hyponyms.\";         A textual example of the semantic relation is \"are baked potato\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "varietal wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of varietal wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are varietal wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Fragaria chiloensis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Fragaria chiloensis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Fragaria chiloensis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "whole meal bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of whole meal bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are whole meal bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Merlot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Merlot in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Merlot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "herbal tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of herbal tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are herbal tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cheddar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cheddar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cheddar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "salt-rising bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of salt-rising bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are salt-rising bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "garden strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of garden strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are garden strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "herring salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of herring salad in terms of their hyponyms.\";         A textual example of the semantic relation is \"are herring salad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "juniper berry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of juniper berry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are juniper berry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Seville orange",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Seville orange in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Seville orange\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Irish coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Irish coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Irish coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Golden Delicious",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Golden Delicious in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Golden Delicious\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "American cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of American cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are American cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum durum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum durum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum durum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fizz",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fizz in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fizz\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "chevre",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of chevre in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chevre\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "anadama bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of anadama bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are anadama bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cyder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cyder in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cyder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "California wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of California wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are California wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "generic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of generic in terms of their hyponyms.\";         A textual example of the semantic relation is \"are generic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Bordeaux wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Bordeaux wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Bordeaux wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bartlett pear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bartlett pear in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bartlett pear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "marasca",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of marasca in terms of their hyponyms.\";         A textual example of the semantic relation is \"are marasca\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Host",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Host in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Host\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "accessory fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of accessory fruit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are accessory fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hot chocolate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hot chocolate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hot chocolate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "anjou",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of anjou in terms of their hyponyms.\";         A textual example of the semantic relation is \"are anjou\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wild cherry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wild cherry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wild cherry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cafe noir",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cafe noir in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cafe noir\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bartlett",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bartlett in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bartlett\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tabooli",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tabooli in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tabooli\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "achene",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of achene in terms of their hyponyms.\";         A textual example of the semantic relation is \"are achene\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wild strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wild strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wild strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cappuccino",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cappuccino in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cappuccino\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "farm cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of farm cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are farm cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "spelt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of spelt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are spelt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Cripps Pink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Cripps Pink in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cripps Pink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "club sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of club sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are club sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cheddar cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cheddar cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cheddar cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "BLT",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of BLT in terms of their hyponyms.\";         A textual example of the semantic relation is \"are BLT\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fortified wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fortified wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fortified wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "triple-decker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of triple-decker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are triple-decker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "triple creme",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of triple creme in terms of their hyponyms.\";         A textual example of the semantic relation is \"are triple creme\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pseudocarp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pseudocarp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pseudocarp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "brown rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of brown rice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are brown rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "carrot juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of carrot juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are carrot juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Turkish coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Turkish coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Turkish coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "near beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of near beer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are near beer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "onion bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of onion bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are onion bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "loaf of bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of loaf of bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are loaf of bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "caraway seed bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of caraway seed bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are caraway seed bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "paddy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of paddy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are paddy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "polished rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of polished rice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are polished rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "iced tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of iced tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are iced tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "dark bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of dark bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dark bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hero",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hero in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hero\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "soya",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of soya in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soya\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "lemon juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of lemon juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lemon juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "string cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of string cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are string cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hotdog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hotdog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hotdog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "bap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of bap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "processed cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of processed cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are processed cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hard wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hard wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hard wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hero sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hero sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hero sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Burgundy wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Burgundy wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Burgundy wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cracked-wheat bread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cracked-wheat bread in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cracked-wheat bread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hand cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hand cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hand cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Cuban sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Cuban sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Cuban sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ice coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ice coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ice coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "hot dog",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of hot dog in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hot dog\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pyxidium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pyxidium in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pyxidium\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sun tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sun tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sun tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "demitasse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of demitasse in terms of their hyponyms.\";         A textual example of the semantic relation is \"are demitasse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Limburger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Limburger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Limburger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Armerican cheddar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Armerican cheddar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Armerican cheddar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "table wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of table wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are table wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pyxis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pyxis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pyxis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wish-wash",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wish-wash in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wish-wash\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cafe royale",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cafe royale in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cafe royale\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Fragaria virginiana",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Fragaria virginiana in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Fragaria virginiana\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "red wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of red wine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are red wine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "goat cheese",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of goat cheese in terms of their hyponyms.\";         A textual example of the semantic relation is \"are goat cheese\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum spelta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum spelta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum spelta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Triticum aestivum spelta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Triticum aestivum spelta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Triticum aestivum spelta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pretzel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pretzel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pretzel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cappuccino coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cappuccino coffee in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cappuccino coffee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "multiple fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of multiple fruit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are multiple fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tunaburger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tunaburger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tunaburger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "capitulum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of capitulum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are capitulum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "salmagundi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of salmagundi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are salmagundi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "butty",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of butty in terms of their hyponyms.\";         A textual example of the semantic relation is \"are butty\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cracker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cracker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cracker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "English muffin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of English muffin in terms of their hyponyms.\";         A textual example of the semantic relation is \"are English muffin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "May apple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of May apple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are May apple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Pinot Noir",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Pinot Noir in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Pinot Noir\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "crab apple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of crab apple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are crab apple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Virginia strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Virginia strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Virginia strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ale",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ale in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ale\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "mozzarella",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of mozzarella in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mozzarella\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cultivated strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cultivated strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cultivated strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "durum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of durum in terms of their hyponyms.\";         A textual example of the semantic relation is \"are durum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "ginger beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of ginger beer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ginger beer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "fruit juice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of fruit juice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fruit juice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of tea in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tea\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "soft wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of soft wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are soft wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "scarlet strawberry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of scarlet strawberry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are scarlet strawberry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "Uruguay potato",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of Uruguay potato in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Uruguay potato\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "naan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of naan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are naan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "seckel pear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of seckel pear in terms of their hyponyms.\";         A textual example of the semantic relation is \"are seckel pear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "western sandwich",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of western sandwich in terms of their hyponyms.\";         A textual example of the semantic relation is \"are western sandwich\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "peel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of peel.\";         A textual example of the semantic relation is \"can be used for peel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "yield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of yield.\";         A textual example of the semantic relation is \"can be used for yield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "yield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of yield.\";         A textual example of the semantic relation is \"can be used for yield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "toast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of toast.\";         A textual example of the semantic relation is \"can be used for toast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "shuck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of shuck.\";         A textual example of the semantic relation is \"can be used for shuck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of water.\";         A textual example of the semantic relation is \"can have water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "pastry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pastry.\";         A textual example of the semantic relation is \"can have pastry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "bottle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which bottle can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bottles\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "gourd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gourd related to hypernyms.\";         A textual example of the semantic relation is \"are gourd\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "accessory",
        "value": "cereal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with cereal. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for cereal.\";         A textual example of the semantic relation is \"are related with cereal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from wheat through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wheat berry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wheat berry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wheat berry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of corn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "peel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from peel through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce peel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "part",
        "value": "flour",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the constitutive parts of flour.\";         A textual example of the semantic relation is \"can have flour\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "orchard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from orchard through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce orchard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "product",
        "value": "cereal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All types of entity that can be derived from cereal through its processing or through natural processes.\";         A textual example of the semantic relation is \"can produce cereal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rice in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "gourd",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of gourd in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gourd\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cooler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cooler in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cooler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "varietal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of varietal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are varietal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "sweet corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of sweet corn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sweet corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "toast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of toast in terms of their hyponyms.\";         A textual example of the semantic relation is \"are toast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "burger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of burger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are burger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "green corn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of green corn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are green corn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "loaf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of loaf in terms of their hyponyms.\";         A textual example of the semantic relation is \"are loaf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "howToUse",
        "value": "butter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of butter.\";         A textual example of the semantic relation is \"can be used for butter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "wheat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of wheat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wheat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "intoxicant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of intoxicant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are intoxicant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "inebriant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of inebriant in terms of their hyponyms.\";         A textual example of the semantic relation is \"are inebriant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "alcoholic drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alcoholic drink in terms of their hyponyms.\";         A textual example of the semantic relation is \"are alcoholic drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "alcohol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alcohol in terms of their hyponyms.\";         A textual example of the semantic relation is \"are alcohol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "alcoholic beverage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of alcoholic beverage in terms of their hyponyms.\";         A textual example of the semantic relation is \"are alcoholic beverage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "place",
        "value": "salad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"All the entities in which salad can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in salads\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "milk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of milk in terms of their hyponyms.\";         A textual example of the semantic relation is \"are milk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "generalization",
        "value": "root",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of root related to hypernyms.\";         A textual example of the semantic relation is \"are root\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "rose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of rose in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "edible fruit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of edible fruit in terms of their hyponyms.\";         A textual example of the semantic relation is \"are edible fruit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "popcorn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of popcorn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are popcorn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "pome",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of pome in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pome\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "cider",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of cider in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cider\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "food",
        "slot": "specialization",
        "value": "seed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"food\";         The returned words must satisfy the semantic relation \"Classification of seed in terms of their hyponyms.\";         A textual example of the semantic relation is \"are seed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "time",
        "value": "holiday",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries which link holiday with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during holiday\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "accessory",
        "value": "cargo trailer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with cargo trailer. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for cargo trailer.\";         A textual example of the semantic relation is \"are related with cargo trailer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "accessory",
        "value": "mower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with mower. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for mower.\";         A textual example of the semantic relation is \"are related with mower\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "accessory",
        "value": "scraper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with scraper. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for scraper.\";         A textual example of the semantic relation is \"are related with scraper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "accessory",
        "value": "trailer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with trailer. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for trailer.\";         A textual example of the semantic relation is \"are related with trailer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "accessory",
        "value": "seeder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with seeder. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for seeder.\";         A textual example of the semantic relation is \"are related with seeder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "accessory",
        "value": "plough",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with plough. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for plough.\";         A textual example of the semantic relation is \"are related with plough\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "content",
        "value": "luggage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within luggage, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain luggage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "content",
        "value": "goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within goods, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain goodss\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "efficiency",
        "value": "streamlined",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of streamlined related to their function.\";         A textual example of the semantic relation is \"can be streamlined\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "efficiency",
        "value": "sinkable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of sinkable related to their function.\";         A textual example of the semantic relation is \"can be sinkable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "efficiency",
        "value": "polluting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of polluting related to their function.\";         A textual example of the semantic relation is \"can be polluting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "efficiency",
        "value": "aerodynamic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of aerodynamic related to their function.\";         A textual example of the semantic relation is \"can be aerodynamic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "size",
        "value": "large",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Size of large.\";         A textual example of the semantic relation is \"can be large\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "size",
        "value": "big",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Size of big.\";         A textual example of the semantic relation is \"can be big\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "diesel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of diesel.\";         A textual example of the semantic relation is \"use diesel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "electricity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of electricity.\";         A textual example of the semantic relation is \"use electricity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "kerosene",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of kerosene.\";         A textual example of the semantic relation is \"use kerosene\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "fuel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of fuel.\";         A textual example of the semantic relation is \"use fuel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "power",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of power.\";         A textual example of the semantic relation is \"use power\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "gasoline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of gasoline.\";         A textual example of the semantic relation is \"use gasoline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "supply",
        "value": "gas",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of gas.\";         A textual example of the semantic relation is \"use gas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "shape",
        "value": "aerodynamic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Form of aerodynamic.\";         A textual example of the semantic relation is \"can be aerodynamic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "noisy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of noisy can be described.\";         A textual example of the semantic relation is \"sound noisy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "loud",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of loud can be described.\";         A textual example of the semantic relation is \"sound loud\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "rumbling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of rumbling can be described.\";         A textual example of the semantic relation is \"sound rumbling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "throbbing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of throbbing can be described.\";         A textual example of the semantic relation is \"can throbbing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "silent",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of silent can be described.\";         A textual example of the semantic relation is \"sound silent\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "rumbling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of rumbling can be described.\";         A textual example of the semantic relation is \"can rumbling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "sound",
        "value": "heavy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of heavy can be described.\";         A textual example of the semantic relation is \"sound heavy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "fast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"are fast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "crash",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can crash\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "landing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can landing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "fly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can fly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "take-off",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can take-off\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "sail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can sail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "float",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can float\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "slow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"are slow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "hover",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can hover\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "trip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can trip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "hover",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can hover\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "westbound",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"are westbound\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "southbound",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"are southbound\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "sailing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can sailing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "travelling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which travelling is interacted with.\";         A textual example of the semantic relation is \"are used for travelling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "move",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which move is interacted with.\";         A textual example of the semantic relation is \"are used for move\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "sport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which sport is interacted with.\";         A textual example of the semantic relation is \"are used for sport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "mission",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which mission is interacted with.\";         A textual example of the semantic relation is \"are used for mission\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "fitness",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which fitness is interacted with.\";         A textual example of the semantic relation is \"are used for fitness\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "fishing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which fishing is interacted with.\";         A textual example of the semantic relation is \"are used for fishing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "transit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which transit is interacted with.\";         A textual example of the semantic relation is \"are used for transit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "drag",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which drag is interacted with.\";         A textual example of the semantic relation is \"are used to drag\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "transport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which transport is interacted with.\";         A textual example of the semantic relation is \"are used to transport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "commuter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which commuter is interacted with.\";         A textual example of the semantic relation is \"are used for commuter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "luxury",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which luxury is interacted with.\";         A textual example of the semantic relation is \"are used for luxury\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "race",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which race is interacted with.\";         A textual example of the semantic relation is \"are used for race\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "parking",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which parking is interacted with.\";         A textual example of the semantic relation is \"are used to parking\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "ride",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which ride is interacted with.\";         A textual example of the semantic relation is \"are used for ride\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "travel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which travel is interacted with.\";         A textual example of the semantic relation is \"are used for travel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "agriculture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which agriculture is interacted with.\";         A textual example of the semantic relation is \"are used for agriculture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "travel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which travel is interacted with.\";         A textual example of the semantic relation is \"are used to travel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "ride",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which ride is interacted with.\";         A textual example of the semantic relation is \"are used to ride\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "road",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which road can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in roads\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "airport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which airport can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in airports\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "country",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which country can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in countries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "sky",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which sky can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in skies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "air",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which air can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in airs\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "rural area",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which rural area can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in rural areas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "cycle path",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which cycle path can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cycle paths\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "garage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which garage can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in garages\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "sea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which sea can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in seas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "waterway",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which waterway can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in waterways\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "traffic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which traffic can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in traffics\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "motorway",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which motorway can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in motorways\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "park",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which park can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in parks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "rental",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which rental can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in rentals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "depot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which depot can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in depots\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "shipyard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which shipyard can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in shipyards\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "terminal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which terminal can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in terminals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "route",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which route can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in routes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "terminal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which terminal can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in terminals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "dry dock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which dry dock can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in dry docks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "parking",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which parking can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in parkings\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "station",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which station can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in stations\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "rubber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which rubber is composed.\";         A textual example of the semantic relation is \"can be made of rubber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which glass is composed.\";         A textual example of the semantic relation is \"can be made of glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "aluminium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which aluminium is composed.\";         A textual example of the semantic relation is \"can be made of aluminium\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "steel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which steel is composed.\";         A textual example of the semantic relation is \"can be made of steel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "material",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Material of which wood is composed.\";         A textual example of the semantic relation is \"can be made of wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "people",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive people.\";         A textual example of the semantic relation is \"are used by peoples\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "army",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive army.\";         A textual example of the semantic relation is \"are used by armies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "driver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive driver.\";         A textual example of the semantic relation is \"are used by drivers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "co-pilot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive co-pilot.\";         A textual example of the semantic relation is \"are used by co-pilots\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "cyclist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cyclist.\";         A textual example of the semantic relation is \"are used by cyclists\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "person",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive person.\";         A textual example of the semantic relation is \"are used by people\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "sailor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive sailor.\";         A textual example of the semantic relation is \"are used by sailors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "officer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive officer.\";         A textual example of the semantic relation is \"are used by officers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "farmer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive farmer.\";         A textual example of the semantic relation is \"are used by farmers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "holidaymaker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive holidaymaker.\";         A textual example of the semantic relation is \"are used by holidaymakers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "helmsman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive helmsman.\";         A textual example of the semantic relation is \"are used by helmsmen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "businessman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive businessman.\";         A textual example of the semantic relation is \"are used by businessmen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "taxi driver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive taxi driver.\";         A textual example of the semantic relation is \"are used by taxi drivers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "captain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive captain.\";         A textual example of the semantic relation is \"are used by captains\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "hostess",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive hostess.\";         A textual example of the semantic relation is \"are used by hostesses\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "cruise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cruise.\";         A textual example of the semantic relation is \"are used by cruises\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "steward",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive steward.\";         A textual example of the semantic relation is \"are used by stewards\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "corps",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive corps.\";         A textual example of the semantic relation is \"are used by corps\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "pedestrian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive pedestrian.\";         A textual example of the semantic relation is \"are used by pedestrians\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "squadron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive squadron.\";         A textual example of the semantic relation is \"are used by squadrons\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "navy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive navy.\";         A textual example of the semantic relation is \"are used by navies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "pedestrian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive pedestrian.\";         A textual example of the semantic relation is \"are used by pedestrians\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "farm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which farm can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in farms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "rental",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which rental is interacted with.\";         A textual example of the semantic relation is \"are used for rental\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "passenger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive passenger.\";         A textual example of the semantic relation is \"are used by passengers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "pilot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive pilot.\";         A textual example of the semantic relation is \"are used by pilots\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "dock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can dock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "transport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which transport is interacted with.\";         A textual example of the semantic relation is \"are used for transport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "dock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which dock is interacted with.\";         A textual example of the semantic relation is \"are used for dock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of vehicle related to hypernyms.\";         A textual example of the semantic relation is \"are vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "transportation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of transportation related to hypernyms.\";         A textual example of the semantic relation is \"are transportation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "container",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of container related to hypernyms.\";         A textual example of the semantic relation is \"are container\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "conveyance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of conveyance related to hypernyms.\";         A textual example of the semantic relation is \"are conveyance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "self-propelled vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of self-propelled vehicle related to hypernyms.\";         A textual example of the semantic relation is \"are self-propelled vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "automotive vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of automotive vehicle related to hypernyms.\";         A textual example of the semantic relation is \"are automotive vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "motor vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of motor vehicle related to hypernyms.\";         A textual example of the semantic relation is \"are motor vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "garden tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of garden tool related to hypernyms.\";         A textual example of the semantic relation is \"are garden tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "artifact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of artifact related to hypernyms.\";         A textual example of the semantic relation is \"are artifact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "artefact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of artefact related to hypernyms.\";         A textual example of the semantic relation is \"are artefact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bike related to hypernyms.\";         A textual example of the semantic relation is \"are bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of plane related to hypernyms.\";         A textual example of the semantic relation is \"are plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tool related to hypernyms.\";         A textual example of the semantic relation is \"are tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "bicycle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bicycle related to hypernyms.\";         A textual example of the semantic relation is \"are bicycle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "auto",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of auto related to hypernyms.\";         A textual example of the semantic relation is \"are auto\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "lawn tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lawn tool related to hypernyms.\";         A textual example of the semantic relation is \"are lawn tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "implement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of implement related to hypernyms.\";         A textual example of the semantic relation is \"are implement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of machine related to hypernyms.\";         A textual example of the semantic relation is \"are machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of car related to hypernyms.\";         A textual example of the semantic relation is \"are car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "cycle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cycle related to hypernyms.\";         A textual example of the semantic relation is \"are cycle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "automobile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of automobile related to hypernyms.\";         A textual example of the semantic relation is \"are automobile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "motorcar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of motorcar related to hypernyms.\";         A textual example of the semantic relation is \"are motorcar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "airplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of airplane related to hypernyms.\";         A textual example of the semantic relation is \"are airplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "aeroplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of aeroplane related to hypernyms.\";         A textual example of the semantic relation is \"are aeroplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "public transport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of public transport related to hypernyms.\";         A textual example of the semantic relation is \"are public transport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "wheeled vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wheeled vehicle related to hypernyms.\";         A textual example of the semantic relation is \"are wheeled vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of craft related to hypernyms.\";         A textual example of the semantic relation is \"are craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "grey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of grey.\";         A textual example of the semantic relation is \"can be grey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "grey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of grey.\";         A textual example of the semantic relation is \"can be grey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "blue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of blue.\";         A textual example of the semantic relation is \"can be blue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "blue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of blue.\";         A textual example of the semantic relation is \"can be blue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "glossy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of glossy.\";         A textual example of the semantic relation is \"can be glossy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "shiny",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of shiny.\";         A textual example of the semantic relation is \"can be shiny\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of vessel related to hypernyms.\";         A textual example of the semantic relation is \"are vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "brake",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of brake.\";         A textual example of the semantic relation is \"can have brake\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "light",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of light.\";         A textual example of the semantic relation is \"can have light\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "engine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of engine.\";         A textual example of the semantic relation is \"can have engine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "door",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of door.\";         A textual example of the semantic relation is \"can have door\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seat.\";         A textual example of the semantic relation is \"can have seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "window",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of window.\";         A textual example of the semantic relation is \"can have window\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bonnet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bonnet.\";         A textual example of the semantic relation is \"can have bonnet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "rudder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rudder.\";         A textual example of the semantic relation is \"can have rudder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cowling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cowling.\";         A textual example of the semantic relation is \"can have cowling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "hood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hood.\";         A textual example of the semantic relation is \"can have hood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "tire",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tire.\";         A textual example of the semantic relation is \"can have tire\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "fender",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fender.\";         A textual example of the semantic relation is \"can have fender\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "accelerator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of accelerator.\";         A textual example of the semantic relation is \"can have accelerator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cowl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cowl.\";         A textual example of the semantic relation is \"can have cowl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "frame",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of frame.\";         A textual example of the semantic relation is \"can have frame\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "windshield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of windshield.\";         A textual example of the semantic relation is \"can have windshield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "tail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tail.\";         A textual example of the semantic relation is \"can have tail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "propeller",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of propeller.\";         A textual example of the semantic relation is \"can have propeller\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gear.\";         A textual example of the semantic relation is \"can have gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "tube",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tube.\";         A textual example of the semantic relation is \"can have tube\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bumper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bumper.\";         A textual example of the semantic relation is \"can have bumper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "wing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wing.\";         A textual example of the semantic relation is \"can have wing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "crew",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of crew.\";         A textual example of the semantic relation is \"can have crew\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "fin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fin.\";         A textual example of the semantic relation is \"can have fin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "windshield wiper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of windshield wiper.\";         A textual example of the semantic relation is \"can have windshield wiper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "battery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of battery.\";         A textual example of the semantic relation is \"can have battery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "windlass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of windlass.\";         A textual example of the semantic relation is \"can have windlass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "grille",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of grille.\";         A textual example of the semantic relation is \"can have grille\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "coachwork",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of coachwork.\";         A textual example of the semantic relation is \"can have coachwork\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "rear window",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rear window.\";         A textual example of the semantic relation is \"can have rear window\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "mast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mast.\";         A textual example of the semantic relation is \"can have mast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "after part",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of after part.\";         A textual example of the semantic relation is \"can have after part\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "car window",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of car window.\";         A textual example of the semantic relation is \"can have car window\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "anti-sway bar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of anti-sway bar.\";         A textual example of the semantic relation is \"can have anti-sway bar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bilge well",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bilge well.\";         A textual example of the semantic relation is \"can have bilge well\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "petrol engine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of petrol engine.\";         A textual example of the semantic relation is \"can have petrol engine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "interior",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of interior.\";         A textual example of the semantic relation is \"can have interior\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "top",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of top.\";         A textual example of the semantic relation is \"can have top\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "superstructure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of superstructure.\";         A textual example of the semantic relation is \"can have superstructure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "fuselage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fuselage.\";         A textual example of the semantic relation is \"can have fuselage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "fo'c'sle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fo'c'sle.\";         A textual example of the semantic relation is \"can have fo'c'sle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gyrostabiliser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gyrostabiliser.\";         A textual example of the semantic relation is \"can have gyrostabiliser\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "chain guard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of chain guard.\";         A textual example of the semantic relation is \"can have chain guard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "throttle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of throttle.\";         A textual example of the semantic relation is \"can have throttle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "horn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of horn.\";         A textual example of the semantic relation is \"can have horn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "axle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of axle.\";         A textual example of the semantic relation is \"can have axle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "log",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of log.\";         A textual example of the semantic relation is \"can have log\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "radiator grille",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of radiator grille.\";         A textual example of the semantic relation is \"can have radiator grille\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "hull",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hull.\";         A textual example of the semantic relation is \"can have hull\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cargo deck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cargo deck.\";         A textual example of the semantic relation is \"can have cargo deck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "automobile engine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of automobile engine.\";         A textual example of the semantic relation is \"can have automobile engine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gasoline engine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gasoline engine.\";         A textual example of the semantic relation is \"can have gasoline engine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "dynamo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of dynamo.\";         A textual example of the semantic relation is \"can have dynamo\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "sheet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sheet.\";         A textual example of the semantic relation is \"can have sheet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "fuel pod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fuel pod.\";         A textual example of the semantic relation is \"can have fuel pod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bilge pump",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bilge pump.\";         A textual example of the semantic relation is \"can have bilge pump\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "escape hatch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of escape hatch.\";         A textual example of the semantic relation is \"can have escape hatch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "tack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tack.\";         A textual example of the semantic relation is \"can have tack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "funnel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of funnel.\";         A textual example of the semantic relation is \"can have funnel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "ridge rope",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ridge rope.\";         A textual example of the semantic relation is \"can have ridge rope\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cookhouse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cookhouse.\";         A textual example of the semantic relation is \"can have cookhouse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gas pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gas pedal.\";         A textual example of the semantic relation is \"can have gas pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "sunroof",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sunroof.\";         A textual example of the semantic relation is \"can have sunroof\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "mainsheet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mainsheet.\";         A textual example of the semantic relation is \"can have mainsheet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bunk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bunk.\";         A textual example of the semantic relation is \"can have bunk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "screw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of screw.\";         A textual example of the semantic relation is \"can have screw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "turbine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of turbine.\";         A textual example of the semantic relation is \"can have turbine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gearbox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gearbox.\";         A textual example of the semantic relation is \"can have gearbox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "high gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of high gear.\";         A textual example of the semantic relation is \"can have high gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "buffer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of buffer.\";         A textual example of the semantic relation is \"can have buffer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "anchor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of anchor.\";         A textual example of the semantic relation is \"can have anchor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "third gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of third gear.\";         A textual example of the semantic relation is \"can have third gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "first gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of first gear.\";         A textual example of the semantic relation is \"can have first gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "sprocket wheel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sprocket wheel.\";         A textual example of the semantic relation is \"can have sprocket wheel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "reverse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of reverse.\";         A textual example of the semantic relation is \"can have reverse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "glove compartment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of glove compartment.\";         A textual example of the semantic relation is \"can have glove compartment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "topside",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of topside.\";         A textual example of the semantic relation is \"can have topside\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "skeletal frame",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of skeletal frame.\";         A textual example of the semantic relation is \"can have skeletal frame\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "drogue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of drogue.\";         A textual example of the semantic relation is \"can have drogue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "stabilizer bar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stabilizer bar.\";         A textual example of the semantic relation is \"can have stabilizer bar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "auto accessory",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of auto accessory.\";         A textual example of the semantic relation is \"can have auto accessory\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "box",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of box.\";         A textual example of the semantic relation is \"can have box\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "handlebar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handlebar.\";         A textual example of the semantic relation is \"can have handlebar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "radio",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of radio.\";         A textual example of the semantic relation is \"can have radio\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "poop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of poop.\";         A textual example of the semantic relation is \"can have poop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "rope",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rope.\";         A textual example of the semantic relation is \"can have rope\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bicycle wheel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bicycle wheel.\";         A textual example of the semantic relation is \"can have bicycle wheel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "riding bitt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of riding bitt.\";         A textual example of the semantic relation is \"can have riding bitt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "keel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of keel.\";         A textual example of the semantic relation is \"can have keel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "car mirror",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of car mirror.\";         A textual example of the semantic relation is \"can have car mirror\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "floorboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of floorboard.\";         A textual example of the semantic relation is \"can have floorboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "low",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of low.\";         A textual example of the semantic relation is \"can have low\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "air bag",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of air bag.\";         A textual example of the semantic relation is \"can have air bag\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "steering wheel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of steering wheel.\";         A textual example of the semantic relation is \"can have steering wheel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "car seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of car seat.\";         A textual example of the semantic relation is \"can have car seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cargo hold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cargo hold.\";         A textual example of the semantic relation is \"can have cargo hold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "landing gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of landing gear.\";         A textual example of the semantic relation is \"can have landing gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "number plate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of number plate.\";         A textual example of the semantic relation is \"can have number plate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "running board",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of running board.\";         A textual example of the semantic relation is \"can have running board\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "mudguard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mudguard.\";         A textual example of the semantic relation is \"can have mudguard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "sprocket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sprocket.\";         A textual example of the semantic relation is \"can have sprocket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gun",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gun.\";         A textual example of the semantic relation is \"can have gun\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "hold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hold.\";         A textual example of the semantic relation is \"can have hold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "nose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of nose.\";         A textual example of the semantic relation is \"can have nose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "spoke",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spoke.\";         A textual example of the semantic relation is \"can have spoke\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "saddle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of saddle.\";         A textual example of the semantic relation is \"can have saddle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "basket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of basket.\";         A textual example of the semantic relation is \"can have basket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "high",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of high.\";         A textual example of the semantic relation is \"can have high\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "antenna",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of antenna.\";         A textual example of the semantic relation is \"can have antenna\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "ratlin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ratlin.\";         A textual example of the semantic relation is \"can have ratlin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "deck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of deck.\";         A textual example of the semantic relation is \"can have deck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "pod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pod.\";         A textual example of the semantic relation is \"can have pod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cockpit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cockpit.\";         A textual example of the semantic relation is \"can have cockpit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "mirror",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mirror.\";         A textual example of the semantic relation is \"can have mirror\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "taillight",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of taillight.\";         A textual example of the semantic relation is \"can have taillight\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "wiper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wiper.\";         A textual example of the semantic relation is \"can have wiper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "dashboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of dashboard.\";         A textual example of the semantic relation is \"can have dashboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "ratline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ratline.\";         A textual example of the semantic relation is \"can have ratline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "railing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of railing.\";         A textual example of the semantic relation is \"can have railing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "headlight",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of headlight.\";         A textual example of the semantic relation is \"can have headlight\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cabin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cabin.\";         A textual example of the semantic relation is \"can have cabin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "low gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of low gear.\";         A textual example of the semantic relation is \"can have low gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "underframe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of underframe.\";         A textual example of the semantic relation is \"can have underframe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "winch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of winch.\";         A textual example of the semantic relation is \"can have winch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "sunshine-roof",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sunshine-roof.\";         A textual example of the semantic relation is \"can have sunshine-roof\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bulwark",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bulwark.\";         A textual example of the semantic relation is \"can have bulwark\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pedal.\";         A textual example of the semantic relation is \"can have pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "screw propeller",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of screw propeller.\";         A textual example of the semantic relation is \"can have screw propeller\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "reverse gear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of reverse gear.\";         A textual example of the semantic relation is \"can have reverse gear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "skeleton",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of skeleton.\";         A textual example of the semantic relation is \"can have skeleton\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "chain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of chain.\";         A textual example of the semantic relation is \"can have chain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "radar dome",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of radar dome.\";         A textual example of the semantic relation is \"can have radar dome\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "roof",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of roof.\";         A textual example of the semantic relation is \"can have roof\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "seat belt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seat belt.\";         A textual example of the semantic relation is \"can have seat belt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "black box",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of black box.\";         A textual example of the semantic relation is \"can have black box\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "lubber's hole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lubber's hole.\";         A textual example of the semantic relation is \"can have lubber's hole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "engine room",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of engine room.\";         A textual example of the semantic relation is \"can have engine room\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "quarter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of quarter.\";         A textual example of the semantic relation is \"can have quarter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "porthole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of porthole.\";         A textual example of the semantic relation is \"can have porthole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "car door",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of car door.\";         A textual example of the semantic relation is \"can have car door\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "radome",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of radome.\";         A textual example of the semantic relation is \"can have radome\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "spar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spar.\";         A textual example of the semantic relation is \"can have spar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "ship's galley",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ship's galley.\";         A textual example of the semantic relation is \"can have ship's galley\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "oil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of oil.\";         A textual example of the semantic relation is \"can have oil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "coaster brake",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of coaster brake.\";         A textual example of the semantic relation is \"can have coaster brake\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "caboose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of caboose.\";         A textual example of the semantic relation is \"can have caboose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "davit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of davit.\";         A textual example of the semantic relation is \"can have davit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "lifeboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lifeboat.\";         A textual example of the semantic relation is \"can have lifeboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bulkhead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bulkhead.\";         A textual example of the semantic relation is \"can have bulkhead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "interior",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of interior.\";         A textual example of the semantic relation is \"can have interior\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "sea anchor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sea anchor.\";         A textual example of the semantic relation is \"can have sea anchor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "stern",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stern.\";         A textual example of the semantic relation is \"can have stern\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "weather sheet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of weather sheet.\";         A textual example of the semantic relation is \"can have weather sheet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "third",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of third.\";         A textual example of the semantic relation is \"can have third\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "crow's nest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of crow's nest.\";         A textual example of the semantic relation is \"can have crow's nest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of water.\";         A textual example of the semantic relation is \"can have water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "shroud",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shroud.\";         A textual example of the semantic relation is \"can have shroud\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "helm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of helm.\";         A textual example of the semantic relation is \"can have helm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gyrostabilizer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gyrostabilizer.\";         A textual example of the semantic relation is \"can have gyrostabilizer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "forecastle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of forecastle.\";         A textual example of the semantic relation is \"can have forecastle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "tailfin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tailfin.\";         A textual example of the semantic relation is \"can have tailfin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "storage area",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of storage area.\";         A textual example of the semantic relation is \"can have storage area\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "navigation light",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of navigation light.\";         A textual example of the semantic relation is \"can have navigation light\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "accelerator pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of accelerator pedal.\";         A textual example of the semantic relation is \"can have accelerator pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "trunk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of trunk.\";         A textual example of the semantic relation is \"can have trunk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "first",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of first.\";         A textual example of the semantic relation is \"can have first\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "bay",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bay.\";         A textual example of the semantic relation is \"can have bay\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "kickstand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of kickstand.\";         A textual example of the semantic relation is \"can have kickstand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "tail fin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tail fin.\";         A textual example of the semantic relation is \"can have tail fin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "cargo area",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cargo area.\";         A textual example of the semantic relation is \"can have cargo area\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "aircraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of aircraft related to hypernyms.\";         A textual example of the semantic relation is \"are aircraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "heavier-than-air craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of heavier-than-air craft related to hypernyms.\";         A textual example of the semantic relation is \"are heavier-than-air craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "wheel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wheel.\";         A textual example of the semantic relation is \"can have wheel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "movement",
        "value": "pilot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can pilot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Boeing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Boeing in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Boeing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Antonov",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Antonov in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Antonov\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "racing bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of racing bike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are racing bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "city car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of city car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are city car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pickup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pickup in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pickup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "attack aircraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of attack aircraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are attack aircraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "vintage car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of vintage car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are vintage car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "amphibian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of amphibian in terms of their hyponyms.\";         A textual example of the semantic relation is \"are amphibian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bomber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bomber in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bomber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fighter aircraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fighter aircraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fighter aircraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "seaplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of seaplane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are seaplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "micro car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of micro car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are micro car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "monoplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of monoplane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are monoplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "delta wing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of delta wing in terms of their hyponyms.\";         A textual example of the semantic relation is \"are delta wing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "reconnaissance plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of reconnaissance plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are reconnaissance plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fighter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fighter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fighter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cabriolet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cabriolet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cabriolet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "amphibious aircraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of amphibious aircraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are amphibious aircraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "SUV",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of SUV in terms of their hyponyms.\";         A textual example of the semantic relation is \"are SUV\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "multiengine plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of multiengine plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are multiengine plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "airbus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of airbus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are airbus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sedan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sedan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sedan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "propeller plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of propeller plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are propeller plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "racing car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of racing car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are racing car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hangar queen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hangar queen in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hangar queen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hydroplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hydroplane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hydroplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "biplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of biplane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are biplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ski-plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ski-plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ski-plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tanker plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tanker plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tanker plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "multiengine airplane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of multiengine airplane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are multiengine airplane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "lorry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lorry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lorry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "airliner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of airliner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are airliner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tender",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tender in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tender\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "iceboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of iceboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are iceboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "shrimper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of shrimper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shrimper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "dozer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of dozer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dozer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "gas guzzler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of gas guzzler in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gas guzzler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "small boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of small boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are small boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tugboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tugboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tugboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ballistic capsule",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ballistic capsule in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ballistic capsule\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cruiser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cruiser in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cruiser\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "horseless carriage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of horseless carriage in terms of their hyponyms.\";         A textual example of the semantic relation is \"are horseless carriage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "spacecraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of spacecraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are spacecraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pilot boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pilot boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pilot boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "milk wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of milk wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are milk wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "transporter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of transporter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are transporter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pirate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pirate in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pirate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "articulated lorry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of articulated lorry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are articulated lorry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "heap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of heap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are heap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "school bus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of school bus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are school bus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bareboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bareboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bareboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hoy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hoy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hoy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bicycle-built-for-two",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bicycle-built-for-two in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bicycle-built-for-two\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "electric automobile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of electric automobile in terms of their hyponyms.\";         A textual example of the semantic relation is \"are electric automobile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sister ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sister ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sister ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "turbofan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of turbofan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are turbofan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "slave ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of slave ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slave ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "whaler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of whaler in terms of their hyponyms.\";         A textual example of the semantic relation is \"are whaler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pickup truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pickup truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pickup truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "trolley coach",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of trolley coach in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trolley coach\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "covered wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of covered wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are covered wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jet plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jet plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jet plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "flagship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of flagship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flagship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "river boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of river boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are river boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "blockade-runner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of blockade-runner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blockade-runner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "punt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of punt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are punt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "supply ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of supply ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are supply ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "landrover",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of landrover in terms of their hyponyms.\";         A textual example of the semantic relation is \"are landrover\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "racing yacht",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of racing yacht in terms of their hyponyms.\";         A textual example of the semantic relation is \"are racing yacht\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "convertible",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of convertible in terms of their hyponyms.\";         A textual example of the semantic relation is \"are convertible\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "camion",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of camion in terms of their hyponyms.\";         A textual example of the semantic relation is \"are camion\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "safety bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of safety bike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are safety bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "trackless trolley",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of trackless trolley in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trackless trolley\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "rig",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of rig in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rig\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jalopy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jalopy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jalopy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bulldozer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bulldozer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bulldozer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "dump truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of dump truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dump truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ferry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ferry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ferry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Conestoga wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Conestoga wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Conestoga wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jetliner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jetliner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jetliner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "blimp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of blimp in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blimp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "two-seater",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of two-seater in terms of their hyponyms.\";         A textual example of the semantic relation is \"are two-seater\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "stock car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of stock car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stock car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sled",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sled in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sled\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "mountain bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of mountain bike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mountain bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tandem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tandem in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tandem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "abandoned ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of abandoned ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are abandoned ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "loaner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of loaner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are loaner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fireboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fireboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fireboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minesweeper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minesweeper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minesweeper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cruise missile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cruise missile in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cruise missile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "troopship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of troopship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are troopship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fan-jet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fan-jet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fan-jet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sailing ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sailing ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sailing ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "mackinaw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of mackinaw in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mackinaw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "police cruiser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of police cruiser in terms of their hyponyms.\";         A textual example of the semantic relation is \"are police cruiser\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bogy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bogy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bogy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "angledozer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of angledozer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are angledozer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "subcompact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of subcompact in terms of their hyponyms.\";         A textual example of the semantic relation is \"are subcompact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fanjet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fanjet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fanjet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tourer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tourer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tourer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "coupe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of coupe in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coupe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "gondola",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of gondola in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gondola\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "dumper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of dumper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dumper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tower in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tower\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ice-wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ice-wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ice-wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "safety bicycle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of safety bicycle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are safety bicycle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "gas-turbine ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of gas-turbine ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gas-turbine ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "three-decker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of three-decker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are three-decker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "packet boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of packet boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are packet boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "motor mower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of motor mower in terms of their hyponyms.\";         A textual example of the semantic relation is \"are motor mower\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "landing craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of landing craft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are landing craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "runabout",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of runabout in terms of their hyponyms.\";         A textual example of the semantic relation is \"are runabout\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pinnace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pinnace in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pinnace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "scrambler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of scrambler in terms of their hyponyms.\";         A textual example of the semantic relation is \"are scrambler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "motorbike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of motorbike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are motorbike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "turbojet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of turbojet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are turbojet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "flatboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of flatboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flatboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hardtop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hardtop in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hardtop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minelayer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minelayer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minelayer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tipper truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tipper truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tipper truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minibus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minibus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minibus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "wain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wain in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "skibob",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of skibob in terms of their hyponyms.\";         A textual example of the semantic relation is \"are skibob\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cruise ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cruise ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cruise ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bandwagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bandwagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bandwagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "phaeton",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of phaeton in terms of their hyponyms.\";         A textual example of the semantic relation is \"are phaeton\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "touring car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of touring car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are touring car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "patrol car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of patrol car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are patrol car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sledge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sledge in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sledge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tip truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tip truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tip truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "shuttle helicopter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of shuttle helicopter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shuttle helicopter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fishing vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fishing vessel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fishing vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tug in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ice yacht",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ice yacht in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ice yacht\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sea boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sea boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sea boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ambulance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ambulance in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ambulance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "rocket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of rocket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are rocket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "passenger ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of passenger ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are passenger ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "whaling ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of whaling ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are whaling ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "patrol boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of patrol boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are patrol boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "treasure ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of treasure ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are treasure ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "steamship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of steamship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are steamship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bumboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bumboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bumboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minivan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minivan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minivan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sound truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sound truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sound truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ice wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ice wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ice wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minibike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minibike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minibike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Stanley Steamer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Stanley Steamer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Stanley Steamer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "prairie schooner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of prairie schooner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prairie schooner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "school ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of school ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are school ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "road roller",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of road roller in terms of their hyponyms.\";         A textual example of the semantic relation is \"are road roller\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "push-bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of push-bike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are push-bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hatchback",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hatchback in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hatchback\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tow truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tow truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tow truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "lugger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lugger in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lugger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bogie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bogie in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bogie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "van",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of van in terms of their hyponyms.\";         A textual example of the semantic relation is \"are van\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "narrow boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of narrow boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are narrow boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cart",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cart in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cart\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tandem bicycle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tandem bicycle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tandem bicycle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "small ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of small ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are small ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "squad car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of squad car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are squad car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tipper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tipper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tipper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "power mower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of power mower in terms of their hyponyms.\";         A textual example of the semantic relation is \"are power mower\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "skidder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of skidder in terms of their hyponyms.\";         A textual example of the semantic relation is \"are skidder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jumbo jet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jumbo jet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jumbo jet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "single-rotor helicopter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of single-rotor helicopter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are single-rotor helicopter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sleigh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sleigh in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sleigh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "shipwreck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of shipwreck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shipwreck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "garbage truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of garbage truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are garbage truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Conestoga",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Conestoga in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Conestoga\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pedicab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pedicab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pedicab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "semi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of semi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are semi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "police car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of police car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are police car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ordinary",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ordinary in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ordinary\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fire truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fire truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fire truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "subcompact car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of subcompact car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are subcompact car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "electric",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of electric in terms of their hyponyms.\";         A textual example of the semantic relation is \"are electric\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "compact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of compact in terms of their hyponyms.\";         A textual example of the semantic relation is \"are compact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "trailer truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of trailer truck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trailer truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hospital ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hospital ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hospital ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "horsecar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of horsecar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are horsecar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jet-propelled plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jet-propelled plane in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jet-propelled plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "dirt bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of dirt bike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dirt bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "mail boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of mail boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mail boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "powerboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of powerboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are powerboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jumbojet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jumbojet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jumbojet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "junk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of junk in terms of their hyponyms.\";         A textual example of the semantic relation is \"are junk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "stealth aircraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of stealth aircraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stealth aircraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "water waggon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of water waggon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are water waggon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bogey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bogey in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bogey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "used-car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of used-car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are used-car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "jeep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of jeep in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jeep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tractor trailer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tractor trailer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tractor trailer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tipper lorry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tipper lorry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tipper lorry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "scow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of scow in terms of their hyponyms.\";         A textual example of the semantic relation is \"are scow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "lighter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lighter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lighter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ship's boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ship's boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ship's boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pace car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pace car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pace car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sport car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sport car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sport car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "towboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of towboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are towboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Model T",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Model T in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Model T\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "canal boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of canal boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are canal boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "scooter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of scooter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are scooter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ferryboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ferryboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ferryboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "trucking rig",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of trucking rig in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trucking rig\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "icebreaker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of icebreaker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are icebreaker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "car transporter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of car transporter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are car transporter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "weather ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of weather ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are weather ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "trail bike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of trail bike in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trail bike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "barrage balloon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of barrage balloon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barrage balloon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "longboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of longboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are longboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "pirate ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of pirate ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pirate ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "packet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of packet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are packet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "projectile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of projectile in terms of their hyponyms.\";         A textual example of the semantic relation is \"are projectile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "yacht",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of yacht in terms of their hyponyms.\";         A textual example of the semantic relation is \"are yacht\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minicab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minicab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minicab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hand mower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hand mower in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hand mower\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "motorboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of motorboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are motorboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sausage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sausage in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sausage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "compact car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of compact car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are compact car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "chuck wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of chuck wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chuck wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "limo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of limo in terms of their hyponyms.\";         A textual example of the semantic relation is \"are limo\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "surfboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of surfboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are surfboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hot rod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hot rod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hot rod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "mailboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of mailboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mailboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "minicar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of minicar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are minicar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "training ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of training ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are training ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ark",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ark in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ark\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "taxicab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of taxicab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are taxicab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cycle rickshaw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cycle rickshaw in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cycle rickshaw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tow car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tow car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tow car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sausage balloon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sausage balloon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sausage balloon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "transport ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of transport ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are transport ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "steamer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of steamer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are steamer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "twinjet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of twinjet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are twinjet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "skyhook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of skyhook in terms of their hyponyms.\";         A textual example of the semantic relation is \"are skyhook\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "velocipede",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of velocipede in terms of their hyponyms.\";         A textual example of the semantic relation is \"are velocipede\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hovercraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hovercraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hovercraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ordinary bicycle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ordinary bicycle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ordinary bicycle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hulk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hulk in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hulk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Mackinaw boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Mackinaw boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Mackinaw boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "Dodgem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of Dodgem in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Dodgem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "guard boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of guard boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are guard boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sailing vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sailing vessel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sailing vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "space vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of space vehicle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are space vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "limousine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of limousine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are limousine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "patrol ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of patrol ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are patrol ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "bumper car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of bumper car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bumper car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "nuclear-powered ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of nuclear-powered ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nuclear-powered ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tramcar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tramcar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tramcar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "prairie wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of prairie wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prairie wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "roadster",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of roadster in terms of their hyponyms.\";         A textual example of the semantic relation is \"are roadster\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tram",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tram in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tram\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "taxi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of taxi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are taxi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cargo ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cargo ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cargo ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "wreck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wreck in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wreck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fishing boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fishing boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fishing boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "sports car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of sports car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sports car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "gypsy cab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of gypsy cab in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gypsy cab\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "narrowboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of narrowboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are narrowboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "trolleybus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of trolleybus in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trolleybus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cargo helicopter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cargo helicopter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cargo helicopter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cargo vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cargo vessel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cargo vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "steamboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of steamboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are steamboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "electric car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of electric car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are electric car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "water wagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of water wagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are water wagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fishing smack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fishing smack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fishing smack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "milkwagon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of milkwagon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are milkwagon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "prowl car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of prowl car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are prowl car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "barge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of barge in terms of their hyponyms.\";         A textual example of the semantic relation is \"are barge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "merchant ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of merchant ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are merchant ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "secondhand car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of secondhand car in terms of their hyponyms.\";         A textual example of the semantic relation is \"are secondhand car\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "gunboat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of gunboat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gunboat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "lightship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lightship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lightship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ground-effect machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ground-effect machine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ground-effect machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "derelict",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of derelict in terms of their hyponyms.\";         A textual example of the semantic relation is \"are derelict\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "cutter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of cutter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cutter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "police boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of police boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are police boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "hot-rod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of hot-rod in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hot-rod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "dustcart",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of dustcart in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dustcart\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "fire engine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of fire engine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fire engine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "wrecker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wrecker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wrecker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "steamroller",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of steamroller in terms of their hyponyms.\";         A textual example of the semantic relation is \"are steamroller\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "place",
        "value": "rental",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the entities in which rental can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in rentals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "lighter-than-air craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lighter-than-air craft related to hypernyms.\";         A textual example of the semantic relation is \"are lighter-than-air craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "combat ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of combat ship related to hypernyms.\";         A textual example of the semantic relation is \"are combat ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "tractor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tractor related to hypernyms.\";         A textual example of the semantic relation is \"are tractor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "warship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of warship related to hypernyms.\";         A textual example of the semantic relation is \"are warship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "watercraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of watercraft related to hypernyms.\";         A textual example of the semantic relation is \"are watercraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ship related to hypernyms.\";         A textual example of the semantic relation is \"are ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "war vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of war vessel related to hypernyms.\";         A textual example of the semantic relation is \"are war vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "military vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of military vehicle related to hypernyms.\";         A textual example of the semantic relation is \"are military vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "purpose",
        "value": "passenger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All of the purposes for which passenger is interacted with.\";         A textual example of the semantic relation is \"are used for passenger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of boat.\";         A textual example of the semantic relation is \"can have boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "transport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of transport related to hypernyms.\";         A textual example of the semantic relation is \"are transport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "user",
        "value": "farm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive farm.\";         A textual example of the semantic relation is \"are used by farms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "galley",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of galley in terms of their hyponyms.\";         A textual example of the semantic relation is \"are galley\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "galley",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of galley.\";         A textual example of the semantic relation is \"can have galley\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "lighter-than-air craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of lighter-than-air craft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lighter-than-air craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "combat ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of combat ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are combat ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "warship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of warship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are warship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "watercraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of watercraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are watercraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "military vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of military vehicle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are military vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "ship",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of ship in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ship\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "war vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of war vessel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are war vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "boat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of boat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are boat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "tractor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of tractor in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tractor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "part",
        "value": "gas",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gas.\";         A textual example of the semantic relation is \"can have gas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "generalization",
        "value": "wheel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wheel related to hypernyms.\";         A textual example of the semantic relation is \"are wheel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "heavier-than-air craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of heavier-than-air craft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are heavier-than-air craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "aircraft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of aircraft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are aircraft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of vessel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "craft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of craft in terms of their hyponyms.\";         A textual example of the semantic relation is \"are craft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "vehicles",
        "slot": "specialization",
        "value": "wheeled vehicle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"vehicles\";         The returned words must satisfy the semantic relation \"Classification of wheeled vehicle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wheeled vehicle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "size",
        "value": "tall",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Size of tall.\";         A textual example of the semantic relation is \"can be tall\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "size",
        "value": "short",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Size of short.\";         A textual example of the semantic relation is \"can be short\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "time",
        "value": "winter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the entries which link winter with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during winter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "time",
        "value": "summer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the entries which link summer with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during summer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "place",
        "value": "outdoors",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the entities in which outdoors can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in outdoorss\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "place",
        "value": "hospital",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the entities in which hospital can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in hospitals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "place",
        "value": "surgery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the entities in which surgery can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in surgeries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "waist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with waist.\";         A textual example of the semantic relation is \"can have or be used with waist\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "neck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with neck.\";         A textual example of the semantic relation is \"can have or be used with neck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "head",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with head.\";         A textual example of the semantic relation is \"can have or be used with head\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "ankle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with ankle.\";         A textual example of the semantic relation is \"can have or be used with ankle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "calf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with calf.\";         A textual example of the semantic relation is \"can have or be used with calf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "foot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with foot.\";         A textual example of the semantic relation is \"can have or be used with foot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "knee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with knee.\";         A textual example of the semantic relation is \"can have or be used with knee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "throat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with throat.\";         A textual example of the semantic relation is \"can have or be used with throat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "shape",
        "value": "rectangular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Form of rectangular.\";         A textual example of the semantic relation is \"can be rectangular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with leg.\";         A textual example of the semantic relation is \"can have or be used with leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "bodyPart",
        "value": "hand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with hand.\";         A textual example of the semantic relation is \"can have or be used with hand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "protect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which protect is interacted with.\";         A textual example of the semantic relation is \"are used to protect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "warmth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which warmth is interacted with.\";         A textual example of the semantic relation is \"are used for warmth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "pair",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which pair is interacted with.\";         A textual example of the semantic relation is \"are used for pair\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "riding",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which riding is interacted with.\";         A textual example of the semantic relation is \"are used for riding\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "hygiene",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which hygiene is interacted with.\";         A textual example of the semantic relation is \"are used for hygiene\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "work",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which work is interacted with.\";         A textual example of the semantic relation is \"are used for work\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "gardening",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which gardening is interacted with.\";         A textual example of the semantic relation is \"are used for gardening\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "run",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which run is interacted with.\";         A textual example of the semantic relation is \"are used to run\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "tie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which tie is interacted with.\";         A textual example of the semantic relation is \"are used to tie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "ride",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which ride is interacted with.\";         A textual example of the semantic relation is \"are used to ride\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "ride",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which ride is interacted with.\";         A textual example of the semantic relation is \"are used for ride\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "walk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which walk is interacted with.\";         A textual example of the semantic relation is \"are used to walk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "woman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive woman.\";         A textual example of the semantic relation is \"are used by women\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "man",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive man.\";         A textual example of the semantic relation is \"are used by men\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "horseman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive horseman.\";         A textual example of the semantic relation is \"are used by horsemen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "gardener",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive gardener.\";         A textual example of the semantic relation is \"are used by gardeners\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "doctor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive doctor.\";         A textual example of the semantic relation is \"are used by doctors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "surgeon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive surgeon.\";         A textual example of the semantic relation is \"are used by surgeons\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "workman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive workman.\";         A textual example of the semantic relation is \"are used by workmen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "men",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive men.\";         A textual example of the semantic relation is \"are used by mens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "catcher",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive catcher.\";         A textual example of the semantic relation is \"are used by catchers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "goalkeeper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive goalkeeper.\";         A textual example of the semantic relation is \"are used by goalkeepers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "soldier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive soldier.\";         A textual example of the semantic relation is \"are used by soldiers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "falconer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive falconer.\";         A textual example of the semantic relation is \"are used by falconers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "women",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive women.\";         A textual example of the semantic relation is \"are used by womens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "baseman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive baseman.\";         A textual example of the semantic relation is \"are used by basemen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "fielder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive fielder.\";         A textual example of the semantic relation is \"are used by fielders\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "cowboy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cowboy.\";         A textual example of the semantic relation is \"are used by cowboys\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "user",
        "value": "lady",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive lady.\";         A textual example of the semantic relation is \"are used by ladies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "purpose",
        "value": "disposable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All of the purposes for which disposable is interacted with.\";         A textual example of the semantic relation is \"are used for disposable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "shape",
        "value": "hand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Form of hand.\";         A textual example of the semantic relation is \"can be hand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "cotton",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which cotton is composed.\";         A textual example of the semantic relation is \"can be made of cotton\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "wool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which wool is composed.\";         A textual example of the semantic relation is \"can be made of wool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "leather",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which leather is composed.\";         A textual example of the semantic relation is \"can be made of leather\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "linen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which linen is composed.\";         A textual example of the semantic relation is \"can be made of linen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "silk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which silk is composed.\";         A textual example of the semantic relation is \"can be made of silk\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "polyester",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which polyester is composed.\";         A textual example of the semantic relation is \"can be made of polyester\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "viscose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which viscose is composed.\";         A textual example of the semantic relation is \"can be made of viscose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "nylon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which nylon is composed.\";         A textual example of the semantic relation is \"can be made of nylon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "suede",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which suede is composed.\";         A textual example of the semantic relation is \"can be made of suede\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "fabric",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which fabric is composed.\";         A textual example of the semantic relation is \"can be made of fabric\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "cloth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which cloth is composed.\";         A textual example of the semantic relation is \"can be made of cloth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "felt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which felt is composed.\";         A textual example of the semantic relation is \"can be made of felt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "velvet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which velvet is composed.\";         A textual example of the semantic relation is \"can be made of velvet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "rubber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which rubber is composed.\";         A textual example of the semantic relation is \"can be made of rubber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "fleece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which fleece is composed.\";         A textual example of the semantic relation is \"can be made of fleece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "chiffon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which chiffon is composed.\";         A textual example of the semantic relation is \"can be made of chiffon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "straw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which straw is composed.\";         A textual example of the semantic relation is \"can be made of straw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "sheepskin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which sheepskin is composed.\";         A textual example of the semantic relation is \"can be made of sheepskin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "cashmere",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which cashmere is composed.\";         A textual example of the semantic relation is \"can be made of cashmere\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "latex",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which latex is composed.\";         A textual example of the semantic relation is \"can be made of latex\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "tongue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tongue.\";         A textual example of the semantic relation is \"can have tongue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "hem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hem.\";         A textual example of the semantic relation is \"can have hem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "heel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of heel.\";         A textual example of the semantic relation is \"can have heel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "seam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seam.\";         A textual example of the semantic relation is \"can have seam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "button",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of button.\";         A textual example of the semantic relation is \"can have button\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "sole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sole.\";         A textual example of the semantic relation is \"can have sole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "fur",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fur.\";         A textual example of the semantic relation is \"can have fur\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "upper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of upper.\";         A textual example of the semantic relation is \"can have upper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "pocket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pocket.\";         A textual example of the semantic relation is \"can have pocket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "zip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of zip.\";         A textual example of the semantic relation is \"can have zip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "waistband",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of waistband.\";         A textual example of the semantic relation is \"can have waistband\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "strap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of strap.\";         A textual example of the semantic relation is \"can have strap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "collar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of collar.\";         A textual example of the semantic relation is \"can have collar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "visor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of visor.\";         A textual example of the semantic relation is \"can have visor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "belt loop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of belt loop.\";         A textual example of the semantic relation is \"can have belt loop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "neckline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of neckline.\";         A textual example of the semantic relation is \"can have neckline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "hemline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hemline.\";         A textual example of the semantic relation is \"can have hemline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "outsole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of outsole.\";         A textual example of the semantic relation is \"can have outsole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "insole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of insole.\";         A textual example of the semantic relation is \"can have insole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "toecap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toecap.\";         A textual example of the semantic relation is \"can have toecap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "trouser leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of trouser leg.\";         A textual example of the semantic relation is \"can have trouser leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "toe box",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toe box.\";         A textual example of the semantic relation is \"can have toe box\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shoe collar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shoe collar.\";         A textual example of the semantic relation is \"can have shoe collar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "instep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of instep.\";         A textual example of the semantic relation is \"can have instep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shirtfront",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shirtfront.\";         A textual example of the semantic relation is \"can have shirtfront\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seat.\";         A textual example of the semantic relation is \"can have seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "counter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of counter.\";         A textual example of the semantic relation is \"can have counter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "trouser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of trouser.\";         A textual example of the semantic relation is \"can have trouser\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "innersole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of innersole.\";         A textual example of the semantic relation is \"can have innersole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "lap covering",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lap covering.\";         A textual example of the semantic relation is \"can have lap covering\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "hip pocket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hip pocket.\";         A textual example of the semantic relation is \"can have hip pocket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "heel counter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of heel counter.\";         A textual example of the semantic relation is \"can have heel counter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "trouser cuff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of trouser cuff.\";         A textual example of the semantic relation is \"can have trouser cuff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "lap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lap.\";         A textual example of the semantic relation is \"can have lap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "pant leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pant leg.\";         A textual example of the semantic relation is \"can have pant leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "sunburst pleat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sunburst pleat.\";         A textual example of the semantic relation is \"can have sunburst pleat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shirtsleeve",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shirtsleeve.\";         A textual example of the semantic relation is \"can have shirtsleeve\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "finger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of finger.\";         A textual example of the semantic relation is \"can have finger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "toe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toe.\";         A textual example of the semantic relation is \"can have toe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "sleeve",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sleeve.\";         A textual example of the semantic relation is \"can have sleeve\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "half sole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of half sole.\";         A textual example of the semantic relation is \"can have half sole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "brim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of brim.\";         A textual example of the semantic relation is \"can have brim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shoelace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shoelace.\";         A textual example of the semantic relation is \"can have shoelace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "sunray pleat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sunray pleat.\";         A textual example of the semantic relation is \"can have sunray pleat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shoe string",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shoe string.\";         A textual example of the semantic relation is \"can have shoe string\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "bodice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bodice.\";         A textual example of the semantic relation is \"can have bodice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "neckband",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of neckband.\";         A textual example of the semantic relation is \"can have neckband\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shoestring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shoestring.\";         A textual example of the semantic relation is \"can have shoestring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shirt button",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shirt button.\";         A textual example of the semantic relation is \"can have shirt button\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "dickey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of dickey.\";         A textual example of the semantic relation is \"can have dickey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "spike",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spike.\";         A textual example of the semantic relation is \"can have spike\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "eyehole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of eyehole.\";         A textual example of the semantic relation is \"can have eyehole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "saddle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of saddle.\";         A textual example of the semantic relation is \"can have saddle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "bootleg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bootleg.\";         A textual example of the semantic relation is \"can have bootleg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "pleat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pleat.\";         A textual example of the semantic relation is \"can have pleat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "spur",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spur.\";         A textual example of the semantic relation is \"can have spur\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "bootlace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bootlace.\";         A textual example of the semantic relation is \"can have bootlace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "box pleat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of box pleat.\";         A textual example of the semantic relation is \"can have box pleat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shoe lace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shoe lace.\";         A textual example of the semantic relation is \"can have shoe lace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "eyelet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of eyelet.\";         A textual example of the semantic relation is \"can have eyelet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "ruffle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ruffle.\";         A textual example of the semantic relation is \"can have ruffle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "buckle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of buckle.\";         A textual example of the semantic relation is \"can have buckle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shirting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shirting.\";         A textual example of the semantic relation is \"can have shirting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "lacing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lacing.\";         A textual example of the semantic relation is \"can have lacing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "earlap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of earlap.\";         A textual example of the semantic relation is \"can have earlap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "hatband",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hatband.\";         A textual example of the semantic relation is \"can have hatband\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "earflap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of earflap.\";         A textual example of the semantic relation is \"can have earflap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "crown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of crown.\";         A textual example of the semantic relation is \"can have crown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "thumb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of thumb.\";         A textual example of the semantic relation is \"can have thumb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "kick pleat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of kick pleat.\";         A textual example of the semantic relation is \"can have kick pleat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "dickie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of dickie.\";         A textual example of the semantic relation is \"can have dickie\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "dicky",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of dicky.\";         A textual example of the semantic relation is \"can have dicky\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "placket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of placket.\";         A textual example of the semantic relation is \"can have placket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "shirttail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shirttail.\";         A textual example of the semantic relation is \"can have shirttail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "gad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gad.\";         A textual example of the semantic relation is \"can have gad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "lace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which lace is composed.\";         A textual example of the semantic relation is \"can be made of lace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which coat is composed.\";         A textual example of the semantic relation is \"can be made of coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "garment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of garment related to hypernyms.\";         A textual example of the semantic relation is \"are garment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "clothing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of clothing related to hypernyms.\";         A textual example of the semantic relation is \"are clothing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "covering",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of covering related to hypernyms.\";         A textual example of the semantic relation is \"are covering\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "consumer goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of consumer goods related to hypernyms.\";         A textual example of the semantic relation is \"are consumer goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "footwear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of footwear related to hypernyms.\";         A textual example of the semantic relation is \"are footwear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "vesture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of vesture related to hypernyms.\";         A textual example of the semantic relation is \"are vesture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "article of clothing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of article of clothing related to hypernyms.\";         A textual example of the semantic relation is \"are article of clothing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "wearable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of wearable related to hypernyms.\";         A textual example of the semantic relation is \"are wearable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "habiliment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of habiliment related to hypernyms.\";         A textual example of the semantic relation is \"are habiliment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "wear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of wear related to hypernyms.\";         A textual example of the semantic relation is \"are wear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "artefact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of artefact related to hypernyms.\";         A textual example of the semantic relation is \"are artefact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "artifact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of artifact related to hypernyms.\";         A textual example of the semantic relation is \"are artifact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "shoe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shoe related to hypernyms.\";         A textual example of the semantic relation is \"are shoe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "headgear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of headgear related to hypernyms.\";         A textual example of the semantic relation is \"are headgear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "footgear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of footgear related to hypernyms.\";         A textual example of the semantic relation is \"are footgear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "headwear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of headwear related to hypernyms.\";         A textual example of the semantic relation is \"are headwear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "headdress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of headdress related to hypernyms.\";         A textual example of the semantic relation is \"are headdress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "hand wear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hand wear related to hypernyms.\";         A textual example of the semantic relation is \"are hand wear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "handwear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of handwear related to hypernyms.\";         A textual example of the semantic relation is \"are handwear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "good",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of good related to hypernyms.\";         A textual example of the semantic relation is \"are good\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "overgarment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of overgarment related to hypernyms.\";         A textual example of the semantic relation is \"are overgarment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "trade good",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of trade good related to hypernyms.\";         A textual example of the semantic relation is \"are trade good\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "whole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of whole related to hypernyms.\";         A textual example of the semantic relation is \"are whole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "outer garment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of outer garment related to hypernyms.\";         A textual example of the semantic relation is \"are outer garment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "commodity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of commodity related to hypernyms.\";         A textual example of the semantic relation is \"are commodity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of unit related to hypernyms.\";         A textual example of the semantic relation is \"are unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "woman's clothing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of woman's clothing related to hypernyms.\";         A textual example of the semantic relation is \"are woman's clothing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "attire",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of attire related to hypernyms.\";         A textual example of the semantic relation is \"are attire\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "hosiery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hosiery related to hypernyms.\";         A textual example of the semantic relation is \"are hosiery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "dress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dress related to hypernyms.\";         A textual example of the semantic relation is \"are dress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "hose",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hose related to hypernyms.\";         A textual example of the semantic relation is \"are hose\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "garb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of garb related to hypernyms.\";         A textual example of the semantic relation is \"are garb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "disguise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of disguise related to hypernyms.\";         A textual example of the semantic relation is \"are disguise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "neckwear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of neckwear related to hypernyms.\";         A textual example of the semantic relation is \"are neckwear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "top",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of top related to hypernyms.\";         A textual example of the semantic relation is \"are top\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "cloak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cloak related to hypernyms.\";         A textual example of the semantic relation is \"are cloak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "patterned",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of patterned.\";         A textual example of the semantic relation is \"can be patterned\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "blue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of blue.\";         A textual example of the semantic relation is \"can be blue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "blue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of blue.\";         A textual example of the semantic relation is \"can be blue\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "pink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of pink.\";         A textual example of the semantic relation is \"can be pink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "pink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of pink.\";         A textual example of the semantic relation is \"can be pink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "striped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of striped.\";         A textual example of the semantic relation is \"can be striped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "red",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of red.\";         A textual example of the semantic relation is \"can be red\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "grey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of grey.\";         A textual example of the semantic relation is \"can be grey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "grey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of grey.\";         A textual example of the semantic relation is \"can be grey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "shiny",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of shiny.\";         A textual example of the semantic relation is \"can be shiny\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "glossy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of glossy.\";         A textual example of the semantic relation is \"can be glossy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "disposable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which disposable is composed.\";         A textual example of the semantic relation is \"can be made of disposable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "stretch pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of stretch pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stretch pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "long trousers",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of long trousers in terms of their hyponyms.\";         A textual example of the semantic relation is \"are long trousers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "blue jean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of blue jean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blue jean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "gantlet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of gantlet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gantlet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pajama",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pajama in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pajama\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shorts",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shorts in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shorts\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "knee breeches",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of knee breeches in terms of their hyponyms.\";         A textual example of the semantic relation is \"are knee breeches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pyjama",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pyjama in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pyjama\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tweed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tweed in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tweed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "slacks",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of slacks in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slacks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "breeches",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of breeches in terms of their hyponyms.\";         A textual example of the semantic relation is \"are breeches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bellbottom pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bellbottom pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bellbottom pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "knickerbockers",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of knickerbockers in terms of their hyponyms.\";         A textual example of the semantic relation is \"are knickerbockers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "toreador pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of toreador pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are toreador pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jodhpurs",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jodhpurs in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jodhpurs\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "short pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of short pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are short pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "gauntlet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of gauntlet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gauntlet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bell-bottoms",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bell-bottoms in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bell-bottoms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "churidars",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of churidars in terms of their hyponyms.\";         A textual example of the semantic relation is \"are churidars\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "gabardine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of gabardine in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gabardine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "corduroys",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of corduroys in terms of their hyponyms.\";         A textual example of the semantic relation is \"are corduroys\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "long pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of long pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are long pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sweat pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sweat pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sweat pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pantaloon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pantaloon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pantaloon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "knickers",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of knickers in terms of their hyponyms.\";         A textual example of the semantic relation is \"are knickers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jumper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jumper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jumper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sweatpants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sweatpants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sweatpants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "chino",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of chino in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chino\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bellbottom trousers",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bellbottom trousers in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bellbottom trousers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pedal pusher",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pedal pusher in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pedal pusher\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shalwar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shalwar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shalwar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "riding breeches",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of riding breeches in terms of their hyponyms.\";         A textual example of the semantic relation is \"are riding breeches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jodhpur breeches",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jodhpur breeches in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jodhpur breeches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "trews",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of trews in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trews\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "salwar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of salwar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are salwar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "trunks",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of trunks in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trunks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "knee pants",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of knee pants in terms of their hyponyms.\";         A textual example of the semantic relation is \"are knee pants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "mitten",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of mitten in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mitten\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "flannel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of flannel in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flannel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cords",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cords in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cords\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "slouch hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of slouch hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are slouch hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "muumuu",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of muumuu in terms of their hyponyms.\";         A textual example of the semantic relation is \"are muumuu\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kurta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kurta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kurta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kepi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kepi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kepi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dunce cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dunce cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dunce cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tam-o'-shanter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tam-o'-shanter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tam-o'-shanter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "garrison cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of garrison cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are garrison cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sacque",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sacque in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sacque\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Norfolk jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Norfolk jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Norfolk jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "wishing cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of wishing cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wishing cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "peacoat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of peacoat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are peacoat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Stetson",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Stetson in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Stetson\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "deerstalker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of deerstalker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are deerstalker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shift",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shift in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shift\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "metal glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of metal glove in terms of their hyponyms.\";         A textual example of the semantic relation is \"are metal glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bomber jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bomber jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bomber jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "silk hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of silk hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are silk hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "fur hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of fur hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fur hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "T-shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of T-shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are T-shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "ski cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of ski cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ski cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "mobcap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of mobcap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mobcap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "turban",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of turban in terms of their hyponyms.\";         A textual example of the semantic relation is \"are turban\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dirndl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dirndl in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dirndl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tank top",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tank top in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tank top\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bolero",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bolero in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bolero\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Mao jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Mao jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Mao jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "lumber jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of lumber jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lumber jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "fedora",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of fedora in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fedora\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "wimple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of wimple in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wimple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bobbysocks",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bobbysocks in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bobbysocks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "full skirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of full skirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are full skirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cockscomb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cockscomb in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cockscomb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "liberty cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of liberty cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are liberty cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sports coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sports coat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sports coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "beret",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of beret in terms of their hyponyms.\";         A textual example of the semantic relation is \"are beret\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "morning coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of morning coat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are morning coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "trilby",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of trilby in terms of their hyponyms.\";         A textual example of the semantic relation is \"are trilby\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "chemise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of chemise in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chemise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "blazer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of blazer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are blazer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shovel hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shovel hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shovel hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kalpac",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kalpac in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kalpac\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Mother Hubbard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Mother Hubbard in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Mother Hubbard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "service cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of service cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are service cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "muff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of muff in terms of their hyponyms.\";         A textual example of the semantic relation is \"are muff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "coatdress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of coatdress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coatdress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "flat cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of flat cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are flat cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "baseball cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of baseball cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are baseball cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jeweled headdress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jeweled headdress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jeweled headdress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dress shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dress shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dress shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "parka",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of parka in terms of their hyponyms.\";         A textual example of the semantic relation is \"are parka\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dress hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dress hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dress hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sombrero",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sombrero in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sombrero\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cocked hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cocked hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cocked hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kaffiyeh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kaffiyeh in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kaffiyeh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "campaign hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of campaign hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are campaign hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shell jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shell jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shell jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "boater",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of boater in terms of their hyponyms.\";         A textual example of the semantic relation is \"are boater\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "argyll",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of argyll in terms of their hyponyms.\";         A textual example of the semantic relation is \"are argyll\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "grass skirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of grass skirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grass skirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cavalier hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cavalier hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cavalier hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "batting glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of batting glove in terms of their hyponyms.\";         A textual example of the semantic relation is \"are batting glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "domino",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of domino in terms of their hyponyms.\";         A textual example of the semantic relation is \"are domino\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bluebonnet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bluebonnet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bluebonnet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "golf cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of golf cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are golf cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tabi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tabi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tabi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pinafore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pinafore in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pinafore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "daishiki",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of daishiki in terms of their hyponyms.\";         A textual example of the semantic relation is \"are daishiki\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bed jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bed jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bed jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "high hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of high hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are high hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dressing sacque",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dressing sacque in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dressing sacque\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "swallowtail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of swallowtail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are swallowtail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tam in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "skimmer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of skimmer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are skimmer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "calpac",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of calpac in terms of their hyponyms.\";         A textual example of the semantic relation is \"are calpac\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tammy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tammy in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tammy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "snap-brim hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of snap-brim hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are snap-brim hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "woman's hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of woman's hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are woman's hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "calpack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of calpack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are calpack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "nightcap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of nightcap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are nightcap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dolman jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dolman jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dolman jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "helmet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of helmet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are helmet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "balaclava helmet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of balaclava helmet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are balaclava helmet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "mitre",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of mitre in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mitre\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jewelled headdress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jewelled headdress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jewelled headdress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kilt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kilt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kilt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cocktail dress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cocktail dress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cocktail dress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sou'wester",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sou'wester in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sou'wester\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "biggin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of biggin in terms of their hyponyms.\";         A textual example of the semantic relation is \"are biggin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "titfer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of titfer in terms of their hyponyms.\";         A textual example of the semantic relation is \"are titfer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "swallow-tailed coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of swallow-tailed coat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are swallow-tailed coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "half mask",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of half mask in terms of their hyponyms.\";         A textual example of the semantic relation is \"are half mask\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "false face",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of false face in terms of their hyponyms.\";         A textual example of the semantic relation is \"are false face\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "berretta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of berretta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are berretta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "coonskin cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of coonskin cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coonskin cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sports jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sports jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sports jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pinny",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pinny in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pinny\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "yachting cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of yachting cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are yachting cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "miniskirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of miniskirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are miniskirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sailor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sailor in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sailor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "toboggan cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of toboggan cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are toboggan cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "stocking cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of stocking cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stocking cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "hug-me-tight",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hug-me-tight in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hug-me-tight\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "gown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of gown in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "crinoline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of crinoline in terms of their hyponyms.\";         A textual example of the semantic relation is \"are crinoline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tutu",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tutu in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tutu\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "skullcap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of skullcap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are skullcap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shako",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shako in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shako\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Eton jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Eton jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Eton jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "polo shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of polo shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are polo shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tirolean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tirolean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tirolean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "top hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of top hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are top hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "stovepipe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of stovepipe in terms of their hyponyms.\";         A textual example of the semantic relation is \"are stovepipe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "fez",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of fez in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fez\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "hood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hood in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kaftan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kaftan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kaftan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sailor cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sailor cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sailor cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bush jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bush jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bush jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "double-breasted jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of double-breasted jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are double-breasted jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "camise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of camise in terms of their hyponyms.\";         A textual example of the semantic relation is \"are camise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sunhat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sunhat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sunhat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jersey",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jersey in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jersey\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "topper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of topper in terms of their hyponyms.\";         A textual example of the semantic relation is \"are topper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "maxi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of maxi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are maxi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "poke bonnet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of poke bonnet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are poke bonnet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bathing cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bathing cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bathing cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "work-shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of work-shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are work-shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "homburg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of homburg in terms of their hyponyms.\";         A textual example of the semantic relation is \"are homburg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "argyle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of argyle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are argyle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sundress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sundress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sundress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "opera hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of opera hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are opera hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "eye mask",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of eye mask in terms of their hyponyms.\";         A textual example of the semantic relation is \"are eye mask\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "beaver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of beaver in terms of their hyponyms.\";         A textual example of the semantic relation is \"are beaver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "golf glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of golf glove in terms of their hyponyms.\";         A textual example of the semantic relation is \"are golf glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kalansuwa",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kalansuwa in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kalansuwa\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kid glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kid glove in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kid glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "monkey jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of monkey jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are monkey jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pinner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pinner in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pinner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "mess jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of mess jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mess jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jockey cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jockey cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jockey cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sweat sock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sweat sock in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sweat sock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "banian",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of banian in terms of their hyponyms.\";         A textual example of the semantic relation is \"are banian\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "hair shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hair shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hair shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "busby",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of busby in terms of their hyponyms.\";         A textual example of the semantic relation is \"are busby\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "hobble skirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hobble skirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hobble skirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "pea jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of pea jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pea jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "leghorn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of leghorn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are leghorn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bobbysock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bobbysock in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bobbysock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sari",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sari in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sari\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "mini",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of mini in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mini\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "windcheater",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of windcheater in terms of their hyponyms.\";         A textual example of the semantic relation is \"are windcheater\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "hoopskirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hoopskirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hoopskirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "peaked cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of peaked cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are peaked cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shower cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shower cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shower cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "doublet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of doublet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are doublet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "swimming cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of swimming cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are swimming cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "fool's cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of fool's cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are fool's cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "birretta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of birretta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are birretta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bearskin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bearskin in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bearskin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "coonskin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of coonskin in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coonskin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cowboy hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cowboy hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cowboy hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "millinery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of millinery in terms of their hyponyms.\";         A textual example of the semantic relation is \"are millinery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Glengarry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Glengarry in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Glengarry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "cloth cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of cloth cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cloth cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "banyan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of banyan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are banyan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "donkey jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of donkey jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are donkey jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "strapless",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of strapless in terms of their hyponyms.\";         A textual example of the semantic relation is \"are strapless\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "watch cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of watch cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are watch cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tabis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tabis in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tabis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "athletic sock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of athletic sock in terms of their hyponyms.\";         A textual example of the semantic relation is \"are athletic sock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "lavalava",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of lavalava in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lavalava\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "knee-high",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of knee-high in terms of their hyponyms.\";         A textual example of the semantic relation is \"are knee-high\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "balaclava",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of balaclava in terms of their hyponyms.\";         A textual example of the semantic relation is \"are balaclava\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "morning dress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of morning dress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are morning dress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "lumberjack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of lumberjack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lumberjack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sheath",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sheath in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sheath\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "saree",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of saree in terms of their hyponyms.\";         A textual example of the semantic relation is \"are saree\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sport jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sport jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sport jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "suede glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of suede glove in terms of their hyponyms.\";         A textual example of the semantic relation is \"are suede glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sarong",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sarong in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sarong\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tarboosh",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tarboosh in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tarboosh\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tyrolean",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tyrolean in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tyrolean\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "mortarboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of mortarboard in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mortarboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "anorak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of anorak in terms of their hyponyms.\";         A textual example of the semantic relation is \"are anorak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sun hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sun hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sun hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "knee-hi",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of knee-hi in terms of their hyponyms.\";         A textual example of the semantic relation is \"are knee-hi\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "toque",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of toque in terms of their hyponyms.\";         A textual example of the semantic relation is \"are toque\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "single-breasted jacket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of single-breasted jacket in terms of their hyponyms.\";         A textual example of the semantic relation is \"are single-breasted jacket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "caftan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of caftan in terms of their hyponyms.\";         A textual example of the semantic relation is \"are caftan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Panama",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Panama in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Panama\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "ten-gallon hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of ten-gallon hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ten-gallon hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "culotte",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of culotte in terms of their hyponyms.\";         A textual example of the semantic relation is \"are culotte\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "ballet skirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of ballet skirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are ballet skirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "straw hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of straw hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are straw hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "anklet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of anklet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are anklet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dunce's cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dunce's cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dunce's cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Panama hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Panama hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Panama hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "jerkin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of jerkin in terms of their hyponyms.\";         A textual example of the semantic relation is \"are jerkin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "overskirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of overskirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are overskirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "miter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of miter in terms of their hyponyms.\";         A textual example of the semantic relation is \"are miter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "anklets",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of anklets in terms of their hyponyms.\";         A textual example of the semantic relation is \"are anklets\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "shirtdress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of shirtdress in terms of their hyponyms.\";         A textual example of the semantic relation is \"are shirtdress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "kirtle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of kirtle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are kirtle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "topknot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of topknot in terms of their hyponyms.\";         A textual example of the semantic relation is \"are topknot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "polonaise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of polonaise in terms of their hyponyms.\";         A textual example of the semantic relation is \"are polonaise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sport shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sport shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sport shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "biretta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of biretta in terms of their hyponyms.\";         A textual example of the semantic relation is \"are biretta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bowler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bowler in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bowler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "evening shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of evening shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are evening shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dressing sack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dressing sack in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dressing sack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "tee shirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of tee shirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tee shirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "windbreaker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of windbreaker in terms of their hyponyms.\";         A textual example of the semantic relation is \"are windbreaker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "gathered skirt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of gathered skirt in terms of their hyponyms.\";         A textual example of the semantic relation is \"are gathered skirt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "coxcomb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of coxcomb in terms of their hyponyms.\";         A textual example of the semantic relation is \"are coxcomb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "varsity sock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of varsity sock in terms of their hyponyms.\";         A textual example of the semantic relation is \"are varsity sock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dolman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dolman in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dolman\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "Balmoral",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of Balmoral in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Balmoral\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "dashiki",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of dashiki in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dashiki\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "bonnet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of bonnet in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bonnet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "overseas cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of overseas cap in terms of their hyponyms.\";         A textual example of the semantic relation is \"are overseas cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "felt hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of felt hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are felt hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "sport coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of sport coat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sport coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "lid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of lid related to hypernyms.\";         A textual example of the semantic relation is \"are lid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of glove related to hypernyms.\";         A textual example of the semantic relation is \"are glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hat related to hypernyms.\";         A textual example of the semantic relation is \"are hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "chapeau",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of chapeau related to hypernyms.\";         A textual example of the semantic relation is \"are chapeau\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "material",
        "value": "denim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Material of which denim is composed.\";         A textual example of the semantic relation is \"can be made of denim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "denim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of denim in terms of their hyponyms.\";         A textual example of the semantic relation is \"are denim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "lace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lace.\";         A textual example of the semantic relation is \"can have lace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of leg.\";         A textual example of the semantic relation is \"can have leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "generalization",
        "value": "coat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of coat related to hypernyms.\";         A textual example of the semantic relation is \"are coat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "glove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of glove in terms of their hyponyms.\";         A textual example of the semantic relation is \"are glove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "lid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of lid in terms of their hyponyms.\";         A textual example of the semantic relation is \"are lid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "chapeau",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of chapeau in terms of their hyponyms.\";         A textual example of the semantic relation is \"are chapeau\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "hat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of hat in terms of their hyponyms.\";         A textual example of the semantic relation is \"are hat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "part",
        "value": "throat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"All the constitutive parts of throat.\";         A textual example of the semantic relation is \"can have throat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "clothes",
        "slot": "specialization",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"clothes\";         The returned words must satisfy the semantic relation \"Classification of white in terms of their hyponyms.\";         A textual example of the semantic relation is \"are white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "user",
        "value": "gate-keeper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive gate-keeper.\";         A textual example of the semantic relation is \"are used by gate-keepers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "movement",
        "value": "slide",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can slide\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "movement",
        "value": "swing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Terms that describe the type and speed of movement.\";         A textual example of the semantic relation is \"can swing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "time",
        "value": "morning",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entries which link morning with the time flow or with specific moments of time.\";         A textual example of the semantic relation is \"can be consumed or used during morning\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "sound",
        "value": "creak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of creak can be described.\";         A textual example of the semantic relation is \" creak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "sound",
        "value": "clink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of clink can be described.\";         A textual example of the semantic relation is \"can clink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "accessory",
        "value": "key",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with key. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for key.\";         A textual example of the semantic relation is \"are related with key\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "accessory",
        "value": "tap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with tap. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for tap.\";         A textual example of the semantic relation is \"are related with tap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "accessory",
        "value": "clicker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with clicker. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for clicker.\";         A textual example of the semantic relation is \"are related with clicker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "efficiency",
        "value": "breakable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of breakable related to their function.\";         A textual example of the semantic relation is \"can be breakable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "efficiency",
        "value": "leaking",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of leaking related to their function.\";         A textual example of the semantic relation is \"can be leaking\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "efficiency",
        "value": "impermeable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of impermeable related to their function.\";         A textual example of the semantic relation is \"can be impermeable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "liquid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within liquid, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain liquids\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within water, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "soup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within soup, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain soups\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "food",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within food, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain foods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "yoghurt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within yoghurt, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain yoghurts\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "dessert",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within dessert, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain desserts\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "tea",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within tea, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain teas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "hot chocolate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within hot chocolate, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain hot chocolates\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "milk",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within milk, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain milks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "claret",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within claret, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain clarets\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "flower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within flower, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain flowers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "claret",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within claret, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain clarets\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within beer, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain beers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "absinthe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within absinthe, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain absinthes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "greasy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within greasy, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain greasies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "coffee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within coffee, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain coffees\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "content",
        "value": "cookie",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within cookie, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain cookies\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "concave",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of concave.\";         A textual example of the semantic relation is \"can be concave\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "curved",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of curved.\";         A textual example of the semantic relation is \"can be curved\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "cylindrical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of cylindrical.\";         A textual example of the semantic relation is \"can be cylindrical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "rectangular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of rectangular.\";         A textual example of the semantic relation is \"can be rectangular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "strainer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of strainer.\";         A textual example of the semantic relation is \"can have strainer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of leg.\";         A textual example of the semantic relation is \"can have leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "arm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of arm.\";         A textual example of the semantic relation is \"can have arm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "footstool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of footstool.\";         A textual example of the semantic relation is \"can have footstool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "seatback",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seatback.\";         A textual example of the semantic relation is \"can have seatback\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "jamb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of jamb.\";         A textual example of the semantic relation is \"can have jamb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "latch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of latch.\";         A textual example of the semantic relation is \"can have latch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "lock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lock.\";         A textual example of the semantic relation is \"can have lock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "hinge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hinge.\";         A textual example of the semantic relation is \"can have hinge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "throne",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of throne.\";         A textual example of the semantic relation is \"can have throne\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "drain basket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of drain basket.\";         A textual example of the semantic relation is \"can have drain basket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "base",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of base.\";         A textual example of the semantic relation is \"can have base\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "rim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rim.\";         A textual example of the semantic relation is \"can have rim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "wall",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wall.\";         A textual example of the semantic relation is \"can have wall\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "rung",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rung.\";         A textual example of the semantic relation is \"can have rung\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "potty",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of potty.\";         A textual example of the semantic relation is \"can have potty\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "commode",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of commode.\";         A textual example of the semantic relation is \"can have commode\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "crapper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of crapper.\";         A textual example of the semantic relation is \"can have crapper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "arch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of arch.\";         A textual example of the semantic relation is \"can have arch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "basin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of basin.\";         A textual example of the semantic relation is \"can have basin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "flooring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of flooring.\";         A textual example of the semantic relation is \"can have flooring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "pot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pot.\";         A textual example of the semantic relation is \"can have pot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "plughole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of plughole.\";         A textual example of the semantic relation is \"can have plughole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "edge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of edge.\";         A textual example of the semantic relation is \"can have edge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "stave",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stave.\";         A textual example of the semantic relation is \"can have stave\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "toilet seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toilet seat.\";         A textual example of the semantic relation is \"can have toilet seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "rocker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rocker.\";         A textual example of the semantic relation is \"can have rocker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "showerhead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of showerhead.\";         A textual example of the semantic relation is \"can have showerhead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "drain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of drain.\";         A textual example of the semantic relation is \"can have drain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "bottom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bottom.\";         A textual example of the semantic relation is \"can have bottom\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "pier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pier.\";         A textual example of the semantic relation is \"can have pier\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "stool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stool.\";         A textual example of the semantic relation is \"can have stool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "back",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of back.\";         A textual example of the semantic relation is \"can have back\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of round.\";         A textual example of the semantic relation is \"can have round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "backrest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of backrest.\";         A textual example of the semantic relation is \"can have backrest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "can",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of can.\";         A textual example of the semantic relation is \"can have can\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "floor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of floor.\";         A textual example of the semantic relation is \"can have floor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "toilet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toilet.\";         A textual example of the semantic relation is \"can have toilet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "toilet bowl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of toilet bowl.\";         A textual example of the semantic relation is \"can have toilet bowl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "trestle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of trestle.\";         A textual example of the semantic relation is \"can have trestle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "ceiling",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ceiling.\";         A textual example of the semantic relation is \"can have ceiling\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "kitchen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which kitchen can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in kitchens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "porch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which porch can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in porches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "restaurant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which restaurant can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in restaurants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "castle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which castle can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in castles\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "palace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which palace can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in palaces\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "courtyard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which courtyard can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in courtyards\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "veranda",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which veranda can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in verandas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "living room",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which living room can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in living rooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "building",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which building can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in buildings\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "cafeteria",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which cafeteria can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cafeterias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "bathroom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which bathroom can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bathrooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "garden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which garden can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in gardens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "field",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which field can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in fields\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "venue",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which venue can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in venues\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "memorial",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which memorial can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in memorials\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "department",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which department can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in departments\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "monument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which monument can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in monuments\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which car can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cars\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "driveway",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which driveway can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in driveways\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "support",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of support.\";         A textual example of the semantic relation is \"can have support\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which wood is composed.\";         A textual example of the semantic relation is \"can be made of wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "steel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which steel is composed.\";         A textual example of the semantic relation is \"can be made of steel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "porcelain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which porcelain is composed.\";         A textual example of the semantic relation is \"can be made of porcelain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "china",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which china is composed.\";         A textual example of the semantic relation is \"can be made of china\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which glass is composed.\";         A textual example of the semantic relation is \"can be made of glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "pottery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which pottery is composed.\";         A textual example of the semantic relation is \"can be made of pottery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "wrought iron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which wrought iron is composed.\";         A textual example of the semantic relation is \"can be made of wrought iron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "marble",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which marble is composed.\";         A textual example of the semantic relation is \"can be made of marble\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "copper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which copper is composed.\";         A textual example of the semantic relation is \"can be made of copper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "ceramic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which ceramic is composed.\";         A textual example of the semantic relation is \"can be made of ceramic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "glassware",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which glassware is composed.\";         A textual example of the semantic relation is \"can be made of glassware\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "enamel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which enamel is composed.\";         A textual example of the semantic relation is \"can be made of enamel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "wooden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which wooden is composed.\";         A textual example of the semantic relation is \"can be made of wooden\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "iron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which iron is composed.\";         A textual example of the semantic relation is \"can be made of iron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "ceramic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which ceramic is composed.\";         A textual example of the semantic relation is \"can be made of ceramic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "contain",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which contain is interacted with.\";         A textual example of the semantic relation is \"are used to contain\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "hold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which hold is interacted with.\";         A textual example of the semantic relation is \"are used to hold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "sit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which sit is interacted with.\";         A textual example of the semantic relation is \"are used to sit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "eat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which eat is interacted with.\";         A textual example of the semantic relation is \"are used to eat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "patterned",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of patterned.\";         A textual example of the semantic relation is \"can be patterned\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "sleep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which sleep is interacted with.\";         A textual example of the semantic relation is \"are used for sleep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "glossy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of glossy.\";         A textual example of the semantic relation is \"can be glossy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "relaxing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which relaxing is interacted with.\";         A textual example of the semantic relation is \"are used for relaxing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "cookery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which cookery is interacted with.\";         A textual example of the semantic relation is \"are used for cookery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "shiny",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of shiny.\";         A textual example of the semantic relation is \"can be shiny\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "security",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which security is interacted with.\";         A textual example of the semantic relation is \"are used for security\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "delimit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which delimit is interacted with.\";         A textual example of the semantic relation is \"are used to delimit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "pick up",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which pick up is interacted with.\";         A textual example of the semantic relation is \"are used to pick up\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "blend",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which blend is interacted with.\";         A textual example of the semantic relation is \"are used to blend\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "protection",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which protection is interacted with.\";         A textual example of the semantic relation is \"are used for protection\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "separate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which separate is interacted with.\";         A textual example of the semantic relation is \"are used to separate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "stir",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which stir is interacted with.\";         A textual example of the semantic relation is \"are used to stir\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "exit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which exit is interacted with.\";         A textual example of the semantic relation is \"are used for exit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "measure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which measure is interacted with.\";         A textual example of the semantic relation is \"are used to measure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which drink is interacted with.\";         A textual example of the semantic relation is \"are used to drink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "guard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which guard is interacted with.\";         A textual example of the semantic relation is \"are used for guard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "feed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which feed is interacted with.\";         A textual example of the semantic relation is \"are used to feed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "insulate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which insulate is interacted with.\";         A textual example of the semantic relation is \"are used to insulate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "rinse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which rinse is interacted with.\";         A textual example of the semantic relation is \"are used to rinse\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "bar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which bar is interacted with.\";         A textual example of the semantic relation is \"are used to bar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "wash",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which wash is interacted with.\";         A textual example of the semantic relation is \"are used to wash\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "access",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which access is interacted with.\";         A textual example of the semantic relation is \"are used for access\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "purpose",
        "value": "entrance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All of the purposes for which entrance is interacted with.\";         A textual example of the semantic relation is \"are used for entrance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "room",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which room can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in rooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "artefact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of artefact related to hypernyms.\";         A textual example of the semantic relation is \"are artefact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "artifact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of artifact related to hypernyms.\";         A textual example of the semantic relation is \"are artifact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "container",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of container related to hypernyms.\";         A textual example of the semantic relation is \"are container\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "implement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of implement related to hypernyms.\";         A textual example of the semantic relation is \"are implement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of utensil related to hypernyms.\";         A textual example of the semantic relation is \"are utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of tool related to hypernyms.\";         A textual example of the semantic relation is \"are tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "furniture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of furniture related to hypernyms.\";         A textual example of the semantic relation is \"are furniture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "barrier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of barrier related to hypernyms.\";         A textual example of the semantic relation is \"are barrier\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "whole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of whole related to hypernyms.\";         A textual example of the semantic relation is \"are whole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "tableware",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of tableware related to hypernyms.\";         A textual example of the semantic relation is \"are tableware\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of unit related to hypernyms.\";         A textual example of the semantic relation is \"are unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "cutlery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of cutlery related to hypernyms.\";         A textual example of the semantic relation is \"are cutlery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of vessel related to hypernyms.\";         A textual example of the semantic relation is \"are vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "receptacle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of receptacle related to hypernyms.\";         A textual example of the semantic relation is \"are receptacle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "chair",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of chair related to hypernyms.\";         A textual example of the semantic relation is \"are chair\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "closing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of closing related to hypernyms.\";         A textual example of the semantic relation is \"are closing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "fixture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of fixture related to hypernyms.\";         A textual example of the semantic relation is \"are fixture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "ware",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of ware related to hypernyms.\";         A textual example of the semantic relation is \"are ware\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of structure related to hypernyms.\";         A textual example of the semantic relation is \"are structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "plumbing fixture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of plumbing fixture related to hypernyms.\";         A textual example of the semantic relation is \"are plumbing fixture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "construction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of construction related to hypernyms.\";         A textual example of the semantic relation is \"are construction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "obstructor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of obstructor related to hypernyms.\";         A textual example of the semantic relation is \"are obstructor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "obstruction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of obstruction related to hypernyms.\";         A textual example of the semantic relation is \"are obstruction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "eating utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of eating utensil related to hypernyms.\";         A textual example of the semantic relation is \"are eating utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "obstructer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of obstructer related to hypernyms.\";         A textual example of the semantic relation is \"are obstructer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "drinking vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of drinking vessel related to hypernyms.\";         A textual example of the semantic relation is \"are drinking vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "movable barrier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of movable barrier related to hypernyms.\";         A textual example of the semantic relation is \"are movable barrier\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "impedimenta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of impedimenta related to hypernyms.\";         A textual example of the semantic relation is \"are impedimenta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "impediment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of impediment related to hypernyms.\";         A textual example of the semantic relation is \"are impediment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "article",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of article related to hypernyms.\";         A textual example of the semantic relation is \"are article\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "regulator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of regulator related to hypernyms.\";         A textual example of the semantic relation is \"are regulator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "crockery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of crockery related to hypernyms.\";         A textual example of the semantic relation is \"are crockery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "corridor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of corridor related to hypernyms.\";         A textual example of the semantic relation is \"are corridor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "edge tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of edge tool related to hypernyms.\";         A textual example of the semantic relation is \"are edge tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "passageway",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of passageway related to hypernyms.\";         A textual example of the semantic relation is \"are passageway\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "control",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of control related to hypernyms.\";         A textual example of the semantic relation is \"are control\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "cutting tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of cutting tool related to hypernyms.\";         A textual example of the semantic relation is \"are cutting tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "amount",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of amount related to hypernyms.\";         A textual example of the semantic relation is \"are amount\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "controller",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of controller related to hypernyms.\";         A textual example of the semantic relation is \"are controller\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "passage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of passage related to hypernyms.\";         A textual example of the semantic relation is \"are passage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "measure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of measure related to hypernyms.\";         A textual example of the semantic relation is \"are measure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "quantity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of quantity related to hypernyms.\";         A textual example of the semantic relation is \"are quantity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "cutter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of cutter related to hypernyms.\";         A textual example of the semantic relation is \"are cutter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "furnishing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of furnishing related to hypernyms.\";         A textual example of the semantic relation is \"are furnishing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "containerful",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of containerful related to hypernyms.\";         A textual example of the semantic relation is \"are containerful\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "approach",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of approach related to hypernyms.\";         A textual example of the semantic relation is \"are approach\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "cup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of cup related to hypernyms.\";         A textual example of the semantic relation is \"are cup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of device related to hypernyms.\";         A textual example of the semantic relation is \"are device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "bottle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of bottle related to hypernyms.\";         A textual example of the semantic relation is \"are bottle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "area",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of area related to hypernyms.\";         A textual example of the semantic relation is \"are area\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "spigot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of spigot related to hypernyms.\";         A textual example of the semantic relation is \"are spigot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "way",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of way related to hypernyms.\";         A textual example of the semantic relation is \"are way\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "cutting implement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of cutting implement related to hypernyms.\";         A textual example of the semantic relation is \"are cutting implement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "indefinite quantity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of indefinite quantity related to hypernyms.\";         A textual example of the semantic relation is \"are indefinite quantity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "jar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of jar related to hypernyms.\";         A textual example of the semantic relation is \"are jar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "faucet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of faucet related to hypernyms.\";         A textual example of the semantic relation is \"are faucet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "part",
        "value": "seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the constitutive parts of seat.\";         A textual example of the semantic relation is \"can have seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of seat related to hypernyms.\";         A textual example of the semantic relation is \"are seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "place",
        "value": "entrance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"All the entities in which entrance can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in entrances\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "room",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of room related to hypernyms.\";         A textual example of the semantic relation is \"are room\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "access",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of access related to hypernyms.\";         A textual example of the semantic relation is \"are access\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "generalization",
        "value": "support",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Classification of support related to hypernyms.\";         A textual example of the semantic relation is \"are support\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "home",
        "slot": "material",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"home\";         The returned words must satisfy the semantic relation \"Material of which silver is composed.\";         A textual example of the semantic relation is \"can be made of silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "bodyPart",
        "value": "ear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with ear.\";         A textual example of the semantic relation is \"can have or be used with ear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "bodyPart",
        "value": "mouth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with mouth.\";         A textual example of the semantic relation is \"can have or be used with mouth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "accessory",
        "value": "tablet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with tablet. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for tablet.\";         A textual example of the semantic relation is \"are related with tablet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "content",
        "value": "programmable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within programmable, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain programmables\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "accessory",
        "value": "salt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with salt. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for salt.\";         A textual example of the semantic relation is \"are related with salt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "efficiency",
        "value": "fragile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of fragile related to their function.\";         A textual example of the semantic relation is \"can be fragile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "content",
        "value": "alcohol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within alcohol, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain alcohols\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "user",
        "value": "teacher",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive teacher.\";         A textual example of the semantic relation is \"are used by teachers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "sound",
        "value": "ring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of ring can be described.\";         A textual example of the semantic relation is \"can ring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "sound",
        "value": "ring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of ring can be described.\";         A textual example of the semantic relation is \" ring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "user",
        "value": "patient",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive patient.\";         A textual example of the semantic relation is \"are used by patients\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "content",
        "value": "mercury",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within mercury, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain mercuries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "user",
        "value": "doctor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive doctor.\";         A textual example of the semantic relation is \"are used by doctors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "landline",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of landline in terms of their hyponyms.\";         A textual example of the semantic relation is \"are landline\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "smartphone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of smartphone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are smartphone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "cordless",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of cordless in terms of their hyponyms.\";         A textual example of the semantic relation is \"are cordless\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "wireless telephone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of wireless telephone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are wireless telephone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "telephone extension",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of telephone extension in terms of their hyponyms.\";         A textual example of the semantic relation is \"are telephone extension\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "French telephone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of French telephone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are French telephone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "remote terminal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of remote terminal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are remote terminal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "freemail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of freemail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are freemail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "link-attached station",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of link-attached station in terms of their hyponyms.\";         A textual example of the semantic relation is \"are link-attached station\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "job-oriented terminal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of job-oriented terminal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are job-oriented terminal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "radiophone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of radiophone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are radiophone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "dial phone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of dial phone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dial phone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "speakerphone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of speakerphone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are speakerphone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "handset",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of handset in terms of their hyponyms.\";         A textual example of the semantic relation is \"are handset\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "remote station",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of remote station in terms of their hyponyms.\";         A textual example of the semantic relation is \"are remote station\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "link-attached terminal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of link-attached terminal in terms of their hyponyms.\";         A textual example of the semantic relation is \"are link-attached terminal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "spam",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of spam in terms of their hyponyms.\";         A textual example of the semantic relation is \"are spam\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "radiotelephone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of radiotelephone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are radiotelephone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "extension phone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of extension phone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are extension phone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "desk phone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of desk phone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are desk phone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "dial telephone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of dial telephone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are dial telephone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "extension",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of extension in terms of their hyponyms.\";         A textual example of the semantic relation is \"are extension\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "junk e-mail",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of junk e-mail in terms of their hyponyms.\";         A textual example of the semantic relation is \"are junk e-mail\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "pay-station",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of pay-station in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pay-station\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "specialization",
        "value": "pay-phone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of pay-phone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are pay-phone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "shape",
        "value": "rectangular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Form of rectangular.\";         A textual example of the semantic relation is \"can be rectangular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "shape",
        "value": "pointy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Form of pointy.\";         A textual example of the semantic relation is \"can be pointy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "diesel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of diesel.\";         A textual example of the semantic relation is \"use diesel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "petrol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of petrol.\";         A textual example of the semantic relation is \"use petrol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "coal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of coal.\";         A textual example of the semantic relation is \"use coal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "fire",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of fire.\";         A textual example of the semantic relation is \"use fire\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "gas",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of gas.\";         A textual example of the semantic relation is \"use gas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "electricity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of electricity.\";         A textual example of the semantic relation is \"use electricity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "propane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of propane.\";         A textual example of the semantic relation is \"use propane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "convection",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of convection.\";         A textual example of the semantic relation is \"use convection\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "biomass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of biomass.\";         A textual example of the semantic relation is \"use biomass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "electric",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of electric.\";         A textual example of the semantic relation is \"use electric\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "burning",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of burning.\";         A textual example of the semantic relation is \"use burning\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "pellet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of pellet.\";         A textual example of the semantic relation is \"use pellet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "supply",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"The power mode that allows the functioning of wood.\";         A textual example of the semantic relation is \"use wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "heat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which heat is interacted with.\";         A textual example of the semantic relation is \"are used for heat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "experiment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which experiment is interacted with.\";         A textual example of the semantic relation is \"are used for experiment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "speak",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which speak is interacted with.\";         A textual example of the semantic relation is \"are used to speak\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "teaching",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which teaching is interacted with.\";         A textual example of the semantic relation is \"are used for teaching\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "burn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which burn is interacted with.\";         A textual example of the semantic relation is \"are used to burn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "cooking",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which cooking is interacted with.\";         A textual example of the semantic relation is \"are used for cooking\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "education",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which education is interacted with.\";         A textual example of the semantic relation is \"are used for education\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "enlarge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which enlarge is interacted with.\";         A textual example of the semantic relation is \"are used to enlarge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "presentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which presentation is interacted with.\";         A textual example of the semantic relation is \"are used for presentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "display",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which display is interacted with.\";         A textual example of the semantic relation is \"are used to display\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "measure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which measure is interacted with.\";         A textual example of the semantic relation is \"are used to measure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "cook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which cook is interacted with.\";         A textual example of the semantic relation is \"are used to cook\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "telephone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which telephone is interacted with.\";         A textual example of the semantic relation is \"are used for telephone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "phone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which phone is interacted with.\";         A textual example of the semantic relation is \"are used for phone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "call",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which call is interacted with.\";         A textual example of the semantic relation is \"are used for call\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "cook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which cook is interacted with.\";         A textual example of the semantic relation is \"are used for cook\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "wash",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which wash is interacted with.\";         A textual example of the semantic relation is \"are used for wash\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "service",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which service is interacted with.\";         A textual example of the semantic relation is \"are used for service\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "truck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which truck is interacted with.\";         A textual example of the semantic relation is \"are used for truck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "project",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which project is interacted with.\";         A textual example of the semantic relation is \"are used to project\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "communication",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which communication is interacted with.\";         A textual example of the semantic relation is \"are used for communication\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "restaurant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which restaurant can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in restaurants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "weather station",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which weather station can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in weather stations\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "hospital",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which hospital can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in hospitals\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "planetarium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which planetarium can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in planetariums\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "cinema",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which cinema can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cinemas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "classroom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which classroom can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in classrooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "hotel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which hotel can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in hotels\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "car",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which car can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cars\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "bakery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which bakery can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bakeries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "factory",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which factory can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in factories\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "theater",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which theater can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in theaters\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "baker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which baker can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bakers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "office",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which office can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in offices\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "lab",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which lab can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in labs\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "school",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which school can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in schools\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "home",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which home can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in homes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "conference room",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which conference room can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in conference rooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "kitchen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which kitchen can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in kitchens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "place",
        "value": "room",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the entities in which room can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in rooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "steel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which steel is composed.\";         A textual example of the semantic relation is \"can be made of steel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which glass is composed.\";         A textual example of the semantic relation is \"can be made of glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "cast iron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which cast iron is composed.\";         A textual example of the semantic relation is \"can be made of cast iron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "purpose",
        "value": "screen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All of the purposes for which screen is interacted with.\";         A textual example of the semantic relation is \"are used for screen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "cord",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cord.\";         A textual example of the semantic relation is \"can have cord\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "plug",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of plug.\";         A textual example of the semantic relation is \"can have plug\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "push-button",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of push-button.\";         A textual example of the semantic relation is \"can have push-button\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "door",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of door.\";         A textual example of the semantic relation is \"can have door\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "knob",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of knob.\";         A textual example of the semantic relation is \"can have knob\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "rotor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rotor.\";         A textual example of the semantic relation is \"can have rotor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "scale bar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of scale bar.\";         A textual example of the semantic relation is \"can have scale bar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "bulb",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bulb.\";         A textual example of the semantic relation is \"can have bulb\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "microwave",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of microwave.\";         A textual example of the semantic relation is \"can have microwave\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "sensor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sensor.\";         A textual example of the semantic relation is \"can have sensor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "sprayer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sprayer.\";         A textual example of the semantic relation is \"can have sprayer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "rack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rack.\";         A textual example of the semantic relation is \"can have rack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "steam whistle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of steam whistle.\";         A textual example of the semantic relation is \"can have steam whistle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "fire iron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fire iron.\";         A textual example of the semantic relation is \"can have fire iron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "lens",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lens.\";         A textual example of the semantic relation is \"can have lens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "fireplace",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fireplace.\";         A textual example of the semantic relation is \"can have fireplace\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "button",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of button.\";         A textual example of the semantic relation is \"can have button\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "capillary",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of capillary.\";         A textual example of the semantic relation is \"can have capillary\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "light",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of light.\";         A textual example of the semantic relation is \"can have light\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "refrigerator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of refrigerator.\";         A textual example of the semantic relation is \"can have refrigerator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "mantle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mantle.\";         A textual example of the semantic relation is \"can have mantle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "telephone receiver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of telephone receiver.\";         A textual example of the semantic relation is \"can have telephone receiver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "mantlepiece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mantlepiece.\";         A textual example of the semantic relation is \"can have mantlepiece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "fireside",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fireside.\";         A textual example of the semantic relation is \"can have fireside\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "refrigeration system",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of refrigeration system.\";         A textual example of the semantic relation is \"can have refrigeration system\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "capillary tubing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of capillary tubing.\";         A textual example of the semantic relation is \"can have capillary tubing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "drip pan",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of drip pan.\";         A textual example of the semantic relation is \"can have drip pan\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "cable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cable.\";         A textual example of the semantic relation is \"can have cable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "platform",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of platform.\";         A textual example of the semantic relation is \"can have platform\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "mantel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mantel.\";         A textual example of the semantic relation is \"can have mantel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "mantelpiece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mantelpiece.\";         A textual example of the semantic relation is \"can have mantelpiece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "oven",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of oven.\";         A textual example of the semantic relation is \"can have oven\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "water back",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of water back.\";         A textual example of the semantic relation is \"can have water back\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "flashlight battery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of flashlight battery.\";         A textual example of the semantic relation is \"can have flashlight battery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "mouthpiece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mouthpiece.\";         A textual example of the semantic relation is \"can have mouthpiece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "keypad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of keypad.\";         A textual example of the semantic relation is \"can have keypad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "hearthstone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hearthstone.\";         A textual example of the semantic relation is \"can have hearthstone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "chimneypiece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of chimneypiece.\";         A textual example of the semantic relation is \"can have chimneypiece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "shutter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shutter.\";         A textual example of the semantic relation is \"can have shutter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "bimetallic strip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bimetallic strip.\";         A textual example of the semantic relation is \"can have bimetallic strip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "wire",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of wire.\";         A textual example of the semantic relation is \"can have wire\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "pipe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pipe.\";         A textual example of the semantic relation is \"can have pipe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "grate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of grate.\";         A textual example of the semantic relation is \"can have grate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "capillary tube",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of capillary tube.\";         A textual example of the semantic relation is \"can have capillary tube\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "hearth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hearth.\";         A textual example of the semantic relation is \"can have hearth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "grating",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of grating.\";         A textual example of the semantic relation is \"can have grating\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "appliance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of appliance related to hypernyms.\";         A textual example of the semantic relation is \"are appliance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of instrument related to hypernyms.\";         A textual example of the semantic relation is \"are instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of tool related to hypernyms.\";         A textual example of the semantic relation is \"are tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "electronic equipment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of electronic equipment related to hypernyms.\";         A textual example of the semantic relation is \"are electronic equipment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "home appliance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of home appliance related to hypernyms.\";         A textual example of the semantic relation is \"are home appliance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "household appliance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of household appliance related to hypernyms.\";         A textual example of the semantic relation is \"are household appliance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "equipment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of equipment related to hypernyms.\";         A textual example of the semantic relation is \"are equipment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "measuring instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of measuring instrument related to hypernyms.\";         A textual example of the semantic relation is \"are measuring instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "white goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of white goods related to hypernyms.\";         A textual example of the semantic relation is \"are white goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "measuring device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of measuring device related to hypernyms.\";         A textual example of the semantic relation is \"are measuring device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "measuring system",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of measuring system related to hypernyms.\";         A textual example of the semantic relation is \"are measuring system\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "kitchen appliance",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of kitchen appliance related to hypernyms.\";         A textual example of the semantic relation is \"are kitchen appliance\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "peripheral",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of peripheral related to hypernyms.\";         A textual example of the semantic relation is \"are peripheral\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "electronic device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of electronic device related to hypernyms.\";         A textual example of the semantic relation is \"are electronic device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "peripheral device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of peripheral device related to hypernyms.\";         A textual example of the semantic relation is \"are peripheral device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "computer peripheral",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of computer peripheral related to hypernyms.\";         A textual example of the semantic relation is \"are computer peripheral\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "regulator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of regulator related to hypernyms.\";         A textual example of the semantic relation is \"are regulator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "electrical device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of electrical device related to hypernyms.\";         A textual example of the semantic relation is \"are electrical device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "lamp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of lamp related to hypernyms.\";         A textual example of the semantic relation is \"are lamp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "durable goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of durable goods related to hypernyms.\";         A textual example of the semantic relation is \"are durable goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "receiving system",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of receiving system related to hypernyms.\";         A textual example of the semantic relation is \"are receiving system\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "transmission",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of transmission related to hypernyms.\";         A textual example of the semantic relation is \"are transmission\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "telecom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of telecom related to hypernyms.\";         A textual example of the semantic relation is \"are telecom\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "communicating",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of communicating related to hypernyms.\";         A textual example of the semantic relation is \"are communicating\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "printer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of printer related to hypernyms.\";         A textual example of the semantic relation is \"are printer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "electro-acoustic transducer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of electro-acoustic transducer related to hypernyms.\";         A textual example of the semantic relation is \"are electro-acoustic transducer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "printing machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of printing machine related to hypernyms.\";         A textual example of the semantic relation is \"are printing machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "electronic communication",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of electronic communication related to hypernyms.\";         A textual example of the semantic relation is \"are electronic communication\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "input device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of input device related to hypernyms.\";         A textual example of the semantic relation is \"are input device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "telecommunication",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of telecommunication related to hypernyms.\";         A textual example of the semantic relation is \"are telecommunication\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "control",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of control related to hypernyms.\";         A textual example of the semantic relation is \"are control\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "controller",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of controller related to hypernyms.\";         A textual example of the semantic relation is \"are controller\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "navigational instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of navigational instrument related to hypernyms.\";         A textual example of the semantic relation is \"are navigational instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "transducer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of transducer related to hypernyms.\";         A textual example of the semantic relation is \"are transducer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "source of illumination",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of source of illumination related to hypernyms.\";         A textual example of the semantic relation is \"are source of illumination\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "data input device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of data input device related to hypernyms.\";         A textual example of the semantic relation is \"are data input device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "set",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of set related to hypernyms.\";         A textual example of the semantic relation is \"are set\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of machine related to hypernyms.\";         A textual example of the semantic relation is \"are machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "optical instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of optical instrument related to hypernyms.\";         A textual example of the semantic relation is \"are optical instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "consumer durables",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of consumer durables related to hypernyms.\";         A textual example of the semantic relation is \"are consumer durables\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "electric lamp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of electric lamp related to hypernyms.\";         A textual example of the semantic relation is \"are electric lamp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "durables",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of durables related to hypernyms.\";         A textual example of the semantic relation is \"are durables\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "mechanism",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of mechanism related to hypernyms.\";         A textual example of the semantic relation is \"are mechanism\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "broadcasting",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of broadcasting related to hypernyms.\";         A textual example of the semantic relation is \"are broadcasting\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "consumer goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of consumer goods related to hypernyms.\";         A textual example of the semantic relation is \"are consumer goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "medium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of medium related to hypernyms.\";         A textual example of the semantic relation is \"are medium\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "video display",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of video display related to hypernyms.\";         A textual example of the semantic relation is \"are video display\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of device related to hypernyms.\";         A textual example of the semantic relation is \"are device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "display",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of display.\";         A textual example of the semantic relation is \"can have display\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "mercury",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which mercury is composed.\";         A textual example of the semantic relation is \"can be made of mercury\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "material",
        "value": "alcohol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Material of which alcohol is composed.\";         A textual example of the semantic relation is \"can be made of alcohol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "receiver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of receiver.\";         A textual example of the semantic relation is \"can have receiver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "part",
        "value": "screen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"All the constitutive parts of screen.\";         A textual example of the semantic relation is \"can have screen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "receiver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of receiver related to hypernyms.\";         A textual example of the semantic relation is \"are receiver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "communication",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of communication related to hypernyms.\";         A textual example of the semantic relation is \"are communication\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "appliance",
        "slot": "generalization",
        "value": "display",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"appliance\";         The returned words must satisfy the semantic relation \"Classification of display related to hypernyms.\";         A textual example of the semantic relation is \"are display\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "accessory",
        "value": "seat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with seat. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for seat.\";         A textual example of the semantic relation is \"are related with seat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "accessory",
        "value": "bow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with bow. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for bow.\";         A textual example of the semantic relation is \"are related with bow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "place",
        "value": "France",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entities in which France can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in Frances\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bass horn",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bass horn in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bass horn\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bass viol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bass viol in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bass viol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bombard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bombard in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bombard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "upright piano",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of upright piano in terms of their hyponyms.\";         A textual example of the semantic relation is \"are upright piano\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "contrabass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of contrabass in terms of their hyponyms.\";         A textual example of the semantic relation is \"are contrabass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "sousaphone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of sousaphone in terms of their hyponyms.\";         A textual example of the semantic relation is \"are sousaphone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bass fiddle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bass fiddle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bass fiddle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "double bass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of double bass in terms of their hyponyms.\";         A textual example of the semantic relation is \"are double bass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bull fiddle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bull fiddle in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bull fiddle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "string bass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of string bass in terms of their hyponyms.\";         A textual example of the semantic relation is \"are string bass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "mechanical piano",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of mechanical piano in terms of their hyponyms.\";         A textual example of the semantic relation is \"are mechanical piano\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bombardon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bombardon in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bombardon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "tuba",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of tuba in terms of their hyponyms.\";         A textual example of the semantic relation is \"are tuba\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "player piano",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of player piano in terms of their hyponyms.\";         A textual example of the semantic relation is \"are player piano\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "bass guitar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bass guitar in terms of their hyponyms.\";         A textual example of the semantic relation is \"are bass guitar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "grand piano",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of grand piano in terms of their hyponyms.\";         A textual example of the semantic relation is \"are grand piano\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "specialization",
        "value": "Pianola",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of Pianola in terms of their hyponyms.\";         A textual example of the semantic relation is \"are Pianola\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "bodyPart",
        "value": "finger",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with finger.\";         A textual example of the semantic relation is \"can have or be used with finger\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "bodyPart",
        "value": "mouth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with mouth.\";         A textual example of the semantic relation is \"can have or be used with mouth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "bodyPart",
        "value": "hand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with hand.\";         A textual example of the semantic relation is \"can have or be used with hand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "bodyPart",
        "value": "foot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with foot.\";         A textual example of the semantic relation is \"can have or be used with foot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "bodyPart",
        "value": "knee",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with knee.\";         A textual example of the semantic relation is \"can have or be used with knee\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "cylindrical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of cylindrical.\";         A textual example of the semantic relation is \"can be cylindrical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "thin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of thin.\";         A textual example of the semantic relation is \"can be thin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "shape",
        "value": "hollow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Form of hollow.\";         A textual example of the semantic relation is \"can be hollow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "sit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of sit.\";         A textual example of the semantic relation is \"can be used for sit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "hold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of hold.\";         A textual example of the semantic relation is \"can be used for hold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "blow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of blow.\";         A textual example of the semantic relation is \"can be used for blow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "press",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of press.\";         A textual example of the semantic relation is \"can be used for press\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "sing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of sing.\";         A textual example of the semantic relation is \"can be used for sing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "riff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of riff.\";         A textual example of the semantic relation is \"can be used for riff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "expand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of expand.\";         A textual example of the semantic relation is \"can be used for expand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "fill",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of fill.\";         A textual example of the semantic relation is \"can be used for fill\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "fill",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of fill.\";         A textual example of the semantic relation is \"can be used for fill\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "compress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of compress.\";         A textual example of the semantic relation is \"can be used for compress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "mechanical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of mechanical can be described.\";         A textual example of the semantic relation is \"sound mechanical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "deep",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of deep can be described.\";         A textual example of the semantic relation is \"sound deep\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "versatile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of versatile can be described.\";         A textual example of the semantic relation is \"sound versatile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "acute",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of acute can be described.\";         A textual example of the semantic relation is \"sound acute\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "high",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of high can be described.\";         A textual example of the semantic relation is \"sound high\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "sad",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of sad can be described.\";         A textual example of the semantic relation is \"sound sad\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "melancholy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of melancholy can be described.\";         A textual example of the semantic relation is \"sound melancholy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "sound",
        "value": "mournful",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of mournful can be described.\";         A textual example of the semantic relation is \"sound mournful\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "orchestra",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive orchestra.\";         A textual example of the semantic relation is \"are used by orchestras\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "musician",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive musician.\";         A textual example of the semantic relation is \"are used by musicians\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "band",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive band.\";         A textual example of the semantic relation is \"are used by bands\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "busker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive busker.\";         A textual example of the semantic relation is \"are used by buskers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "accordionist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive accordionist.\";         A textual example of the semantic relation is \"are used by accordionists\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "pianist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive pianist.\";         A textual example of the semantic relation is \"are used by pianists\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "cellist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cellist.\";         A textual example of the semantic relation is \"are used by cellists\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "user",
        "value": "drummer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive drummer.\";         A textual example of the semantic relation is \"are used by drummers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "groove",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which groove is interacted with.\";         A textual example of the semantic relation is \"are used for groove\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "rhythm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which rhythm is interacted with.\";         A textual example of the semantic relation is \"are used for rhythm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "light music",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which light music is interacted with.\";         A textual example of the semantic relation is \"are used for light music\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "jazz",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which jazz is interacted with.\";         A textual example of the semantic relation is \"are used for jazz\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "solo",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which solo is interacted with.\";         A textual example of the semantic relation is \"are used for solo\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "classical music",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which classical music is interacted with.\";         A textual example of the semantic relation is \"are used for classical music\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "playing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which playing is interacted with.\";         A textual example of the semantic relation is \"are used to playing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "beat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which beat is interacted with.\";         A textual example of the semantic relation is \"are used for beat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "sound",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which sound is interacted with.\";         A textual example of the semantic relation is \"are used for sound\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "practice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which practice is interacted with.\";         A textual example of the semantic relation is \"are used for practice\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "sonata",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which sonata is interacted with.\";         A textual example of the semantic relation is \"are used for sonata\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "improvise",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which improvise is interacted with.\";         A textual example of the semantic relation is \"are used to improvise\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "concerto",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which concerto is interacted with.\";         A textual example of the semantic relation is \"are used for concerto\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "trio",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which trio is interacted with.\";         A textual example of the semantic relation is \"are used for trio\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "beat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which beat is interacted with.\";         A textual example of the semantic relation is \"are used to beat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "recital",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which recital is interacted with.\";         A textual example of the semantic relation is \"are used for recital\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "accompaniment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which accompaniment is interacted with.\";         A textual example of the semantic relation is \"are used for accompaniment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "fingerboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fingerboard.\";         A textual example of the semantic relation is \"can have fingerboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "mouthpiece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mouthpiece.\";         A textual example of the semantic relation is \"can have mouthpiece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "register key",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of register key.\";         A textual example of the semantic relation is \"can have register key\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "ligature",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ligature.\";         A textual example of the semantic relation is \"can have ligature\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "scroll",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of scroll.\";         A textual example of the semantic relation is \"can have scroll\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "clavier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of clavier.\";         A textual example of the semantic relation is \"can have clavier\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "resonance chamber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of resonance chamber.\";         A textual example of the semantic relation is \"can have resonance chamber\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "piano keyboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of piano keyboard.\";         A textual example of the semantic relation is \"can have piano keyboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "endpin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of endpin.\";         A textual example of the semantic relation is \"can have endpin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "neck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of neck.\";         A textual example of the semantic relation is \"can have neck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "f-hole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of f-hole.\";         A textual example of the semantic relation is \"can have f-hole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "bridge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bridge.\";         A textual example of the semantic relation is \"can have bridge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "tuning peg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tuning peg.\";         A textual example of the semantic relation is \"can have tuning peg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "strap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of strap.\";         A textual example of the semantic relation is \"can have strap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "body",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of body.\";         A textual example of the semantic relation is \"can have body\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "tailpiece",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tailpiece.\";         A textual example of the semantic relation is \"can have tailpiece\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "fine tuner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fine tuner.\";         A textual example of the semantic relation is \"can have fine tuner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "thumbhole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of thumbhole.\";         A textual example of the semantic relation is \"can have thumbhole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "finger hole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of finger hole.\";         A textual example of the semantic relation is \"can have finger hole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "violin bow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of violin bow.\";         A textual example of the semantic relation is \"can have violin bow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "fall-board",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fall-board.\";         A textual example of the semantic relation is \"can have fall-board\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "key",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of key.\";         A textual example of the semantic relation is \"can have key\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "drumhead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of drumhead.\";         A textual example of the semantic relation is \"can have drumhead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "skin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of skin.\";         A textual example of the semantic relation is \"can have skin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "fallboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fallboard.\";         A textual example of the semantic relation is \"can have fallboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "chin rest",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of chin rest.\";         A textual example of the semantic relation is \"can have chin rest\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "screw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of screw.\";         A textual example of the semantic relation is \"can have screw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "surface",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of surface.\";         A textual example of the semantic relation is \"can have surface\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "membrane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of membrane.\";         A textual example of the semantic relation is \"can have membrane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pedal.\";         A textual example of the semantic relation is \"can have pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "leg",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of leg.\";         A textual example of the semantic relation is \"can have leg\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "piano action",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of piano action.\";         A textual example of the semantic relation is \"can have piano action\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "sustaining pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of sustaining pedal.\";         A textual example of the semantic relation is \"can have sustaining pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "hammer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hammer.\";         A textual example of the semantic relation is \"can have hammer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "soft pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of soft pedal.\";         A textual example of the semantic relation is \"can have soft pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "rope",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rope.\";         A textual example of the semantic relation is \"can have rope\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "soundboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of soundboard.\";         A textual example of the semantic relation is \"can have soundboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "button",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of button.\";         A textual example of the semantic relation is \"can have button\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "fiddlestick",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fiddlestick.\";         A textual example of the semantic relation is \"can have fiddlestick\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "pleat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pleat.\";         A textual example of the semantic relation is \"can have pleat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "loud pedal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of loud pedal.\";         A textual example of the semantic relation is \"can have loud pedal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "music rack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of music rack.\";         A textual example of the semantic relation is \"can have music rack\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "bellows",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bellows.\";         A textual example of the semantic relation is \"can have bellows\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "head",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of head.\";         A textual example of the semantic relation is \"can have head\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "purpose",
        "value": "play",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All of the purposes for which play is interacted with.\";         A textual example of the semantic relation is \"are used to play\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "steel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which steel is composed.\";         A textual example of the semantic relation is \"can be made of steel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "ivory",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which ivory is composed.\";         A textual example of the semantic relation is \"can be made of ivory\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "felt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which felt is composed.\";         A textual example of the semantic relation is \"can be made of felt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "aluminium",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which aluminium is composed.\";         A textual example of the semantic relation is \"can be made of aluminium\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "leather",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which leather is composed.\";         A textual example of the semantic relation is \"can be made of leather\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "cork",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which cork is composed.\";         A textual example of the semantic relation is \"can be made of cork\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "ebony",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which ebony is composed.\";         A textual example of the semantic relation is \"can be made of ebony\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which wood is composed.\";         A textual example of the semantic relation is \"can be made of wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "material",
        "value": "brass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Material of which brass is composed.\";         A textual example of the semantic relation is \"can be made of brass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "string",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of string.\";         A textual example of the semantic relation is \"can have string\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "musical instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of musical instrument related to hypernyms.\";         A textual example of the semantic relation is \"are musical instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of device related to hypernyms.\";         A textual example of the semantic relation is \"are device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "stringed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of stringed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are stringed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "wind instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of wind instrument related to hypernyms.\";         A textual example of the semantic relation is \"are wind instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "wind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of wind related to hypernyms.\";         A textual example of the semantic relation is \"are wind\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "percussion instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of percussion instrument related to hypernyms.\";         A textual example of the semantic relation is \"are percussion instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of instrument related to hypernyms.\";         A textual example of the semantic relation is \"are instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "woodwind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of woodwind related to hypernyms.\";         A textual example of the semantic relation is \"are woodwind\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "percussion",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of percussion related to hypernyms.\";         A textual example of the semantic relation is \"are percussion\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "woodwind instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of woodwind instrument related to hypernyms.\";         A textual example of the semantic relation is \"are woodwind instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "percussive instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of percussive instrument related to hypernyms.\";         A textual example of the semantic relation is \"are percussive instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "keyboard instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of keyboard instrument related to hypernyms.\";         A textual example of the semantic relation is \"are keyboard instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "beating-reed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of beating-reed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are beating-reed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "reed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of reed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are reed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "free-reed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of free-reed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are free-reed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "double-reed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of double-reed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are double-reed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "single-reed woodwind",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of single-reed woodwind related to hypernyms.\";         A textual example of the semantic relation is \"are single-reed woodwind\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "double reed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of double reed related to hypernyms.\";         A textual example of the semantic relation is \"are double reed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "single-reed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of single-reed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are single-reed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "bowed stringed instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of bowed stringed instrument related to hypernyms.\";         A textual example of the semantic relation is \"are bowed stringed instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "brass instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of brass instrument related to hypernyms.\";         A textual example of the semantic relation is \"are brass instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "electronic musical instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of electronic musical instrument related to hypernyms.\";         A textual example of the semantic relation is \"are electronic musical instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "guitar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of guitar related to hypernyms.\";         A textual example of the semantic relation is \"are guitar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "chordophone",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of chordophone related to hypernyms.\";         A textual example of the semantic relation is \"are chordophone\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "flute",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of flute related to hypernyms.\";         A textual example of the semantic relation is \"are flute\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "electronic instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of electronic instrument related to hypernyms.\";         A textual example of the semantic relation is \"are electronic instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "transverse flute",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of transverse flute related to hypernyms.\";         A textual example of the semantic relation is \"are transverse flute\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "howToUse",
        "value": "play",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of play.\";         A textual example of the semantic relation is \"can be used for play\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "reed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of reed.\";         A textual example of the semantic relation is \"can have reed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "part",
        "value": "keyboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"All the constitutive parts of keyboard.\";         A textual example of the semantic relation is \"can have keyboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "reed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of reed related to hypernyms.\";         A textual example of the semantic relation is \"are reed\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "keyboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of keyboard related to hypernyms.\";         A textual example of the semantic relation is \"are keyboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "string",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of string related to hypernyms.\";         A textual example of the semantic relation is \"are string\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "brass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of brass related to hypernyms.\";         A textual example of the semantic relation is \"are brass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "instruments",
        "slot": "generalization",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"instruments\";         The returned words must satisfy the semantic relation \"Classification of wood related to hypernyms.\";         A textual example of the semantic relation is \"are wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "sound",
        "value": "ping",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the entries with which the sound of ping can be described.\";         A textual example of the semantic relation is \"can ping\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "howToUse",
        "value": "wear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of wear.\";         A textual example of the semantic relation is \"can be used for wear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "howToUse",
        "value": "wield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of wield.\";         A textual example of the semantic relation is \"can be used for wield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "howToUse",
        "value": "fasten",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of fasten.\";         A textual example of the semantic relation is \"can be used for fasten\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "howToUse",
        "value": "don",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of don.\";         A textual example of the semantic relation is \"can be used for don\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "bodyPart",
        "value": "chin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with chin.\";         A textual example of the semantic relation is \"can have or be used with chin\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "bodyPart",
        "value": "ring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with ring.\";         A textual example of the semantic relation is \"can have or be used with ring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "bodyPart",
        "value": "head",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with head.\";         A textual example of the semantic relation is \"can have or be used with head\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "bodyPart",
        "value": "wrist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with wrist.\";         A textual example of the semantic relation is \"can have or be used with wrist\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "place",
        "value": "clothes shop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the entities in which clothes shop can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in clothes shops\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "place",
        "value": "building site",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the entities in which building site can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in building sites\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "place",
        "value": "hairdresser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the entities in which hairdresser can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in hairdressers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "place",
        "value": "bedroom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the entities in which bedroom can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bedrooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "place",
        "value": "bathroom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the entities in which bathroom can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in bathrooms\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "bodyPart",
        "value": "bracelet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with bracelet.\";         A textual example of the semantic relation is \"can have or be used with bracelet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "efficiency",
        "value": "waterproof",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of waterproof related to their function.\";         A textual example of the semantic relation is \"can be waterproof\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "efficiency",
        "value": "fragile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of fragile related to their function.\";         A textual example of the semantic relation is \"can be fragile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "efficiency",
        "value": "strong",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of strong related to their function.\";         A textual example of the semantic relation is \"can be strong\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "efficiency",
        "value": "resistant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of resistant related to their function.\";         A textual example of the semantic relation is \"can be resistant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "write",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which write is interacted with.\";         A textual example of the semantic relation is \"are used to write\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "safety",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which safety is interacted with.\";         A textual example of the semantic relation is \"are used for safety\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "climbing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which climbing is interacted with.\";         A textual example of the semantic relation is \"are used for climbing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "fight",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which fight is interacted with.\";         A textual example of the semantic relation is \"are used for fight\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "sport",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which sport is interacted with.\";         A textual example of the semantic relation is \"are used for sport\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "hang",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which hang is interacted with.\";         A textual example of the semantic relation is \"are used to hang\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "reflect",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which reflect is interacted with.\";         A textual example of the semantic relation is \"are used to reflect\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "groom",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which groom is interacted with.\";         A textual example of the semantic relation is \"are used to groom\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "secretary",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive secretary.\";         A textual example of the semantic relation is \"are used by secretaries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "woman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive woman.\";         A textual example of the semantic relation is \"are used by women\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "riot police",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive riot police.\";         A textual example of the semantic relation is \"are used by riot polices\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "soldier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive soldier.\";         A textual example of the semantic relation is \"are used by soldiers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "climber",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive climber.\";         A textual example of the semantic relation is \"are used by climbers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "writer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive writer.\";         A textual example of the semantic relation is \"are used by writers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "cyclist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive cyclist.\";         A textual example of the semantic relation is \"are used by cyclists\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "horseman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive horseman.\";         A textual example of the semantic relation is \"are used by horsemen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "user",
        "value": "motorcyclist",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive motorcyclist.\";         A textual example of the semantic relation is \"are used by motorcyclists\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "shape",
        "value": "rond",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Form of rond.\";         A textual example of the semantic relation is \"can be rond\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "shape",
        "value": "arched",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Form of arched.\";         A textual example of the semantic relation is \"can be arched\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "shape",
        "value": "spherical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Form of spherical.\";         A textual example of the semantic relation is \"can be spherical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "golden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of golden.\";         A textual example of the semantic relation is \"can be golden\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "sparkly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of sparkly.\";         A textual example of the semantic relation is \"can be sparkly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "white",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of white.\";         A textual example of the semantic relation is \"can be white\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "shade",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which shade is interacted with.\";         A textual example of the semantic relation is \"are used for shade\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "shelter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which shelter is interacted with.\";         A textual example of the semantic relation is \"are used for shelter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "bodyPart",
        "value": "jewelry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with jewelry.\";         A textual example of the semantic relation is \"can have or be used with jewelry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "clasp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of clasp.\";         A textual example of the semantic relation is \"can have clasp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "fastener",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fastener.\";         A textual example of the semantic relation is \"can have fastener\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "tip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tip.\";         A textual example of the semantic relation is \"can have tip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "bead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bead.\";         A textual example of the semantic relation is \"can have bead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "ink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ink.\";         A textual example of the semantic relation is \"can have ink\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "lever",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lever.\";         A textual example of the semantic relation is \"can have lever\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "platen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of platen.\";         A textual example of the semantic relation is \"can have platen\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "knob",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of knob.\";         A textual example of the semantic relation is \"can have knob\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "pickup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pickup.\";         A textual example of the semantic relation is \"can have pickup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "parasol",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of parasol.\";         A textual example of the semantic relation is \"can have parasol\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "shaft",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shaft.\";         A textual example of the semantic relation is \"can have shaft\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "felloe",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of felloe.\";         A textual example of the semantic relation is \"can have felloe\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "rib",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rib.\";         A textual example of the semantic relation is \"can have rib\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "felly",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of felly.\";         A textual example of the semantic relation is \"can have felly\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "cartridge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cartridge.\";         A textual example of the semantic relation is \"can have cartridge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "key",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of key.\";         A textual example of the semantic relation is \"can have key\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "pendent",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pendent.\";         A textual example of the semantic relation is \"can have pendent\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "typewriter carriage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of typewriter carriage.\";         A textual example of the semantic relation is \"can have typewriter carriage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "typewriter keyboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of typewriter keyboard.\";         A textual example of the semantic relation is \"can have typewriter keyboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "tone arm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tone arm.\";         A textual example of the semantic relation is \"can have tone arm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "angle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of angle.\";         A textual example of the semantic relation is \"can have angle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "radio chassis",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of radio chassis.\";         A textual example of the semantic relation is \"can have radio chassis\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "changer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of changer.\";         A textual example of the semantic relation is \"can have changer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "buckle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of buckle.\";         A textual example of the semantic relation is \"can have buckle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "record changer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of record changer.\";         A textual example of the semantic relation is \"can have record changer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "frame",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of frame.\";         A textual example of the semantic relation is \"can have frame\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "eraser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of eraser.\";         A textual example of the semantic relation is \"can have eraser\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "turntable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of turntable.\";         A textual example of the semantic relation is \"can have turntable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "ferrule",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ferrule.\";         A textual example of the semantic relation is \"can have ferrule\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "beaver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of beaver.\";         A textual example of the semantic relation is \"can have beaver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "keyboard",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of keyboard.\";         A textual example of the semantic relation is \"can have keyboard\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "bell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bell.\";         A textual example of the semantic relation is \"can have bell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "pickup arm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pickup arm.\";         A textual example of the semantic relation is \"can have pickup arm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "rim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rim.\";         A textual example of the semantic relation is \"can have rim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "carriage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of carriage.\";         A textual example of the semantic relation is \"can have carriage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "pendant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pendant.\";         A textual example of the semantic relation is \"can have pendant\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "panel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of panel.\";         A textual example of the semantic relation is \"can have panel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "ribbon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ribbon.\";         A textual example of the semantic relation is \"can have ribbon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "strap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of strap.\";         A textual example of the semantic relation is \"can have strap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "visor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of visor.\";         A textual example of the semantic relation is \"can have visor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "gore",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gore.\";         A textual example of the semantic relation is \"can have gore\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "auto-changer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of auto-changer.\";         A textual example of the semantic relation is \"can have auto-changer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "purpose",
        "value": "protection",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All of the purposes for which protection is interacted with.\";         A textual example of the semantic relation is \"are used for protection\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "fibre",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which fibre is composed.\";         A textual example of the semantic relation is \"can be made of fibre\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "leather",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which leather is composed.\";         A textual example of the semantic relation is \"can be made of leather\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "elastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which elastic is composed.\";         A textual example of the semantic relation is \"can be made of elastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "pearl",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which pearl is composed.\";         A textual example of the semantic relation is \"can be made of pearl\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "thread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which thread is composed.\";         A textual example of the semantic relation is \"can be made of thread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which wood is composed.\";         A textual example of the semantic relation is \"can be made of wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "polycarbonate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which polycarbonate is composed.\";         A textual example of the semantic relation is \"can be made of polycarbonate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "canvas",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which canvas is composed.\";         A textual example of the semantic relation is \"can be made of canvas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "fiberglass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which fiberglass is composed.\";         A textual example of the semantic relation is \"can be made of fiberglass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "steel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which steel is composed.\";         A textual example of the semantic relation is \"can be made of steel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "grease",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which grease is composed.\";         A textual example of the semantic relation is \"can be made of grease\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which glass is composed.\";         A textual example of the semantic relation is \"can be made of glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "gold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of gold.\";         A textual example of the semantic relation is \"can be gold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "canopy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of canopy.\";         A textual example of the semantic relation is \"can have canopy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which silver is composed.\";         A textual example of the semantic relation is \"can be made of silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "gold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which gold is composed.\";         A textual example of the semantic relation is \"can be made of gold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "cloth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which cloth is composed.\";         A textual example of the semantic relation is \"can be made of cloth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "fabric",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which fabric is composed.\";         A textual example of the semantic relation is \"can be made of fabric\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "bracelet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bracelet.\";         A textual example of the semantic relation is \"can have bracelet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "shell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shell.\";         A textual example of the semantic relation is \"can have shell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "gem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of gem.\";         A textual example of the semantic relation is \"can have gem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "material",
        "value": "gem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Material of which gem is composed.\";         A textual example of the semantic relation is \"can be made of gem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of device related to hypernyms.\";         A textual example of the semantic relation is \"are device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "artifact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of artifact related to hypernyms.\";         A textual example of the semantic relation is \"are artifact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "artefact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of artefact related to hypernyms.\";         A textual example of the semantic relation is \"are artefact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "covering",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of covering related to hypernyms.\";         A textual example of the semantic relation is \"are covering\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "clothing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of clothing related to hypernyms.\";         A textual example of the semantic relation is \"are clothing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "consumer goods",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of consumer goods related to hypernyms.\";         A textual example of the semantic relation is \"are consumer goods\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "protective covering",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of protective covering related to hypernyms.\";         A textual example of the semantic relation is \"are protective covering\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "article of clothing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of article of clothing related to hypernyms.\";         A textual example of the semantic relation is \"are article of clothing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "wearable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of wearable related to hypernyms.\";         A textual example of the semantic relation is \"are wearable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "furniture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of furniture related to hypernyms.\";         A textual example of the semantic relation is \"are furniture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "vesture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of vesture related to hypernyms.\";         A textual example of the semantic relation is \"are vesture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "wear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of wear related to hypernyms.\";         A textual example of the semantic relation is \"are wear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "habiliment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of habiliment related to hypernyms.\";         A textual example of the semantic relation is \"are habiliment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "setup",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of setup related to hypernyms.\";         A textual example of the semantic relation is \"are setup\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "apparatus",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of apparatus related to hypernyms.\";         A textual example of the semantic relation is \"are apparatus\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "equipment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of equipment related to hypernyms.\";         A textual example of the semantic relation is \"are equipment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "duplicator",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of duplicator related to hypernyms.\";         A textual example of the semantic relation is \"are duplicator\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "copier",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of copier related to hypernyms.\";         A textual example of the semantic relation is \"are copier\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "material",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of material related to hypernyms.\";         A textual example of the semantic relation is \"are material\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "body covering",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of body covering related to hypernyms.\";         A textual example of the semantic relation is \"are body covering\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "armour plate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of armour plate related to hypernyms.\";         A textual example of the semantic relation is \"are armour plate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "bedclothes",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of bedclothes related to hypernyms.\";         A textual example of the semantic relation is \"are bedclothes\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "commodity",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of commodity related to hypernyms.\";         A textual example of the semantic relation is \"are commodity\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "textile",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of textile related to hypernyms.\";         A textual example of the semantic relation is \"are textile\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "shield",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of shield related to hypernyms.\";         A textual example of the semantic relation is \"are shield\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of structure related to hypernyms.\";         A textual example of the semantic relation is \"are structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "armour",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of armour related to hypernyms.\";         A textual example of the semantic relation is \"are armour\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "plate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of plate related to hypernyms.\";         A textual example of the semantic relation is \"are plate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "bedding",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of bedding related to hypernyms.\";         A textual example of the semantic relation is \"are bedding\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "garment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of garment related to hypernyms.\";         A textual example of the semantic relation is \"are garment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "stuff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of stuff related to hypernyms.\";         A textual example of the semantic relation is \"are stuff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "plate armour",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of plate armour related to hypernyms.\";         A textual example of the semantic relation is \"are plate armour\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "paper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of paper related to hypernyms.\";         A textual example of the semantic relation is \"are paper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "mechanism",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of mechanism related to hypernyms.\";         A textual example of the semantic relation is \"are mechanism\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "bed clothing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of bed clothing related to hypernyms.\";         A textual example of the semantic relation is \"are bed clothing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "cloth covering",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of cloth covering related to hypernyms.\";         A textual example of the semantic relation is \"are cloth covering\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "sheet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of sheet related to hypernyms.\";         A textual example of the semantic relation is \"are sheet\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "mechanical device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of mechanical device related to hypernyms.\";         A textual example of the semantic relation is \"are mechanical device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "construction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of construction related to hypernyms.\";         A textual example of the semantic relation is \"are construction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "plate armor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of plate armor related to hypernyms.\";         A textual example of the semantic relation is \"are plate armor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "writing paper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of writing paper related to hypernyms.\";         A textual example of the semantic relation is \"are writing paper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "character printer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of character printer related to hypernyms.\";         A textual example of the semantic relation is \"are character printer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "scale",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of scale related to hypernyms.\";         A textual example of the semantic relation is \"are scale\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "serial printer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of serial printer related to hypernyms.\";         A textual example of the semantic relation is \"are serial printer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "armor plating",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of armor plating related to hypernyms.\";         A textual example of the semantic relation is \"are armor plating\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "flat solid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of flat solid related to hypernyms.\";         A textual example of the semantic relation is \"are flat solid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "armor plate",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of armor plate related to hypernyms.\";         A textual example of the semantic relation is \"are armor plate\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "good",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of good related to hypernyms.\";         A textual example of the semantic relation is \"are good\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "armor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of armor related to hypernyms.\";         A textual example of the semantic relation is \"are armor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "simple machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of simple machine related to hypernyms.\";         A textual example of the semantic relation is \"are simple machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "optical device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of optical device related to hypernyms.\";         A textual example of the semantic relation is \"are optical device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "scute",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of scute related to hypernyms.\";         A textual example of the semantic relation is \"are scute\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "trade good",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of trade good related to hypernyms.\";         A textual example of the semantic relation is \"are trade good\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "printing machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of printing machine related to hypernyms.\";         A textual example of the semantic relation is \"are printing machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "printer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of printer related to hypernyms.\";         A textual example of the semantic relation is \"are printer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "character-at-a-time printer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of character-at-a-time printer related to hypernyms.\";         A textual example of the semantic relation is \"are character-at-a-time printer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "reflector",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of reflector related to hypernyms.\";         A textual example of the semantic relation is \"are reflector\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "container",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of container related to hypernyms.\";         A textual example of the semantic relation is \"are container\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "source of illumination",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of source of illumination related to hypernyms.\";         A textual example of the semantic relation is \"are source of illumination\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "headgear",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of headgear related to hypernyms.\";         A textual example of the semantic relation is \"are headgear\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of tool related to hypernyms.\";         A textual example of the semantic relation is \"are tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of utensil related to hypernyms.\";         A textual example of the semantic relation is \"are utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "decoration",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of decoration related to hypernyms.\";         A textual example of the semantic relation is \"are decoration\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "accessory",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of accessory related to hypernyms.\";         A textual example of the semantic relation is \"are accessory\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "ornamentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of ornamentation related to hypernyms.\";         A textual example of the semantic relation is \"are ornamentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "ornament",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of ornament related to hypernyms.\";         A textual example of the semantic relation is \"are ornament\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "adornment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of adornment related to hypernyms.\";         A textual example of the semantic relation is \"are adornment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "implement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of implement related to hypernyms.\";         A textual example of the semantic relation is \"are implement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "protective cover",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of protective cover related to hypernyms.\";         A textual example of the semantic relation is \"are protective cover\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of machine related to hypernyms.\";         A textual example of the semantic relation is \"are machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "whole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of whole related to hypernyms.\";         A textual example of the semantic relation is \"are whole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of unit related to hypernyms.\";         A textual example of the semantic relation is \"are unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "headdress",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of headdress related to hypernyms.\";         A textual example of the semantic relation is \"are headdress\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "jewelry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of jewelry related to hypernyms.\";         A textual example of the semantic relation is \"are jewelry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "protection",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of protection related to hypernyms.\";         A textual example of the semantic relation is \"are protection\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "part",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"All the constitutive parts of glass.\";         A textual example of the semantic relation is \"can have glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "shell",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of shell related to hypernyms.\";         A textual example of the semantic relation is \"are shell\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "shelter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of shelter related to hypernyms.\";         A textual example of the semantic relation is \"are shelter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "shade",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of shade related to hypernyms.\";         A textual example of the semantic relation is \"are shade\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "cloth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of cloth related to hypernyms.\";         A textual example of the semantic relation is \"are cloth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "fabric",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of fabric related to hypernyms.\";         A textual example of the semantic relation is \"are fabric\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "artifacts",
        "slot": "generalization",
        "value": "canopy",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"artifacts\";         The returned words must satisfy the semantic relation \"Classification of canopy related to hypernyms.\";         A textual example of the semantic relation is \"are canopy\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "user",
        "value": "sailor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive sailor.\";         A textual example of the semantic relation is \"are used by sailors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "user",
        "value": "farmer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive farmer.\";         A textual example of the semantic relation is \"are used by farmers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "size",
        "value": "small",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Size of small.\";         A textual example of the semantic relation is \"can be small\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "howToUse",
        "value": "stand up",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of stand up.\";         A textual example of the semantic relation is \"can be used for stand up\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "howToUse",
        "value": "hold",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the actions or states required to operate, employ, interact with or perceive the existence of hold.\";         A textual example of the semantic relation is \"can be used for hold\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "place",
        "value": "kitchen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the entities in which kitchen can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in kitchens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "toolbox",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with toolbox. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for toolbox.\";         A textual example of the semantic relation is \"are related with toolbox\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "place",
        "value": "shed",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the entities in which shed can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in sheds\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "place",
        "value": "garden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the entities in which garden can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in gardens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "screwdriver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with screwdriver. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for screwdriver.\";         A textual example of the semantic relation is \"are related with screwdriver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "rod",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with rod. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for rod.\";         A textual example of the semantic relation is \"are related with rod\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "place",
        "value": "laboratory",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the entities in which laboratory can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in laboratories\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "bolt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with bolt. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for bolt.\";         A textual example of the semantic relation is \"are related with bolt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "staple",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with staple. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for staple.\";         A textual example of the semantic relation is \"are related with staple\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "place",
        "value": "hairdresser",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the entities in which hairdresser can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in hairdressers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "knob",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with knob. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for knob.\";         A textual example of the semantic relation is \"are related with knob\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "build",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which build is interacted with.\";         A textual example of the semantic relation is \"are used to build\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "cooking",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which cooking is interacted with.\";         A textual example of the semantic relation is \"are used for cooking\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "agriculture",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which agriculture is interacted with.\";         A textual example of the semantic relation is \"are used for agriculture\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "lock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which lock is interacted with.\";         A textual example of the semantic relation is \"are used to lock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "weeding",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which weeding is interacted with.\";         A textual example of the semantic relation is \"are used for weeding\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "pick up",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which pick up is interacted with.\";         A textual example of the semantic relation is \"are used to pick up\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "cut",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which cut is interacted with.\";         A textual example of the semantic relation is \"are used to cut\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "moor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which moor is interacted with.\";         A textual example of the semantic relation is \"are used to moor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "secure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which secure is interacted with.\";         A textual example of the semantic relation is \"are used for secure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "dock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which dock is interacted with.\";         A textual example of the semantic relation is \"are used to dock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "grip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which grip is interacted with.\";         A textual example of the semantic relation is \"are used to grip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "clamp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which clamp is interacted with.\";         A textual example of the semantic relation is \"are used to clamp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "serve",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which serve is interacted with.\";         A textual example of the semantic relation is \"are used to serve\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "fasten",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which fasten is interacted with.\";         A textual example of the semantic relation is \"are used for fasten\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "secure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which secure is interacted with.\";         A textual example of the semantic relation is \"are used to secure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "dig",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which dig is interacted with.\";         A textual example of the semantic relation is \"are used to dig\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "clamp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which clamp is interacted with.\";         A textual example of the semantic relation is \"are used for clamp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "purpose",
        "value": "tighten",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All of the purposes for which tighten is interacted with.\";         A textual example of the semantic relation is \"are used to tighten\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "screw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with screw. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for screw.\";         A textual example of the semantic relation is \"are related with screw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "shape",
        "value": "elongated",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Form of elongated.\";         A textual example of the semantic relation is \"can be elongated\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "shape",
        "value": "long",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Form of long.\";         A textual example of the semantic relation is \"can be long\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "shape",
        "value": "curved",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Form of curved.\";         A textual example of the semantic relation is \"can be curved\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "shape",
        "value": "cylindrical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Form of cylindrical.\";         A textual example of the semantic relation is \"can be cylindrical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "shape",
        "value": "triangular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Form of triangular.\";         A textual example of the semantic relation is \"can be triangular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "blade",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of blade.\";         A textual example of the semantic relation is \"can have blade\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "edge",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of edge.\";         A textual example of the semantic relation is \"can have edge\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "head",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of head.\";         A textual example of the semantic relation is \"can have head\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "shank",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of shank.\";         A textual example of the semantic relation is \"can have shank\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "fluke",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of fluke.\";         A textual example of the semantic relation is \"can have fluke\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "hammerhead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hammerhead.\";         A textual example of the semantic relation is \"can have hammerhead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "pinhead",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pinhead.\";         A textual example of the semantic relation is \"can have pinhead\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "thread",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of thread.\";         A textual example of the semantic relation is \"can have thread\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "stock",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stock.\";         A textual example of the semantic relation is \"can have stock\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "rake handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rake handle.\";         A textual example of the semantic relation is \"can have rake handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "point",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of point.\";         A textual example of the semantic relation is \"can have point\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "clinch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of clinch.\";         A textual example of the semantic relation is \"can have clinch\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "hoe handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hoe handle.\";         A textual example of the semantic relation is \"can have hoe handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "ring",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of ring.\";         A textual example of the semantic relation is \"can have ring\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "razorblade",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of razorblade.\";         A textual example of the semantic relation is \"can have razorblade\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "stem",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stem.\";         A textual example of the semantic relation is \"can have stem\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "slot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of slot.\";         A textual example of the semantic relation is \"can have slot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "part",
        "value": "arm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the constitutive parts of arm.\";         A textual example of the semantic relation is \"can have arm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "material",
        "value": "steel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Material of which steel is composed.\";         A textual example of the semantic relation is \"can be made of steel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "material",
        "value": "iron",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Material of which iron is composed.\";         A textual example of the semantic relation is \"can be made of iron\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "material",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Material of which wood is composed.\";         A textual example of the semantic relation is \"can be made of wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "silver",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of silver.\";         A textual example of the semantic relation is \"can be silver\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "black",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of black.\";         A textual example of the semantic relation is \"can be black\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "colorPattern",
        "value": "golden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of golden.\";         A textual example of the semantic relation is \"can be golden\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "accessory",
        "value": "fastener",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"All those objects that may have to do with fastener. The constraint is that there must be a physical contact and that the use of such object is strictly necessary for fastener.\";         A textual example of the semantic relation is \"are related with fastener\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "fastening",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of fastening related to hypernyms.\";         A textual example of the semantic relation is \"are fastening\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "fixing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of fixing related to hypernyms.\";         A textual example of the semantic relation is \"are fixing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "holdfast",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of holdfast related to hypernyms.\";         A textual example of the semantic relation is \"are holdfast\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "edge tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of edge tool related to hypernyms.\";         A textual example of the semantic relation is \"are edge tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of machine related to hypernyms.\";         A textual example of the semantic relation is \"are machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "lever",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of lever related to hypernyms.\";         A textual example of the semantic relation is \"are lever\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "mechanism",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of mechanism related to hypernyms.\";         A textual example of the semantic relation is \"are mechanism\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "cutting implement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of cutting implement related to hypernyms.\";         A textual example of the semantic relation is \"are cutting implement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "simple machine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of simple machine related to hypernyms.\";         A textual example of the semantic relation is \"are simple machine\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "knife",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of knife related to hypernyms.\";         A textual example of the semantic relation is \"are knife\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "compound lever",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of compound lever related to hypernyms.\";         A textual example of the semantic relation is \"are compound lever\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "connexion",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of connexion related to hypernyms.\";         A textual example of the semantic relation is \"are connexion\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "kitchen utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of kitchen utensil related to hypernyms.\";         A textual example of the semantic relation is \"are kitchen utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "scissors",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of scissors related to hypernyms.\";         A textual example of the semantic relation is \"are scissors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "connector",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of connector related to hypernyms.\";         A textual example of the semantic relation is \"are connector\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "opener",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of opener related to hypernyms.\";         A textual example of the semantic relation is \"are opener\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "pair of scissors",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of pair of scissors related to hypernyms.\";         A textual example of the semantic relation is \"are pair of scissors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "bottle opener",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of bottle opener related to hypernyms.\";         A textual example of the semantic relation is \"are bottle opener\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "weapon",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of weapon related to hypernyms.\";         A textual example of the semantic relation is \"are weapon\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of structure related to hypernyms.\";         A textual example of the semantic relation is \"are structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "connecter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of connecter related to hypernyms.\";         A textual example of the semantic relation is \"are connecter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "surgical instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of surgical instrument related to hypernyms.\";         A textual example of the semantic relation is \"are surgical instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "form",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of form related to hypernyms.\";         A textual example of the semantic relation is \"are form\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "impedimenta",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of impedimenta related to hypernyms.\";         A textual example of the semantic relation is \"are impedimenta\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "shape",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of shape related to hypernyms.\";         A textual example of the semantic relation is \"are shape\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "impediment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of impediment related to hypernyms.\";         A textual example of the semantic relation is \"are impediment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "attachment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of attachment related to hypernyms.\";         A textual example of the semantic relation is \"are attachment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "medical instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of medical instrument related to hypernyms.\";         A textual example of the semantic relation is \"are medical instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "line",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of line related to hypernyms.\";         A textual example of the semantic relation is \"are line\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "paper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of paper related to hypernyms.\";         A textual example of the semantic relation is \"are paper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "inclined plane",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of inclined plane related to hypernyms.\";         A textual example of the semantic relation is \"are inclined plane\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "instrument",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of instrument related to hypernyms.\";         A textual example of the semantic relation is \"are instrument\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "playing card",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of playing card related to hypernyms.\";         A textual example of the semantic relation is \"are playing card\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "seal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of seal related to hypernyms.\";         A textual example of the semantic relation is \"are seal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "connective",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of connective related to hypernyms.\";         A textual example of the semantic relation is \"are connective\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "ligament",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of ligament related to hypernyms.\";         A textual example of the semantic relation is \"are ligament\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "construction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of construction related to hypernyms.\";         A textual example of the semantic relation is \"are construction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "tumbler",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of tumbler related to hypernyms.\";         A textual example of the semantic relation is \"are tumbler\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "obstruction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of obstruction related to hypernyms.\";         A textual example of the semantic relation is \"are obstruction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "obstructor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of obstructor related to hypernyms.\";         A textual example of the semantic relation is \"are obstructor\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "weapon system",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of weapon system related to hypernyms.\";         A textual example of the semantic relation is \"are weapon system\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "surgical knife",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of surgical knife related to hypernyms.\";         A textual example of the semantic relation is \"are surgical knife\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "card",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of card related to hypernyms.\";         A textual example of the semantic relation is \"are card\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "filter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of filter related to hypernyms.\";         A textual example of the semantic relation is \"are filter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "claw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of claw related to hypernyms.\";         A textual example of the semantic relation is \"are claw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "hook",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of hook related to hypernyms.\";         A textual example of the semantic relation is \"are hook\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "curved shape",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of curved shape related to hypernyms.\";         A textual example of the semantic relation is \"are curved shape\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "obstructer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of obstructer related to hypernyms.\";         A textual example of the semantic relation is \"are obstructer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "bond",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of bond related to hypernyms.\";         A textual example of the semantic relation is \"are bond\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "connection",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of connection related to hypernyms.\";         A textual example of the semantic relation is \"are connection\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "strainer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of strainer related to hypernyms.\";         A textual example of the semantic relation is \"are strainer\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "curve",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of curve related to hypernyms.\";         A textual example of the semantic relation is \"are curve\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "bar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of bar related to hypernyms.\";         A textual example of the semantic relation is \"are bar\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of tool related to hypernyms.\";         A textual example of the semantic relation is \"are tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of utensil related to hypernyms.\";         A textual example of the semantic relation is \"are utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "implement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of implement related to hypernyms.\";         A textual example of the semantic relation is \"are implement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "object",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of object related to hypernyms.\";         A textual example of the semantic relation is \"are object\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of device related to hypernyms.\";         A textual example of the semantic relation is \"are device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "hand tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of hand tool related to hypernyms.\";         A textual example of the semantic relation is \"are hand tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "restraint",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of restraint related to hypernyms.\";         A textual example of the semantic relation is \"are restraint\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "constraint",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of constraint related to hypernyms.\";         A textual example of the semantic relation is \"are constraint\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "cutting tool",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of cutting tool related to hypernyms.\";         A textual example of the semantic relation is \"are cutting tool\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "artifact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of artifact related to hypernyms.\";         A textual example of the semantic relation is \"are artifact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "cutter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of cutter related to hypernyms.\";         A textual example of the semantic relation is \"are cutter\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "mechanical device",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of mechanical device related to hypernyms.\";         A textual example of the semantic relation is \"are mechanical device\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "artefact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of artefact related to hypernyms.\";         A textual example of the semantic relation is \"are artefact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "cutlery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of cutlery related to hypernyms.\";         A textual example of the semantic relation is \"are cutlery\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "fastener",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of fastener related to hypernyms.\";         A textual example of the semantic relation is \"are fastener\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "screw",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of screw related to hypernyms.\";         A textual example of the semantic relation is \"are screw\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "tools",
        "slot": "generalization",
        "value": "arm",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"tools\";         The returned words must satisfy the semantic relation \"Classification of arm related to hypernyms.\";         A textual example of the semantic relation is \"are arm\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "bodyPart",
        "value": "shoulder",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with shoulder.\";         A textual example of the semantic relation is \"can have or be used with shoulder\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "bodyPart",
        "value": "hand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the body parts which are involved in interacting with hand.\";         A textual example of the semantic relation is \"can have or be used with hand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "user",
        "value": "woman",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive woman.\";         A textual example of the semantic relation is \"are used by women\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "user",
        "value": "waiter",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the kinds of living beings which are able to operate, employ, interact with or perceive waiter.\";         A textual example of the semantic relation is \"are used by waiters\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "impermeable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of impermeable related to their function.\";         A textual example of the semantic relation is \"can be impermeable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "recyclable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of recyclable related to their function.\";         A textual example of the semantic relation is \"can be recyclable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "recycled",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of recycled related to their function.\";         A textual example of the semantic relation is \"can be recycled\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "breakable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of breakable related to their function.\";         A textual example of the semantic relation is \"can be breakable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "colorPattern",
        "value": "transparent",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of transparent.\";         A textual example of the semantic relation is \"can be transparent\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "colorPattern",
        "value": "green",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of green.\";         A textual example of the semantic relation is \"can be green\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "colorPattern",
        "value": "brown",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of brown.\";         A textual example of the semantic relation is \"can be brown\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "colorPattern",
        "value": "cream",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the features that refer to the color or texture of cream.\";         A textual example of the semantic relation is \"can be cream\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "carry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which carry is interacted with.\";         A textual example of the semantic relation is \"are used to carry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "store",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which store is interacted with.\";         A textual example of the semantic relation is \"are used to store\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "cleaning",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which cleaning is interacted with.\";         A textual example of the semantic relation is \"are used for cleaning\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "shopping",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which shopping is interacted with.\";         A textual example of the semantic relation is \"are used for shopping\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "gardening",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which gardening is interacted with.\";         A textual example of the semantic relation is \"are used for gardening\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "storage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which storage is interacted with.\";         A textual example of the semantic relation is \"are used for storage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "purpose",
        "value": "tote",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All of the purposes for which tote is interacted with.\";         A textual example of the semantic relation is \"are used to tote\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "shaped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of shaped related to their function.\";         A textual example of the semantic relation is \"can be shaped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of plastic related to their function.\";         A textual example of the semantic relation is \"can be plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "kitchen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which kitchen can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in kitchens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "supermarket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which supermarket can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in supermarkets\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "restaurant",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which restaurant can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in restaurants\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "shop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which shop can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in shops\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "cafeteria",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which cafeteria can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cafeterias\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "canteen",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which canteen can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in canteens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "pub",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which pub can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in pubs\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "cellar",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which cellar can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in cellars\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "garden",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which garden can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in gardens\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "place",
        "value": "beach",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities in which beach can be experienced, found or perceived.\";         A textual example of the semantic relation is \"can be found or used in beaches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "shaped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of shaped related to their function.\";         A textual example of the semantic relation is \"can be shaped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "recycled",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of recycled related to their function.\";         A textual example of the semantic relation is \"can be recycled\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "bung",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bung.\";         A textual example of the semantic relation is \"can have bung\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "hoop",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hoop.\";         A textual example of the semantic relation is \"can have hoop\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "lid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of lid.\";         A textual example of the semantic relation is \"can have lid\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "label",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of label.\";         A textual example of the semantic relation is \"can have label\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "tap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of tap.\";         A textual example of the semantic relation is \"can have tap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "stave",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stave.\";         A textual example of the semantic relation is \"can have stave\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "rear of tube",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rear of tube.\";         A textual example of the semantic relation is \"can have rear of tube\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "cental",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cental.\";         A textual example of the semantic relation is \"can have cental\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "strap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of strap.\";         A textual example of the semantic relation is \"can have strap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "zipper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of zipper.\";         A textual example of the semantic relation is \"can have zipper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "rear of barrel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rear of barrel.\";         A textual example of the semantic relation is \"can have rear of barrel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "compartment",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of compartment.\";         A textual example of the semantic relation is \"can have compartment\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "pocket",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of pocket.\";         A textual example of the semantic relation is \"can have pocket\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "base",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of base.\";         A textual example of the semantic relation is \"can have base\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "cap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cap.\";         A textual example of the semantic relation is \"can have cap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "hundredweight",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of hundredweight.\";         A textual example of the semantic relation is \"can have hundredweight\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "cwt",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cwt.\";         A textual example of the semantic relation is \"can have cwt\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "neck",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of neck.\";         A textual example of the semantic relation is \"can have neck\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "centner",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of centner.\";         A textual example of the semantic relation is \"can have centner\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "quintal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of quintal.\";         A textual example of the semantic relation is \"can have quintal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "rim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of rim.\";         A textual example of the semantic relation is \"can have rim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "breech",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of breech.\";         A textual example of the semantic relation is \"can have breech\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "spigot",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spigot.\";         A textual example of the semantic relation is \"can have spigot\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "short hundredweight",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of short hundredweight.\";         A textual example of the semantic relation is \"can have short hundredweight\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "spout",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of spout.\";         A textual example of the semantic relation is \"can have spout\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "bottlecap",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of bottlecap.\";         A textual example of the semantic relation is \"can have bottlecap\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "mouth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of mouth.\";         A textual example of the semantic relation is \"can have mouth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "brim",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of brim.\";         A textual example of the semantic relation is \"can have brim\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "zip",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of zip.\";         A textual example of the semantic relation is \"can have zip\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "cork",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of cork.\";         A textual example of the semantic relation is \"can have cork\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "clasp",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of clasp.\";         A textual example of the semantic relation is \"can have clasp\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "stopper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of stopper.\";         A textual example of the semantic relation is \"can have stopper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "handle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of handle.\";         A textual example of the semantic relation is \"can have handle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "liquid",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within liquid, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain liquids\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "wine",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within wine, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain wines\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "drink",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within drink, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain drinks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "beer",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within beer, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain beers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "grocery",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within grocery, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain groceries\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "liquor",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within liquor, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain liquors\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "sand",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within sand, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain sand\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "biscuit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within biscuit, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain biscuits\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "soda",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within soda, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain sodas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "gardening",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within gardening, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain gardenings\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "backpack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within backpack, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain backpacks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "wallet",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within wallet, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain wallets\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "flower",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within flower, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain flowers\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "muffin",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within muffin, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain muffins\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "water",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within water, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain water\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "ice",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within ice, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain ices\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "spray",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within spray, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain sprays\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "haversack",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within haversack, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain haversacks\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "purse",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within purse, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain purses\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "lunch",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within lunch, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain lunches\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "metal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which metal is composed.\";         A textual example of the semantic relation is \"can be made of metal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "wood",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which wood is composed.\";         A textual example of the semantic relation is \"can be made of wood\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "ceramic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which ceramic is composed.\";         A textual example of the semantic relation is \"can be made of ceramic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "polyester",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which polyester is composed.\";         A textual example of the semantic relation is \"can be made of polyester\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "cotton",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which cotton is composed.\";         A textual example of the semantic relation is \"can be made of cotton\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "canvas",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which canvas is composed.\";         A textual example of the semantic relation is \"can be made of canvas\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "fibre",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which fibre is composed.\";         A textual example of the semantic relation is \"can be made of fibre\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "fabric",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which fabric is composed.\";         A textual example of the semantic relation is \"can be made of fabric\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "cloth",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which cloth is composed.\";         A textual example of the semantic relation is \"can be made of cloth\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "leather",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which leather is composed.\";         A textual example of the semantic relation is \"can be made of leather\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "wicker",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which wicker is composed.\";         A textual example of the semantic relation is \"can be made of wicker\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "clay",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which clay is composed.\";         A textual example of the semantic relation is \"can be made of clay\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "aluminum",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which aluminum is composed.\";         A textual example of the semantic relation is \"can be made of aluminum\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "paper",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which paper is composed.\";         A textual example of the semantic relation is \"can be made of paper\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "hollow",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of hollow.\";         A textual example of the semantic relation is \"can be hollow\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "round",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of round.\";         A textual example of the semantic relation is \"can be round\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "circular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of circular.\";         A textual example of the semantic relation is \"can be circular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "cylindrical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of cylindrical.\";         A textual example of the semantic relation is \"can be cylindrical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "conical",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of conical.\";         A textual example of the semantic relation is \"can be conical\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "curved",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of curved.\";         A textual example of the semantic relation is \"can be curved\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "rectangular",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of rectangular.\";         A textual example of the semantic relation is \"can be rectangular\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "square",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of square.\";         A textual example of the semantic relation is \"can be square\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "flat",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of flat.\";         A textual example of the semantic relation is \"can be flat\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "dry",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of dry.\";         A textual example of the semantic relation is \"can be dry\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "reusable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of reusable related to their function.\";         A textual example of the semantic relation is \"can be reusable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "part",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the constitutive parts of glass.\";         A textual example of the semantic relation is \"can have glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "bag",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within bag, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain bags\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "reusable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which reusable is composed.\";         A textual example of the semantic relation is \"can be made of reusable\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "glass",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which glass is composed.\";         A textual example of the semantic relation is \"can be made of glass\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "recycled",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which recycled is composed.\";         A textual example of the semantic relation is \"can be made of recycled\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "instrumentality",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of instrumentality related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentality\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "instrumentation",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of instrumentation related to hypernyms.\";         A textual example of the semantic relation is \"are instrumentation\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "artefact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of artefact related to hypernyms.\";         A textual example of the semantic relation is \"are artefact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "artifact",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of artifact related to hypernyms.\";         A textual example of the semantic relation is \"are artifact\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "container",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of container related to hypernyms.\";         A textual example of the semantic relation is \"are container\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "receptacle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of receptacle related to hypernyms.\";         A textual example of the semantic relation is \"are receptacle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "vessel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of vessel related to hypernyms.\";         A textual example of the semantic relation is \"are vessel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of unit related to hypernyms.\";         A textual example of the semantic relation is \"are unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "cookware",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of cookware related to hypernyms.\";         A textual example of the semantic relation is \"are cookware\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "passage",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of passage related to hypernyms.\";         A textual example of the semantic relation is \"are passage\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "food product",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of food product related to hypernyms.\";         A textual example of the semantic relation is \"are food product\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "conduit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of conduit related to hypernyms.\";         A textual example of the semantic relation is \"are conduit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "supporting structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of supporting structure related to hypernyms.\";         A textual example of the semantic relation is \"are supporting structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "nutrient",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of nutrient related to hypernyms.\";         A textual example of the semantic relation is \"are nutrient\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "avoirdupois unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of avoirdupois unit related to hypernyms.\";         A textual example of the semantic relation is \"are avoirdupois unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "package",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of package related to hypernyms.\";         A textual example of the semantic relation is \"are package\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "tubing",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of tubing related to hypernyms.\";         A textual example of the semantic relation is \"are tubing\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "parcel",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of parcel related to hypernyms.\";         A textual example of the semantic relation is \"are parcel\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "foodstuff",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of foodstuff related to hypernyms.\";         A textual example of the semantic relation is \"are foodstuff\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "tube",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of tube related to hypernyms.\";         A textual example of the semantic relation is \"are tube\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "cooking utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of cooking utensil related to hypernyms.\";         A textual example of the semantic relation is \"are cooking utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "construction",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of construction related to hypernyms.\";         A textual example of the semantic relation is \"are construction\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "sheaf",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of sheaf related to hypernyms.\";         A textual example of the semantic relation is \"are sheaf\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "mass unit",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of mass unit related to hypernyms.\";         A textual example of the semantic relation is \"are mass unit\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "unit of measurement",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of unit of measurement related to hypernyms.\";         A textual example of the semantic relation is \"are unit of measurement\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "meal",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of meal related to hypernyms.\";         A textual example of the semantic relation is \"are meal\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "structure",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of structure related to hypernyms.\";         A textual example of the semantic relation is \"are structure\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "whole",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of whole related to hypernyms.\";         A textual example of the semantic relation is \"are whole\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "framework",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of framework related to hypernyms.\";         A textual example of the semantic relation is \"are framework\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "kitchen utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of kitchen utensil related to hypernyms.\";         A textual example of the semantic relation is \"are kitchen utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "bundle",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of bundle related to hypernyms.\";         A textual example of the semantic relation is \"are bundle\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "food",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of food related to hypernyms.\";         A textual example of the semantic relation is \"are food\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "utensil",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of utensil related to hypernyms.\";         A textual example of the semantic relation is \"are utensil\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "shaped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of shaped.\";         A textual example of the semantic relation is \"can be shaped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "efficiency",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Positive (efficiency) or negative (inefficiency) features of plastic related to their function.\";         A textual example of the semantic relation is \"can be plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "material",
        "value": "plastic",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Material of which plastic is composed.\";         A textual example of the semantic relation is \"can be made of plastic\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "shape",
        "value": "shaped",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Form of shaped.\";         A textual example of the semantic relation is \"can be shaped\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "content",
        "value": "reusable",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"All the entities which might be contained within reusable, without being constitutive parts of it.\";         A textual example of the semantic relation is \"contain reusables\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    },
    {
        "cat": "containers",
        "slot": "generalization",
        "value": "bag",
        "prompt": "### Instruction: \n        Provide a list of 10 words that belong to the category \"containers\";         The returned words must satisfy the semantic relation \"Classification of bag related to hypernyms.\";         A textual example of the semantic relation is \"are bag\";         The desired output is: words in a python list. \n        ### Response: \n        Output: "
    }
]